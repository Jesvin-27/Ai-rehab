{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { atomicAddSnippet } from './shader_util';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class UnsortedSegmentSumProgram {\n  constructor(inShape, outShape, outputDtype) {\n    this.outputShape = [];\n    this.variableNames = ['x', 'segmentIds'];\n    this.uniforms = 'numSegments : i32, xSize: i32,';\n    this.workgroupSize = [64, 1, 1];\n    this.atomic = true;\n    this.outputShape = outShape;\n    this.dispatchLayout = flatDispatchLayout(inShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, inShape, this.workgroupSize);\n    if (outputDtype !== 'float32' && outputDtype !== 'int32') {\n      throw new Error(`UnsortedSegmentSum only supports float32 and int32\n              types, does not support ${outputDtype} type.`);\n    }\n    this.type = outputDtype;\n    this.shaderKey = 'unsortedSegmentSum';\n  }\n  getUserCode() {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.xSize) {\n        let coords = getXCoordsFromIndex(index);\n        let b = coords[0];\n        let inCol = coords[1];\n\n        let segmentId = i32(getSegmentIds(inCol));\n        if (segmentId >= 0) {\n          let flatIndex = b * uniforms.numSegments + segmentId % uniforms.numSegments;\n          let value = getX(b, inCol);\n\n          ${atomicAddSnippet('&result[flatIndex]', 'value', this.type)}\n        }\n      }\n    }\n  `;\n    return userCode;\n  }\n}","map":{"version":3,"names":["atomicAddSnippet","getMainHeaderString","main","computeDispatch","flatDispatchLayout","UnsortedSegmentSumProgram","constructor","inShape","outShape","outputDtype","outputShape","variableNames","uniforms","workgroupSize","atomic","dispatchLayout","dispatch","Error","type","shaderKey","getUserCode","userCode"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/unsorted_segment_sum_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType} from '@tensorflow/tfjs-core';\n\nimport {atomicAddSnippet} from './shader_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class UnsortedSegmentSumProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'segmentIds'];\n  uniforms = 'numSegments : i32, xSize: i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  atomic = true;\n  type: DataType;\n\n  constructor(inShape: number[], outShape: number[], outputDtype: DataType) {\n    this.outputShape = outShape;\n    this.dispatchLayout = flatDispatchLayout(inShape);\n    this.dispatch =\n        computeDispatch(this.dispatchLayout, inShape, this.workgroupSize);\n    if (outputDtype !== 'float32' && outputDtype !== 'int32') {\n      throw new Error(`UnsortedSegmentSum only supports float32 and int32\n              types, does not support ${outputDtype} type.`);\n    }\n    this.type = outputDtype;\n    this.shaderKey = 'unsortedSegmentSum';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.xSize) {\n        let coords = getXCoordsFromIndex(index);\n        let b = coords[0];\n        let inCol = coords[1];\n\n        let segmentId = i32(getSegmentIds(inCol));\n        if (segmentId >= 0) {\n          let flatIndex = b * uniforms.numSegments + segmentId % uniforms.numSegments;\n          let value = getX(b, inCol);\n\n          ${\n        atomicAddSnippet(\n            '&result[flatIndex]', 'value', this.type as 'float32' | 'int32')}\n        }\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAmBA,SAAQA,gBAAgB,QAAO,eAAe;AAC9C,SAAQC,mBAAmB,IAAIC,IAAI,QAAsB,kBAAkB;AAC3E,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAEjE,OAAM,MAAOC,yBAAyB;EAWpCC,YAAYC,OAAiB,EAAEC,QAAkB,EAAEC,WAAqB;IAVxE,KAAAC,WAAW,GAAa,EAAE;IAI1B,KAAAC,aAAa,GAAG,CAAC,GAAG,EAAE,YAAY,CAAC;IACnC,KAAAC,QAAQ,GAAG,gCAAgC;IAC3C,KAAAC,aAAa,GAA6B,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IACpD,KAAAC,MAAM,GAAG,IAAI;IAIX,IAAI,CAACJ,WAAW,GAAGF,QAAQ;IAC3B,IAAI,CAACO,cAAc,GAAGX,kBAAkB,CAACG,OAAO,CAAC;IACjD,IAAI,CAACS,QAAQ,GACTb,eAAe,CAAC,IAAI,CAACY,cAAc,EAAER,OAAO,EAAE,IAAI,CAACM,aAAa,CAAC;IACrE,IAAIJ,WAAW,KAAK,SAAS,IAAIA,WAAW,KAAK,OAAO,EAAE;MACxD,MAAM,IAAIQ,KAAK,CAAC;wCACkBR,WAAW,QAAQ,CAAC;;IAExD,IAAI,CAACS,IAAI,GAAGT,WAAW;IACvB,IAAI,CAACU,SAAS,GAAG,oBAAoB;EACvC;EAEAC,WAAWA,CAAA;IACT,MAAMC,QAAQ,GAAG;MACfnB,IAAI,CAAC,OAAO,CAAC;;;;;;;;;;;YAYXF,gBAAgB,CACZ,oBAAoB,EAAE,OAAO,EAAE,IAAI,CAACkB,IAA2B,CAAC;;;;GAIzE;IACC,OAAOG,QAAQ;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}