{"ast":null,"code":"// src/exercises/ShoulderRolls.js\n\nlet prevState = 'neutral';\nlet lastSpoken = '';\nlet lastSpeakTime = 0;\nlet activeSide = ''; // 'left' or 'right'\n\nexport function resetShoulderRolls() {\n  prevState = 'neutral';\n  lastSpoken = '';\n  lastSpeakTime = 0;\n  activeSide = '';\n}\nexport function processShoulderRolls(landmarks) {\n  const now = Date.now();\n  const leftShoulder = landmarks[11]; // LEFT\n  const rightShoulder = landmarks[12]; // RIGHT\n  const leftEar = landmarks[7];\n  const rightEar = landmarks[8];\n  if (!leftShoulder || !rightShoulder || !leftEar || !rightEar) {\n    return {\n      speak: 'Shoulders not visible. Adjust your position.'\n    };\n  }\n\n  // Detect vertical lift relative to ear height\n  const leftLift = leftEar.y - leftShoulder.y;\n  const rightLift = rightEar.y - rightShoulder.y;\n  const liftThreshold = 0.05; // tuned for MediaPipe landmark scale\n  const dropThreshold = -0.02;\n\n  // Detect left shoulder roll\n  if (leftLift > liftThreshold && prevState === 'neutral') {\n    prevState = 'leftUp';\n    activeSide = 'left';\n    return {\n      speak: 'Left shoulder up'\n    };\n  }\n  if (activeSide === 'left' && leftLift < dropThreshold && prevState === 'leftUp') {\n    prevState = 'neutral';\n    activeSide = '';\n    return {\n      speak: 'Left shoulder roll complete',\n      rep: 1\n    };\n  }\n\n  // Detect right shoulder roll\n  if (rightLift > liftThreshold && prevState === 'neutral') {\n    prevState = 'rightUp';\n    activeSide = 'right';\n    return {\n      speak: 'Right shoulder up'\n    };\n  }\n  if (activeSide === 'right' && rightLift < dropThreshold && prevState === 'rightUp') {\n    prevState = 'neutral';\n    activeSide = '';\n    return {\n      speak: 'Right shoulder roll complete',\n      rep: 1\n    };\n  }\n\n  // Encouragement every few seconds\n  if (now - lastSpeakTime > 5000 && prevState === 'neutral') {\n    lastSpeakTime = now;\n    return {\n      speak: 'Try rolling your shoulders'\n    };\n  }\n  return null;\n}","map":{"version":3,"names":["prevState","lastSpoken","lastSpeakTime","activeSide","resetShoulderRolls","processShoulderRolls","landmarks","now","Date","leftShoulder","rightShoulder","leftEar","rightEar","speak","leftLift","y","rightLift","liftThreshold","dropThreshold","rep"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/Ai-rehab/src/exercises/ShoulderRolls.js"],"sourcesContent":["// src/exercises/ShoulderRolls.js\n\nlet prevState = 'neutral';\nlet lastSpoken = '';\nlet lastSpeakTime = 0;\nlet activeSide = ''; // 'left' or 'right'\n\nexport function resetShoulderRolls() {\n  prevState = 'neutral';\n  lastSpoken = '';\n  lastSpeakTime = 0;\n  activeSide = '';\n}\n\nexport function processShoulderRolls(landmarks) {\n  const now = Date.now();\n\n  const leftShoulder = landmarks[11]; // LEFT\n  const rightShoulder = landmarks[12]; // RIGHT\n  const leftEar = landmarks[7];\n  const rightEar = landmarks[8];\n\n  if (!leftShoulder || !rightShoulder || !leftEar || !rightEar) {\n    return { speak: 'Shoulders not visible. Adjust your position.' };\n  }\n\n  // Detect vertical lift relative to ear height\n  const leftLift = leftEar.y - leftShoulder.y;\n  const rightLift = rightEar.y - rightShoulder.y;\n\n  const liftThreshold = 0.05;   // tuned for MediaPipe landmark scale\n  const dropThreshold = -0.02;\n\n  // Detect left shoulder roll\n  if (leftLift > liftThreshold && prevState === 'neutral') {\n    prevState = 'leftUp';\n    activeSide = 'left';\n    return { speak: 'Left shoulder up' };\n  }\n\n  if (activeSide === 'left' && leftLift < dropThreshold && prevState === 'leftUp') {\n    prevState = 'neutral';\n    activeSide = '';\n    return { speak: 'Left shoulder roll complete', rep: 1 };\n  }\n\n  // Detect right shoulder roll\n  if (rightLift > liftThreshold && prevState === 'neutral') {\n    prevState = 'rightUp';\n    activeSide = 'right';\n    return { speak: 'Right shoulder up' };\n  }\n\n  if (activeSide === 'right' && rightLift < dropThreshold && prevState === 'rightUp') {\n    prevState = 'neutral';\n    activeSide = '';\n    return { speak: 'Right shoulder roll complete', rep: 1 };\n  }\n\n  // Encouragement every few seconds\n  if (now - lastSpeakTime > 5000 && prevState === 'neutral') {\n    lastSpeakTime = now;\n    return { speak: 'Try rolling your shoulders' };\n  }\n\n  return null;\n}\n"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAG,SAAS;AACzB,IAAIC,UAAU,GAAG,EAAE;AACnB,IAAIC,aAAa,GAAG,CAAC;AACrB,IAAIC,UAAU,GAAG,EAAE,CAAC,CAAC;;AAErB,OAAO,SAASC,kBAAkBA,CAAA,EAAG;EACnCJ,SAAS,GAAG,SAAS;EACrBC,UAAU,GAAG,EAAE;EACfC,aAAa,GAAG,CAAC;EACjBC,UAAU,GAAG,EAAE;AACjB;AAEA,OAAO,SAASE,oBAAoBA,CAACC,SAAS,EAAE;EAC9C,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;EAEtB,MAAME,YAAY,GAAGH,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;EACpC,MAAMI,aAAa,GAAGJ,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;EACrC,MAAMK,OAAO,GAAGL,SAAS,CAAC,CAAC,CAAC;EAC5B,MAAMM,QAAQ,GAAGN,SAAS,CAAC,CAAC,CAAC;EAE7B,IAAI,CAACG,YAAY,IAAI,CAACC,aAAa,IAAI,CAACC,OAAO,IAAI,CAACC,QAAQ,EAAE;IAC5D,OAAO;MAAEC,KAAK,EAAE;IAA+C,CAAC;EAClE;;EAEA;EACA,MAAMC,QAAQ,GAAGH,OAAO,CAACI,CAAC,GAAGN,YAAY,CAACM,CAAC;EAC3C,MAAMC,SAAS,GAAGJ,QAAQ,CAACG,CAAC,GAAGL,aAAa,CAACK,CAAC;EAE9C,MAAME,aAAa,GAAG,IAAI,CAAC,CAAG;EAC9B,MAAMC,aAAa,GAAG,CAAC,IAAI;;EAE3B;EACA,IAAIJ,QAAQ,GAAGG,aAAa,IAAIjB,SAAS,KAAK,SAAS,EAAE;IACvDA,SAAS,GAAG,QAAQ;IACpBG,UAAU,GAAG,MAAM;IACnB,OAAO;MAAEU,KAAK,EAAE;IAAmB,CAAC;EACtC;EAEA,IAAIV,UAAU,KAAK,MAAM,IAAIW,QAAQ,GAAGI,aAAa,IAAIlB,SAAS,KAAK,QAAQ,EAAE;IAC/EA,SAAS,GAAG,SAAS;IACrBG,UAAU,GAAG,EAAE;IACf,OAAO;MAAEU,KAAK,EAAE,6BAA6B;MAAEM,GAAG,EAAE;IAAE,CAAC;EACzD;;EAEA;EACA,IAAIH,SAAS,GAAGC,aAAa,IAAIjB,SAAS,KAAK,SAAS,EAAE;IACxDA,SAAS,GAAG,SAAS;IACrBG,UAAU,GAAG,OAAO;IACpB,OAAO;MAAEU,KAAK,EAAE;IAAoB,CAAC;EACvC;EAEA,IAAIV,UAAU,KAAK,OAAO,IAAIa,SAAS,GAAGE,aAAa,IAAIlB,SAAS,KAAK,SAAS,EAAE;IAClFA,SAAS,GAAG,SAAS;IACrBG,UAAU,GAAG,EAAE;IACf,OAAO;MAAEU,KAAK,EAAE,8BAA8B;MAAEM,GAAG,EAAE;IAAE,CAAC;EAC1D;;EAEA;EACA,IAAIZ,GAAG,GAAGL,aAAa,GAAG,IAAI,IAAIF,SAAS,KAAK,SAAS,EAAE;IACzDE,aAAa,GAAGK,GAAG;IACnB,OAAO;MAAEM,KAAK,EAAE;IAA6B,CAAC;EAChD;EAEA,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}