{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeNearestNeighbor } from '@tensorflow/tfjs-core';\nimport { ResizeNearestNeighborProgram } from '../resize_nearest_neighbor_webgpu';\nexport function resizeNearestNeighbor(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    images\n  } = inputs;\n  const {\n    alignCorners,\n    halfPixelCenters,\n    size\n  } = attrs;\n  const [newHeight, newWidth] = size;\n  const adjustHeight = alignCorners && newHeight > 1 ? 1.0 : 0.0;\n  const adjustWidth = alignCorners && newWidth > 1 ? 1.0 : 0.0;\n  // When align corners is false, we rounds the value with floor.\n  const roundBase = alignCorners ? 0.5 : 0.0;\n  const uniformData = [{\n    type: 'float32',\n    data: [adjustHeight, adjustWidth]\n  }, {\n    type: 'float32',\n    data: [roundBase]\n  }];\n  const program = new ResizeNearestNeighborProgram(images.shape, newHeight, newWidth, halfPixelCenters);\n  return backend.runWebGPUProgram(program, [images], images.dtype, uniformData);\n}\nexport const resizeNearestNeighborConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgpu',\n  kernelFunc: resizeNearestNeighbor\n};","map":{"version":3,"names":["ResizeNearestNeighbor","ResizeNearestNeighborProgram","resizeNearestNeighbor","args","inputs","backend","attrs","images","alignCorners","halfPixelCenters","size","newHeight","newWidth","adjustHeight","adjustWidth","roundBase","uniformData","type","data","program","shape","runWebGPUProgram","dtype","resizeNearestNeighborConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/ResizeNearestNeighbor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ResizeNearestNeighborProgram} from '../resize_nearest_neighbor_webgpu';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: WebGPUBackend,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n  const adjustHeight = alignCorners && newHeight > 1 ? 1.0 : 0.0;\n  const adjustWidth = alignCorners && newWidth > 1 ? 1.0 : 0.0;\n  // When align corners is false, we rounds the value with floor.\n  const roundBase = alignCorners ? 0.5 : 0.0;\n  const uniformData = [\n    {type: 'float32', data: [adjustHeight, adjustWidth]},\n    {type: 'float32', data: [roundBase]}\n  ];\n\n  const program = new ResizeNearestNeighborProgram(\n      images.shape as [number, number, number, number], newHeight, newWidth,\n      halfPixelCenters);\n  return backend.runWebGPUProgram(program, [images], images.dtype, uniformData);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgpu',\n  kernelFunc: resizeNearestNeighbor as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,qBAAqB,QAA4E,uBAAuB;AAG1J,SAAQC,4BAA4B,QAAO,mCAAmC;AAE9E,OAAM,SAAUC,qBAAqBA,CAACC,IAIrC;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAM,CAAC,GAAGH,MAAM;EACvB,MAAM;IAACI,YAAY;IAAEC,gBAAgB;IAAEC;EAAI,CAAC,GAAGJ,KAAK;EAEpD,MAAM,CAACK,SAAS,EAAEC,QAAQ,CAAC,GAAGF,IAAI;EAClC,MAAMG,YAAY,GAAGL,YAAY,IAAIG,SAAS,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG;EAC9D,MAAMG,WAAW,GAAGN,YAAY,IAAII,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG;EAC5D;EACA,MAAMG,SAAS,GAAGP,YAAY,GAAG,GAAG,GAAG,GAAG;EAC1C,MAAMQ,WAAW,GAAG,CAClB;IAACC,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE,CAACL,YAAY,EAAEC,WAAW;EAAC,CAAC,EACpD;IAACG,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE,CAACH,SAAS;EAAC,CAAC,CACrC;EAED,MAAMI,OAAO,GAAG,IAAIlB,4BAA4B,CAC5CM,MAAM,CAACa,KAAyC,EAAET,SAAS,EAAEC,QAAQ,EACrEH,gBAAgB,CAAC;EACrB,OAAOJ,OAAO,CAACgB,gBAAgB,CAACF,OAAO,EAAE,CAACZ,MAAM,CAAC,EAAEA,MAAM,CAACe,KAAK,EAAEN,WAAW,CAAC;AAC/E;AAEA,OAAO,MAAMO,2BAA2B,GAAiB;EACvDC,UAAU,EAAExB,qBAAqB;EACjCyB,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAExB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}