{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BinaryOpType, getBinaryOpString } from './binary_op_util';\nimport { getUnaryOpString, UnaryOpType } from './unary_op_util';\nimport { typeSnippet } from './webgpu_program';\nexport function activationFnSnippet(activation, hasPreluActivationWeights = false, packed = false, coordsLength = 3) {\n  if (activation === null) {\n    return '';\n  }\n  let activationOpSnippet = '';\n  if (activation === 'linear') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.LINEAR);\n  } else if (activation === 'relu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.RELU, packed);\n  } else if (activation === 'elu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.ELU, packed);\n  } else if (activation === 'relu6') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.RELU6, packed);\n  } else if (activation === 'prelu') {\n    activationOpSnippet = getBinaryOpString(BinaryOpType.PRELU, packed);\n  } else if (activation === 'sigmoid') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.SIGMOID, packed);\n  } else if (activation === 'leakyrelu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.LEAKYRELU, packed);\n  } else {\n    throw new Error(`Activation ${activation} has not been implemented for the WebGPU backend.`);\n  }\n  const elementSize = packed ? 4 : 1;\n  const dataType = typeSnippet(elementSize);\n  let activationFnSnippet = '';\n  if (hasPreluActivationWeights) {\n    activationFnSnippet = `\n      fn activation(a : ${dataType}, coords : vec${coordsLength}<i32>) -> ${dataType} {\n        let b = getPreluActivationWeightsByOutputCoords(coords);\n        ${activationOpSnippet}\n      }`;\n  } else {\n    activationFnSnippet = `\n      fn activation(a : ${dataType}, coords : vec${coordsLength}<i32>) -> ${dataType} {\n        ${activationOpSnippet}\n      }`;\n  }\n  return activationFnSnippet;\n}\nexport function biasActivationSnippet(hasBias, activation) {\n  return `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n}","map":{"version":3,"names":["BinaryOpType","getBinaryOpString","getUnaryOpString","UnaryOpType","typeSnippet","activationFnSnippet","activation","hasPreluActivationWeights","packed","coordsLength","activationOpSnippet","LINEAR","RELU","ELU","RELU6","PRELU","SIGMOID","LEAKYRELU","Error","elementSize","dataType","biasActivationSnippet","hasBias"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/activation_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType, getBinaryOpString} from './binary_op_util';\nimport {getUnaryOpString, UnaryOpType} from './unary_op_util';\nimport {typeSnippet} from './webgpu_program';\n\nexport function activationFnSnippet(\n    activation: backend_util.Activation, hasPreluActivationWeights = false,\n    packed = false, coordsLength = 3): string {\n  if (activation === null) {\n    return '';\n  }\n\n  let activationOpSnippet = '';\n  if (activation === 'linear') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.LINEAR);\n  } else if (activation === 'relu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.RELU, packed);\n  } else if (activation === 'elu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.ELU, packed);\n  } else if (activation === 'relu6') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.RELU6, packed);\n  } else if (activation === 'prelu') {\n    activationOpSnippet = getBinaryOpString(BinaryOpType.PRELU, packed);\n  } else if (activation === 'sigmoid') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.SIGMOID, packed);\n  } else if (activation === 'leakyrelu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.LEAKYRELU, packed);\n  } else {\n    throw new Error(`Activation ${\n        activation} has not been implemented for the WebGPU backend.`);\n  }\n  const elementSize = packed ? 4 : 1;\n  const dataType = typeSnippet(elementSize);\n  let activationFnSnippet = '';\n  if (hasPreluActivationWeights) {\n    activationFnSnippet = `\n      fn activation(a : ${dataType}, coords : vec${coordsLength}<i32>) -> ${\n        dataType} {\n        let b = getPreluActivationWeightsByOutputCoords(coords);\n        ${activationOpSnippet}\n      }`;\n  } else {\n    activationFnSnippet = `\n      fn activation(a : ${dataType}, coords : vec${coordsLength}<i32>) -> ${\n        dataType} {\n        ${activationOpSnippet}\n      }`;\n  }\n  return activationFnSnippet;\n}\n\nexport function biasActivationSnippet(\n    hasBias: boolean, activation: backend_util.Activation): string {\n  return `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAmBA,SAAQA,YAAY,EAAEC,iBAAiB,QAAO,kBAAkB;AAChE,SAAQC,gBAAgB,EAAEC,WAAW,QAAO,iBAAiB;AAC7D,SAAQC,WAAW,QAAO,kBAAkB;AAE5C,OAAM,SAAUC,mBAAmBA,CAC/BC,UAAmC,EAAEC,yBAAyB,GAAG,KAAK,EACtEC,MAAM,GAAG,KAAK,EAAEC,YAAY,GAAG,CAAC;EAClC,IAAIH,UAAU,KAAK,IAAI,EAAE;IACvB,OAAO,EAAE;;EAGX,IAAII,mBAAmB,GAAG,EAAE;EAC5B,IAAIJ,UAAU,KAAK,QAAQ,EAAE;IAC3BI,mBAAmB,GAAGR,gBAAgB,CAACC,WAAW,CAACQ,MAAM,CAAC;GAC3D,MAAM,IAAIL,UAAU,KAAK,MAAM,EAAE;IAChCI,mBAAmB,GAAGR,gBAAgB,CAACC,WAAW,CAACS,IAAI,EAAEJ,MAAM,CAAC;GACjE,MAAM,IAAIF,UAAU,KAAK,KAAK,EAAE;IAC/BI,mBAAmB,GAAGR,gBAAgB,CAACC,WAAW,CAACU,GAAG,EAAEL,MAAM,CAAC;GAChE,MAAM,IAAIF,UAAU,KAAK,OAAO,EAAE;IACjCI,mBAAmB,GAAGR,gBAAgB,CAACC,WAAW,CAACW,KAAK,EAAEN,MAAM,CAAC;GAClE,MAAM,IAAIF,UAAU,KAAK,OAAO,EAAE;IACjCI,mBAAmB,GAAGT,iBAAiB,CAACD,YAAY,CAACe,KAAK,EAAEP,MAAM,CAAC;GACpE,MAAM,IAAIF,UAAU,KAAK,SAAS,EAAE;IACnCI,mBAAmB,GAAGR,gBAAgB,CAACC,WAAW,CAACa,OAAO,EAAER,MAAM,CAAC;GACpE,MAAM,IAAIF,UAAU,KAAK,WAAW,EAAE;IACrCI,mBAAmB,GAAGR,gBAAgB,CAACC,WAAW,CAACc,SAAS,EAAET,MAAM,CAAC;GACtE,MAAM;IACL,MAAM,IAAIU,KAAK,CAAC,cACZZ,UAAU,mDAAmD,CAAC;;EAEpE,MAAMa,WAAW,GAAGX,MAAM,GAAG,CAAC,GAAG,CAAC;EAClC,MAAMY,QAAQ,GAAGhB,WAAW,CAACe,WAAW,CAAC;EACzC,IAAId,mBAAmB,GAAG,EAAE;EAC5B,IAAIE,yBAAyB,EAAE;IAC7BF,mBAAmB,GAAG;0BACAe,QAAQ,iBAAiBX,YAAY,aACvDW,QAAQ;;UAENV,mBAAmB;QACrB;GACL,MAAM;IACLL,mBAAmB,GAAG;0BACAe,QAAQ,iBAAiBX,YAAY,aACvDW,QAAQ;UACNV,mBAAmB;QACrB;;EAEN,OAAOL,mBAAmB;AAC5B;AAEA,OAAM,SAAUgB,qBAAqBA,CACjCC,OAAgB,EAAEhB,UAAmC;EACvD,OAAO;QACDgB,OAAO,GAAG,gDAAgD,GAAG,EAAE;QAC/DhB,UAAU,GAAG,oCAAoC,GAAG,EAAE;OACvD;AACP","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}