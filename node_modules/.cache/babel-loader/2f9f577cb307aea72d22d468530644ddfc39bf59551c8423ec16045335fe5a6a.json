{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { sliceImplCPU } from '../kernel_utils/shared';\nimport { SliceProgram } from '../slice_webgpu';\nexport function slice(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    begin,\n    size\n  } = attrs;\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTensorData = backend.tensorMap.get(x.dataId);\n    const outValues = sliceImplCPU(xTensorData.values, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n  // TODO(xing.xu): Add shadow slice support.\n  const program = new SliceProgram($begin, $size);\n  const uniformData = [{\n    type: 'int32',\n    data: $begin\n  }];\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\nexport const sliceConfig = {\n  kernelName: Slice,\n  backendName: 'webgpu',\n  kernelFunc: slice\n};","map":{"version":3,"names":["Slice","slice_util","util","sliceImplCPU","SliceProgram","slice","args","inputs","backend","attrs","x","begin","size","$begin","$size","parseSliceParams","assertParamsValid","shouldExecuteOnCPU","dtype","xTensorData","tensorMap","get","dataId","outValues","values","shape","makeTensorInfo","sizeFromShape","program","uniformData","type","data","runWebGPUProgram","sliceConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/Slice.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {sliceImplCPU} from '../kernel_utils/shared';\nimport {SliceProgram} from '../slice_webgpu';\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: WebGPUBackend, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTensorData = backend.tensorMap.get(x.dataId);\n    const outValues = sliceImplCPU(\n        xTensorData.values as TypedArray, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n\n  // TODO(xing.xu): Add shadow slice support.\n  const program = new SliceProgram($begin, $size);\n  const uniformData = [{type: 'int32', data: $begin}];\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'webgpu',\n  kernelFunc: slice as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,KAAK,EAAEC,UAAU,EAAmDC,IAAI,QAAO,uBAAuB;AAGxI,SAAQC,YAAY,QAAO,wBAAwB;AACnD,SAAQC,YAAY,QAAO,iBAAiB;AAE5C,OAAM,SAAUC,KAAKA,CACjBC,IAAsE;EAExE,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI,KAAK;IAAEC;EAAI,CAAC,GAAGH,KAAK;EAE3B,MAAM,CAACI,MAAM,EAAEC,KAAK,CAAC,GAAGb,UAAU,CAACc,gBAAgB,CAACL,CAAC,EAAEC,KAAK,EAAEC,IAAI,CAAC;EACnEX,UAAU,CAACe,iBAAiB,CAACN,CAAC,EAAEG,MAAM,EAAEC,KAAK,CAAC;EAE9C,IAAIN,OAAO,CAACS,kBAAkB,CAAC,CAACP,CAAC,CAAC,CAAC,IAAIA,CAAC,CAACQ,KAAK,KAAK,QAAQ,EAAE;IAC3D,MAAMC,WAAW,GAAGX,OAAO,CAACY,SAAS,CAACC,GAAG,CAACX,CAAC,CAACY,MAAM,CAAC;IACnD,MAAMC,SAAS,GAAGpB,YAAY,CAC1BgB,WAAW,CAACK,MAAoB,EAAEX,MAAM,EAAEC,KAAK,EAAEJ,CAAC,CAACe,KAAK,EAAEf,CAAC,CAACQ,KAAK,CAAC;IACtE,OAAOV,OAAO,CAACkB,cAAc,CAACZ,KAAK,EAAEJ,CAAC,CAACQ,KAAK,EAAEK,SAAS,CAAC;;EAG1D,IAAIrB,IAAI,CAACyB,aAAa,CAACb,KAAK,CAAC,KAAK,CAAC,EAAE;IACnC,OAAON,OAAO,CAACkB,cAAc,CAACZ,KAAK,EAAEJ,CAAC,CAACQ,KAAK,EAAE,EAAE,CAAC;;EAGnD;EACA,MAAMU,OAAO,GAAG,IAAIxB,YAAY,CAACS,MAAM,EAAEC,KAAK,CAAC;EAC/C,MAAMe,WAAW,GAAG,CAAC;IAACC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAElB;EAAM,CAAC,CAAC;EACnD,OAAOL,OAAO,CAACwB,gBAAgB,CAACJ,OAAO,EAAE,CAAClB,CAAC,CAAC,EAAEA,CAAC,CAACQ,KAAK,EAAEW,WAAW,CAAC;AACrE;AAEA,OAAO,MAAMI,WAAW,GAAiB;EACvCC,UAAU,EAAElC,KAAK;EACjBmC,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAE/B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}