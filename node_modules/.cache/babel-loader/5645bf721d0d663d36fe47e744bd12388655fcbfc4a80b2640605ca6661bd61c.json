{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BroadcastArgs, util } from '@tensorflow/tfjs-core';\nimport { BroadcastArgsProgram } from '../broadcast_args_webgpu';\nexport function broadcastArgs(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    s0,\n    s1\n  } = inputs;\n  if (backend.shouldExecuteOnCPU([s0, s1])) {\n    const s0TensorInfo = backend.tensorMap.get(s0.dataId);\n    const s1TensorInfo = backend.tensorMap.get(s1.dataId);\n    const s0Vals = s0TensorInfo.values;\n    const s1Vals = s1TensorInfo.values;\n    const broadcastShape = backend_util.assertAndGetBroadcastShape(Array.from(s0Vals), Array.from(s1Vals));\n    return backend.makeTensorInfo([broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n  }\n  const s0Size = util.sizeFromShape(s0.shape);\n  const s1Size = util.sizeFromShape(s1.shape);\n  const outputSize = Math.max(s0Size, s1Size);\n  const program = new BroadcastArgsProgram(outputSize);\n  const uniformData = [{\n    type: 'int32',\n    data: [s0Size]\n  }, {\n    type: 'int32',\n    data: [s1Size]\n  }];\n  return backend.runWebGPUProgram(program, [s0, s1], 'int32', uniformData);\n}\nexport const broadcastArgsConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'webgpu',\n  kernelFunc: broadcastArgs\n};","map":{"version":3,"names":["backend_util","BroadcastArgs","util","BroadcastArgsProgram","broadcastArgs","args","inputs","backend","s0","s1","shouldExecuteOnCPU","s0TensorInfo","tensorMap","get","dataId","s1TensorInfo","s0Vals","values","s1Vals","broadcastShape","assertAndGetBroadcastShape","Array","from","makeTensorInfo","length","Int32Array","s0Size","sizeFromShape","shape","s1Size","outputSize","Math","max","program","uniformData","type","data","runWebGPUProgram","broadcastArgsConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/BroadcastArgs.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BroadcastArgsProgram} from '../broadcast_args_webgpu';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: WebGPUBackend,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  if (backend.shouldExecuteOnCPU([s0, s1])) {\n    const s0TensorInfo = backend.tensorMap.get(s0.dataId);\n    const s1TensorInfo = backend.tensorMap.get(s1.dataId);\n    const s0Vals = s0TensorInfo.values as TypedArray;\n    const s1Vals = s1TensorInfo.values as TypedArray;\n    const broadcastShape = backend_util.assertAndGetBroadcastShape(\n        Array.from(s0Vals), Array.from(s1Vals));\n    return backend.makeTensorInfo(\n        [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n  }\n\n  const s0Size = util.sizeFromShape(s0.shape);\n  const s1Size = util.sizeFromShape(s1.shape);\n  const outputSize = Math.max(s0Size, s1Size);\n\n  const program = new BroadcastArgsProgram(outputSize);\n  const uniformData =\n      [{type: 'int32', data: [s0Size]}, {type: 'int32', data: [s1Size]}];\n  return backend.runWebGPUProgram(program, [s0, s1], 'int32', uniformData);\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'webgpu',\n  kernelFunc: broadcastArgs as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAEC,aAAa,EAAyEC,IAAI,QAAO,uBAAuB;AAG9I,SAAQC,oBAAoB,QAAO,0BAA0B;AAE7D,OAAM,SAAUC,aAAaA,CAACC,IAG7B;EACC,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAC9B,MAAM;IAACG,EAAE;IAAEC;EAAE,CAAC,GAAGH,MAAM;EAEvB,IAAIC,OAAO,CAACG,kBAAkB,CAAC,CAACF,EAAE,EAAEC,EAAE,CAAC,CAAC,EAAE;IACxC,MAAME,YAAY,GAAGJ,OAAO,CAACK,SAAS,CAACC,GAAG,CAACL,EAAE,CAACM,MAAM,CAAC;IACrD,MAAMC,YAAY,GAAGR,OAAO,CAACK,SAAS,CAACC,GAAG,CAACJ,EAAE,CAACK,MAAM,CAAC;IACrD,MAAME,MAAM,GAAGL,YAAY,CAACM,MAAoB;IAChD,MAAMC,MAAM,GAAGH,YAAY,CAACE,MAAoB;IAChD,MAAME,cAAc,GAAGnB,YAAY,CAACoB,0BAA0B,CAC1DC,KAAK,CAACC,IAAI,CAACN,MAAM,CAAC,EAAEK,KAAK,CAACC,IAAI,CAACJ,MAAM,CAAC,CAAC;IAC3C,OAAOX,OAAO,CAACgB,cAAc,CACzB,CAACJ,cAAc,CAACK,MAAM,CAAC,EAAE,OAAO,EAAEC,UAAU,CAACH,IAAI,CAACH,cAAc,CAAC,CAAC;;EAGxE,MAAMO,MAAM,GAAGxB,IAAI,CAACyB,aAAa,CAACnB,EAAE,CAACoB,KAAK,CAAC;EAC3C,MAAMC,MAAM,GAAG3B,IAAI,CAACyB,aAAa,CAAClB,EAAE,CAACmB,KAAK,CAAC;EAC3C,MAAME,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACN,MAAM,EAAEG,MAAM,CAAC;EAE3C,MAAMI,OAAO,GAAG,IAAI9B,oBAAoB,CAAC2B,UAAU,CAAC;EACpD,MAAMI,WAAW,GACb,CAAC;IAACC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACV,MAAM;EAAC,CAAC,EAAE;IAACS,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACP,MAAM;EAAC,CAAC,CAAC;EACtE,OAAOtB,OAAO,CAAC8B,gBAAgB,CAACJ,OAAO,EAAE,CAACzB,EAAE,EAAEC,EAAE,CAAC,EAAE,OAAO,EAAEyB,WAAW,CAAC;AAC1E;AAEA,OAAO,MAAMI,mBAAmB,GAAiB;EAC/CC,UAAU,EAAEtC,aAAa;EACzBuC,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAErC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}