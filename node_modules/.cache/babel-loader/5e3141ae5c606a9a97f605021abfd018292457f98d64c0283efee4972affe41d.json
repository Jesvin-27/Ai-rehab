{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType, getCoordsXYZ, getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class TransposeProgram {\n  constructor(aShape, newDim) {\n    this.variableNames = ['A'];\n    this.workPerThread = 1;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    const outputShape = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]);\n    this.newDim = newDim;\n    this.shaderKey = `transpose_${newDim}`;\n  }\n  getUserCode() {\n    const dtype = getCoordsDataType(this.outputShape.length);\n    const switched = getSwitchedCoords(this.newDim);\n    const userCode = `\n      ${main('index')} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(\n              ${dtype}(${switched}), uniforms.aShape)]);\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\nexport function getSwitchedCoords(newDim) {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = `coords.${getCoordsXYZ(i)}`;\n  }\n  return switchedCoords.join();\n}","map":{"version":3,"names":["getCoordsDataType","getCoordsXYZ","getMainHeaderString","main","computeDispatch","flatDispatchLayout","TransposeProgram","constructor","aShape","newDim","variableNames","workPerThread","workgroupSize","size","outputShape","Array","length","i","dispatchLayout","dispatch","shaderKey","getUserCode","dtype","switched","getSwitchedCoords","userCode","rank","Error","switchedCoords","join"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/transpose_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getCoordsXYZ, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class TransposeProgram implements WebGPUProgram {\n  variableNames = ['A'];\n  shaderKey: string;\n  outputShape: number[];\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  newDim: number[];\n  size = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n\n    this.newDim = newDim;\n    this.shaderKey = `transpose_${newDim}`;\n  }\n\n  getUserCode(): string {\n    const dtype = getCoordsDataType(this.outputShape.length);\n    const switched = getSwitchedCoords(this.newDim);\n\n    const userCode = `\n      ${main('index')} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            setOutputAtIndex(flatIndex, A[getIndexFromCoords${\n        this.outputShape.length}D(\n              ${dtype}(${switched}), uniforms.aShape)]);\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\nexport function getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = `coords.${getCoordsXYZ(i)}`;\n  }\n\n  return switchedCoords.join();\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,iBAAiB,EAAEC,YAAY,EAAEC,mBAAmB,IAAIC,IAAI,QAAsB,kBAAkB;AAC5G,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAEjE,OAAM,MAAOC,gBAAgB;EAW3BC,YAAYC,MAAgB,EAAEC,MAAgB;IAV9C,KAAAC,aAAa,GAAG,CAAC,GAAG,CAAC;IAKrB,KAAAC,aAAa,GAAG,CAAC;IACjB,KAAAC,aAAa,GAA6B,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IAEpD,KAAAC,IAAI,GAAG,IAAI;IAGT,MAAMC,WAAW,GAAa,IAAIC,KAAK,CAACP,MAAM,CAACQ,MAAM,CAAC;IACtD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC3CH,WAAW,CAACG,CAAC,CAAC,GAAGT,MAAM,CAACC,MAAM,CAACQ,CAAC,CAAC,CAAC;;IAEpC,IAAI,CAACH,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACI,cAAc,GAAGb,kBAAkB,CAAC,IAAI,CAACS,WAAW,CAAC;IAC1D,IAAI,CAACK,QAAQ,GAAGf,eAAe,CAC3B,IAAI,CAACc,cAAc,EAAE,IAAI,CAACJ,WAAW,EAAE,IAAI,CAACF,aAAa,EACzD,CAAC,IAAI,CAACD,aAAa,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAE/B,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACW,SAAS,GAAG,aAAaX,MAAM,EAAE;EACxC;EAEAY,WAAWA,CAAA;IACT,MAAMC,KAAK,GAAGtB,iBAAiB,CAAC,IAAI,CAACc,WAAW,CAACE,MAAM,CAAC;IACxD,MAAMO,QAAQ,GAAGC,iBAAiB,CAAC,IAAI,CAACf,MAAM,CAAC;IAE/C,MAAMgB,QAAQ,GAAG;QACbtB,IAAI,CAAC,OAAO,CAAC;6BACQ,IAAI,CAACQ,aAAa;oCACX,IAAI,CAACA,aAAa;;;8DAI9C,IAAI,CAACG,WAAW,CAACE,MAAM;gBACfM,KAAK,IAAIC,QAAQ;;;;KAI5B;IACD,OAAOE,QAAQ;EACjB;;AAGF,OAAM,SAAUD,iBAAiBA,CAACf,MAAgB;EAChD,MAAMiB,IAAI,GAAGjB,MAAM,CAACO,MAAM;EAC1B,IAAIU,IAAI,GAAG,CAAC,EAAE;IACZ,MAAMC,KAAK,CAAC,sBAAsBD,IAAI,uBAAuB,CAAC;;EAEhE,MAAME,cAAc,GAAG,IAAIb,KAAK,CAACW,IAAI,CAAC;EACtC,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,MAAM,CAACO,MAAM,EAAEC,CAAC,EAAE,EAAE;IACtCW,cAAc,CAACnB,MAAM,CAACQ,CAAC,CAAC,CAAC,GAAG,UAAUhB,YAAY,CAACgB,CAAC,CAAC,EAAE;;EAGzD,OAAOW,cAAc,CAACC,IAAI,EAAE;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}