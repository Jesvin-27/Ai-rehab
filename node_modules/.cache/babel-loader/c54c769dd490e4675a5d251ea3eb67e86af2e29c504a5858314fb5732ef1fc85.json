{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm } from '@tensorflow/tfjs-core';\nimport { BatchNormProgram } from '../batchnorm_webgpu';\nexport const fusedBatchNormConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgpu',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x,\n      scale,\n      offset,\n      mean,\n      variance\n    } = inputs;\n    const {\n      varianceEpsilon\n    } = attrs;\n    const webGPUBackend = backend;\n    const batchNormInputs = [x, mean, variance];\n    let offsetShape = null;\n    if (offset != null) {\n      offsetShape = offset.shape;\n      batchNormInputs.push(offset);\n    }\n    let scaleShape = null;\n    if (scale != null) {\n      scaleShape = scale.shape;\n      batchNormInputs.push(scale);\n    }\n    const program = new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape);\n    const uniformData = [{\n      type: 'float32',\n      data: [varianceEpsilon]\n    }];\n    return webGPUBackend.runWebGPUProgram(program, batchNormInputs, x.dtype, uniformData);\n  }\n};","map":{"version":3,"names":["FusedBatchNorm","BatchNormProgram","fusedBatchNormConfig","kernelName","backendName","kernelFunc","inputs","attrs","backend","x","scale","offset","mean","variance","varianceEpsilon","webGPUBackend","batchNormInputs","offsetShape","shape","push","scaleShape","program","uniformData","type","data","runWebGPUProgram","dtype"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/FusedBatchNorm.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, Tensor} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {BatchNormProgram} from '../batchnorm_webgpu';\n\nexport const fusedBatchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x, scale, offset, mean, variance} = inputs as FusedBatchNormInputs;\n    const {varianceEpsilon} = attrs as unknown as FusedBatchNormAttrs;\n    const webGPUBackend = backend as WebGPUBackend;\n    const batchNormInputs = [x as Tensor, mean as Tensor, variance as Tensor];\n    let offsetShape = null;\n    if (offset != null) {\n      offsetShape = offset.shape;\n      batchNormInputs.push(offset as Tensor);\n    }\n    let scaleShape = null;\n    if (scale != null) {\n      scaleShape = scale.shape;\n      batchNormInputs.push(scale as Tensor);\n    }\n    const program = new BatchNormProgram(\n        x.shape, mean.shape, variance.shape, offsetShape, scaleShape);\n    const uniformData = [{type: 'float32', data: [varianceEpsilon]}];\n    return webGPUBackend.runWebGPUProgram(\n        program, batchNormInputs, x.dtype, uniformData);\n  }\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,cAAc,QAAwE,uBAAuB;AAIrH,SAAQC,gBAAgB,QAAO,qBAAqB;AAEpD,OAAO,MAAMC,oBAAoB,GAAiB;EAChDC,UAAU,EAAEH,cAAc;EAC1BI,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAEA,CAAC;IAACC,MAAM;IAAEC,KAAK;IAAEC;EAAO,CAAC,KAAI;IACvC,MAAM;MAACC,CAAC;MAAEC,KAAK;MAAEC,MAAM;MAAEC,IAAI;MAAEC;IAAQ,CAAC,GAAGP,MAA8B;IACzE,MAAM;MAACQ;IAAe,CAAC,GAAGP,KAAuC;IACjE,MAAMQ,aAAa,GAAGP,OAAwB;IAC9C,MAAMQ,eAAe,GAAG,CAACP,CAAW,EAAEG,IAAc,EAAEC,QAAkB,CAAC;IACzE,IAAII,WAAW,GAAG,IAAI;IACtB,IAAIN,MAAM,IAAI,IAAI,EAAE;MAClBM,WAAW,GAAGN,MAAM,CAACO,KAAK;MAC1BF,eAAe,CAACG,IAAI,CAACR,MAAgB,CAAC;;IAExC,IAAIS,UAAU,GAAG,IAAI;IACrB,IAAIV,KAAK,IAAI,IAAI,EAAE;MACjBU,UAAU,GAAGV,KAAK,CAACQ,KAAK;MACxBF,eAAe,CAACG,IAAI,CAACT,KAAe,CAAC;;IAEvC,MAAMW,OAAO,GAAG,IAAIpB,gBAAgB,CAChCQ,CAAC,CAACS,KAAK,EAAEN,IAAI,CAACM,KAAK,EAAEL,QAAQ,CAACK,KAAK,EAAED,WAAW,EAAEG,UAAU,CAAC;IACjE,MAAME,WAAW,GAAG,CAAC;MAACC,IAAI,EAAE,SAAS;MAAEC,IAAI,EAAE,CAACV,eAAe;IAAC,CAAC,CAAC;IAChE,OAAOC,aAAa,CAACU,gBAAgB,CACjCJ,OAAO,EAAEL,eAAe,EAAEP,CAAC,CAACiB,KAAK,EAAEJ,WAAW,CAAC;EACrD;CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}