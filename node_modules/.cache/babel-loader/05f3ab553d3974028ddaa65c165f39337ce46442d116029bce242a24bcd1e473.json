{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { PadV2, util } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nimport { PadProgram } from '../pad_webgpu';\nimport { fill } from './Fill';\nexport const padV2 = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    paddings,\n    constantValue\n  } = attrs;\n  if (paddings.every(p => util.arraysEqual(p, [0, 0]))) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n  if (util.sizeFromShape(x.shape) === 0) {\n    // Short-circuit the computation, since x doesn't have value, only\n    // the shape is used to compute output shape to pad.\n    const outputShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    return fill({\n      backend,\n      attrs: {\n        shape: outputShape,\n        value: constantValue,\n        dtype: x.dtype\n      }\n    });\n  }\n  const uniformData = [{\n    type: 'float32',\n    data: [constantValue]\n  }];\n  paddings.map(p => uniformData.push({\n    type: 'int32',\n    data: [p[0], p[1]]\n  }));\n  const program = new PadProgram(x.shape, paddings);\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n};\nexport const padV2Config = {\n  kernelName: PadV2,\n  backendName: 'webgpu',\n  kernelFunc: padV2\n};","map":{"version":3,"names":["PadV2","util","identity","PadProgram","fill","padV2","args","inputs","backend","attrs","x","paddings","constantValue","every","p","arraysEqual","sizeFromShape","shape","outputShape","map","i","value","dtype","uniformData","type","data","push","program","runWebGPUProgram","padV2Config","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/PadV2.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {identity} from './Identity';\nimport {PadProgram} from '../pad_webgpu';\nimport {fill} from './Fill';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs,\n            backend: WebGPUBackend,\n            attrs: PadV2Attrs}): TensorInfo => {\n      const {inputs, backend, attrs} = args;\n      const {x} = inputs;\n      const {paddings, constantValue} = attrs;\n      if (paddings.every(p => util.arraysEqual(p, [0, 0]))) {\n        return identity({inputs: {x}, backend});\n      }\n      if (util.sizeFromShape(x.shape) === 0) {\n        // Short-circuit the computation, since x doesn't have value, only\n        // the shape is used to compute output shape to pad.\n        const outputShape = paddings.map(\n            (p, i) =>\n                p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n        return fill({\n          backend,\n          attrs: {shape: outputShape, value: constantValue, dtype: x.dtype}\n        });\n      }\n      const uniformData = [{type: 'float32', data: [constantValue]}];\n      paddings.map(p => uniformData.push({type: 'int32', data: [p[0], p[1]]}));\n      const program = new PadProgram(x.shape, paddings);\n      return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n    };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgpu',\n  kernelFunc: padV2 as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,KAAK,EAAuCC,IAAI,QAAO,uBAAuB;AAGhH,SAAQC,QAAQ,QAAO,YAAY;AACnC,SAAQC,UAAU,QAAO,eAAe;AACxC,SAAQC,IAAI,QAAO,QAAQ;AAE3B,OAAO,MAAMC,KAAK,GACbC,IAEyB,IAAgB;EACxC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI,QAAQ;IAAEC;EAAa,CAAC,GAAGH,KAAK;EACvC,IAAIE,QAAQ,CAACE,KAAK,CAACC,CAAC,IAAIb,IAAI,CAACc,WAAW,CAACD,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;IACpD,OAAOZ,QAAQ,CAAC;MAACK,MAAM,EAAE;QAACG;MAAC,CAAC;MAAEF;IAAO,CAAC,CAAC;;EAEzC,IAAIP,IAAI,CAACe,aAAa,CAACN,CAAC,CAACO,KAAK,CAAC,KAAK,CAAC,EAAE;IACrC;IACA;IACA,MAAMC,WAAW,GAAGP,QAAQ,CAACQ,GAAG,CAC5B,CAACL,CAAC,EAAEM,CAAC,KACDN,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkBJ,CAAC,CAACO,KAAK,CAACG,CAAC,CAAC,GAAGN,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC;IAChE,OAAOV,IAAI,CAAC;MACVI,OAAO;MACPC,KAAK,EAAE;QAACQ,KAAK,EAAEC,WAAW;QAAEG,KAAK,EAAET,aAAa;QAAEU,KAAK,EAAEZ,CAAC,CAACY;MAAK;KACjE,CAAC;;EAEJ,MAAMC,WAAW,GAAG,CAAC;IAACC,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE,CAACb,aAAa;EAAC,CAAC,CAAC;EAC9DD,QAAQ,CAACQ,GAAG,CAACL,CAAC,IAAIS,WAAW,CAACG,IAAI,CAAC;IAACF,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACX,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC;EAAC,CAAC,CAAC,CAAC;EACxE,MAAMa,OAAO,GAAG,IAAIxB,UAAU,CAACO,CAAC,CAACO,KAAK,EAAEN,QAAQ,CAAC;EACjD,OAAOH,OAAO,CAACoB,gBAAgB,CAACD,OAAO,EAAE,CAACjB,CAAC,CAAC,EAAEA,CAAC,CAACY,KAAK,EAAEC,WAAW,CAAC;AACrE,CAAC;AAEL,OAAO,MAAMM,WAAW,GAAiB;EACvCC,UAAU,EAAE9B,KAAK;EACjB+B,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAE3B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}