{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class BatchNormProgram {\n  constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape) {\n    this.uniforms = 'varianceEpsilon : f32,';\n    // This is an experimental value.\n    this.workgroupSize = [128, 1, 1];\n    this.size = true;\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n    this.outputShape = xShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n    }\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n    }\n    this.offsetShape = offsetShape;\n    this.scaleShape = scaleShape;\n    this.shaderKey = 'batchNorm';\n  }\n  getUserCode() {\n    let offsetSnippet = '0.0';\n    if (this.offsetShape != null) {\n      offsetSnippet = 'getOffsetByOutputIndex(index)';\n    }\n    let scaleSnippet = '1.0';\n    if (this.scaleShape != null) {\n      scaleSnippet = 'getScaleByOutputIndex(index)';\n    }\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size)\n        {\n          let xValue = getXByOutputIndex(index);\n          let meanValue = getMeanByOutputIndex(index);\n          let varianValue = getVarianceByOutputIndex(index);\n          let offsetValue = ${offsetSnippet};\n          let scaleValue = ${scaleSnippet};\n          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));\n          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));\n        }\n      }\n  `;\n    return userCode;\n  }\n}","map":{"version":3,"names":["backend_util","getMainHeaderString","main","computeDispatch","flatDispatchLayout","BatchNormProgram","constructor","xShape","meanShape","varianceShape","offsetShape","scaleShape","uniforms","workgroupSize","size","variableNames","assertAndGetBroadcastShape","outputShape","dispatchLayout","dispatch","push","shaderKey","getUserCode","offsetSnippet","scaleSnippet","userCode"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/batchnorm_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class BatchNormProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y?: number[], z?: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[];\n  uniforms = 'varianceEpsilon : f32,';\n  // This is an experimental value.\n  workgroupSize: [number, number, number] = [128, 1, 1];\n  offsetShape: number[]|null;\n  scaleShape: number[]|null;\n  varianceEpsilon: number;\n  size = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n    this.outputShape = xShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n    }\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n    }\n    this.offsetShape = offsetShape;\n    this.scaleShape = scaleShape;\n    this.shaderKey = 'batchNorm';\n  }\n\n  getUserCode(): string {\n    let offsetSnippet = '0.0';\n    if (this.offsetShape != null) {\n      offsetSnippet = 'getOffsetByOutputIndex(index)';\n    }\n\n    let scaleSnippet = '1.0';\n    if (this.scaleShape != null) {\n      scaleSnippet = 'getScaleByOutputIndex(index)';\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size)\n        {\n          let xValue = getXByOutputIndex(index);\n          let meanValue = getMeanByOutputIndex(index);\n          let varianValue = getVarianceByOutputIndex(index);\n          let offsetValue = ${offsetSnippet};\n          let scaleValue = ${scaleSnippet};\n          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));\n          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));\n        }\n      }\n  `;\n    return userCode;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,QAAO,uBAAuB;AAClD,SAAQC,mBAAmB,IAAIC,IAAI,QAAsB,kBAAkB;AAC3E,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAEjE,OAAM,MAAOC,gBAAgB;EAc3BC,YACIC,MAAgB,EAAEC,SAAmB,EAAEC,aAAuB,EAC9DC,WAA0B,EAAEC,UAAyB;IAVzD,KAAAC,QAAQ,GAAG,wBAAwB;IACnC;IACA,KAAAC,aAAa,GAA6B,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;IAIrD,KAAAC,IAAI,GAAG,IAAI;IAKT,IAAI,CAACC,aAAa,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,UAAU,CAAC;IAC9Cf,YAAY,CAACgB,0BAA0B,CAACT,MAAM,EAAEC,SAAS,CAAC;IAC1DR,YAAY,CAACgB,0BAA0B,CAACT,MAAM,EAAEE,aAAa,CAAC;IAC9D,IAAI,CAACQ,WAAW,GAAGV,MAAM;IACzB,IAAI,CAACW,cAAc,GAAGd,kBAAkB,CAAC,IAAI,CAACa,WAAW,CAAC;IAC1D,IAAI,CAACE,QAAQ,GAAGhB,eAAe,CAC3B,IAAI,CAACe,cAAc,EAAE,IAAI,CAACD,WAAW,EAAE,IAAI,CAACJ,aAAa,CAAC;IAE9D,IAAIH,WAAW,IAAI,IAAI,EAAE;MACvBV,YAAY,CAACgB,0BAA0B,CAACT,MAAM,EAAEG,WAAW,CAAC;MAC5D,IAAI,CAACK,aAAa,CAACK,IAAI,CAAC,QAAQ,CAAC;;IAEnC,IAAIT,UAAU,IAAI,IAAI,EAAE;MACtBX,YAAY,CAACgB,0BAA0B,CAACT,MAAM,EAAEI,UAAU,CAAC;MAC3D,IAAI,CAACI,aAAa,CAACK,IAAI,CAAC,OAAO,CAAC;;IAElC,IAAI,CAACV,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACU,SAAS,GAAG,WAAW;EAC9B;EAEAC,WAAWA,CAAA;IACT,IAAIC,aAAa,GAAG,KAAK;IACzB,IAAI,IAAI,CAACb,WAAW,IAAI,IAAI,EAAE;MAC5Ba,aAAa,GAAG,+BAA+B;;IAGjD,IAAIC,YAAY,GAAG,KAAK;IACxB,IAAI,IAAI,CAACb,UAAU,IAAI,IAAI,EAAE;MAC3Ba,YAAY,GAAG,8BAA8B;;IAG/C,MAAMC,QAAQ,GAAG;QACbvB,IAAI,CAAC,OAAO,CAAC;;;;;;8BAMSqB,aAAa;6BACdC,YAAY;;;;;GAKtC;IACC,OAAOC,QAAQ;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}