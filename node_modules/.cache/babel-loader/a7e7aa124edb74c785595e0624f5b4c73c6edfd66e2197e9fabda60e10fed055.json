{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPoolGrad, backend_util } from '@tensorflow/tfjs-core';\nimport { AvgPool2DBackpropProgram } from '../avg_pool_backprop_webgpu';\nimport { assertNotComplex } from '../webgpu_util';\nexport function avgPoolGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {\n    filterSize,\n    strides,\n    pad\n  } = attrs;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad);\n  const program = new AvgPool2DBackpropProgram(convInfo);\n  const avgMultiplier = 1 / (convInfo.filterHeight * convInfo.filterWidth);\n  const uniformData = [{\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top, convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.dilationHeight, convInfo.dilationWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.outWidth]\n  }, {\n    type: 'float32',\n    data: [avgMultiplier]\n  }];\n  return backend.runWebGPUProgram(program, [dy], x.dtype, uniformData);\n}\nexport const avgPoolGradConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgpu',\n  kernelFunc: avgPoolGrad\n};","map":{"version":3,"names":["AvgPoolGrad","backend_util","AvgPool2DBackpropProgram","assertNotComplex","avgPoolGrad","args","inputs","backend","attrs","dy","input","x","filterSize","strides","pad","convInfo","computePool2DInfo","shape","program","avgMultiplier","filterHeight","filterWidth","uniformData","type","data","strideHeight","strideWidth","effectiveFilterHeight","padInfo","top","effectiveFilterWidth","left","dilationHeight","dilationWidth","outHeight","outWidth","runWebGPUProgram","dtype","avgPoolGradConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/AvgPoolGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool2DBackpropProgram} from '../avg_pool_backprop_webgpu';\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {assertNotComplex} from '../webgpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: WebGPUBackend,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const program = new AvgPool2DBackpropProgram(convInfo);\n  const avgMultiplier = 1 / (convInfo.filterHeight * convInfo.filterWidth);\n  const uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top,\n        convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]}, {\n      type: 'int32',\n      data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n    },\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'float32', data: [avgMultiplier]}\n  ];\n  return backend.runWebGPUProgram(program, [dy], x.dtype, uniformData);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgpu',\n  kernelFunc: avgPoolGrad as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,WAAW,EAAuCC,YAAY,QAA6C,uBAAuB;AAE1I,SAAQC,wBAAwB,QAAO,6BAA6B;AAEpE,SAAQC,gBAAgB,QAAO,gBAAgB;AAE/C,OAAM,SAAUC,WAAWA,CAACC,IAI3B;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,EAAE;IAAEC;EAAK,CAAC,GAAGJ,MAAM;EAC1B,MAAMK,CAAC,GAAGD,KAAK;EACfP,gBAAgB,CAAC,CAACM,EAAE,EAAEC,KAAK,CAAC,EAAE,aAAa,CAAC;EAC5C,MAAM;IAACE,UAAU;IAAEC,OAAO;IAAEC;EAAG,CAAC,GAAGN,KAAK;EAExC,MAAMO,QAAQ,GAAGd,YAAY,CAACe,iBAAiB,CAC3CL,CAAC,CAACM,KAAyC,EAAEL,UAAU,EAAEC,OAAO,EAChE,CAAC,CAAC,iBAAiBC,GAAG,CAAC;EAC3B,MAAMI,OAAO,GAAG,IAAIhB,wBAAwB,CAACa,QAAQ,CAAC;EACtD,MAAMI,aAAa,GAAG,CAAC,IAAIJ,QAAQ,CAACK,YAAY,GAAGL,QAAQ,CAACM,WAAW,CAAC;EACxE,MAAMC,WAAW,GAAG,CAClB;IAACC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACT,QAAQ,CAACU,YAAY,EAAEV,QAAQ,CAACW,WAAW;EAAC,CAAC,EAAE;IACpEH,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,CACJT,QAAQ,CAACY,qBAAqB,GAAG,CAAC,GAAGZ,QAAQ,CAACa,OAAO,CAACC,GAAG,EACzDd,QAAQ,CAACe,oBAAoB,GAAG,CAAC,GAAGf,QAAQ,CAACa,OAAO,CAACG,IAAI;GAE5D,EACD;IAACR,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACT,QAAQ,CAACiB,cAAc,EAAEjB,QAAQ,CAACkB,aAAa;EAAC,CAAC,EAAE;IACxEV,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,CAACT,QAAQ,CAACY,qBAAqB,EAAEZ,QAAQ,CAACe,oBAAoB;GACrE,EACD;IAACP,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACT,QAAQ,CAACmB,SAAS;EAAC,CAAC,EAC3C;IAACX,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACT,QAAQ,CAACoB,QAAQ;EAAC,CAAC,EAC1C;IAACZ,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE,CAACL,aAAa;EAAC,CAAC,CACzC;EACD,OAAOZ,OAAO,CAAC6B,gBAAgB,CAAClB,OAAO,EAAE,CAACT,EAAE,CAAC,EAAEE,CAAC,CAAC0B,KAAK,EAAEf,WAAW,CAAC;AACtE;AAEA,OAAO,MAAMgB,iBAAiB,GAAiB;EAC7CC,UAAU,EAAEvC,WAAW;EACvBwC,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAErC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}