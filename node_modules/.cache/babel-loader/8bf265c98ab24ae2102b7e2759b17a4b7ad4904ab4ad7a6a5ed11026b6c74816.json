{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Bincount, util } from '@tensorflow/tfjs-core';\nimport { BincountProgram } from '../bincount_webgpu';\nimport { fill } from './Fill';\nexport function bincount(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    weights\n  } = inputs;\n  const {\n    size\n  } = attrs;\n  const xSize = util.sizeFromShape(x.shape);\n  const weightsSize = util.sizeFromShape(weights.shape);\n  const hasWeights = weightsSize > 0;\n  const outputSize = [size];\n  const dtype = weights.dtype;\n  const output = fill({\n    backend,\n    attrs: {\n      shape: outputSize,\n      value: 0,\n      dtype\n    }\n  });\n  const program = new BincountProgram([xSize], hasWeights);\n  const uniformData = [{\n    type: 'int32',\n    data: [size]\n  }];\n  const bincountInputs = hasWeights ? [x, weights] : [x];\n  const res = backend.runWebGPUProgram(program, bincountInputs, dtype, uniformData, output);\n  return res;\n}\nexport const bincountConfig = {\n  kernelName: Bincount,\n  backendName: 'webgpu',\n  kernelFunc: bincount\n};","map":{"version":3,"names":["Bincount","util","BincountProgram","fill","bincount","args","inputs","backend","attrs","x","weights","size","xSize","sizeFromShape","shape","weightsSize","hasWeights","outputSize","dtype","output","value","program","uniformData","type","data","bincountInputs","res","runWebGPUProgram","bincountConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/Bincount.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BincountProgram} from '../bincount_webgpu';\n\nimport {fill} from './Fill';\n\nexport function bincount(\n    args:\n        {inputs: BincountInputs, backend: WebGPUBackend, attrs: BincountAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const weightsSize = util.sizeFromShape(weights.shape);\n  const hasWeights = weightsSize > 0;\n  const outputSize: [number] = [size];\n  const dtype = weights.dtype;\n\n  const output = fill({backend, attrs: {shape: outputSize, value: 0, dtype}});\n  const program = new BincountProgram([xSize], hasWeights);\n  const uniformData = [{type: 'int32', data: [size]}];\n  const bincountInputs: TensorInfo[] = hasWeights ? [x, weights] : [x];\n  const res = backend.runWebGPUProgram(\n      program, bincountInputs, dtype, uniformData, output);\n\n  return res;\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'webgpu',\n  kernelFunc: bincount as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,QAAQ,EAAuEC,IAAI,QAAO,uBAAuB;AAGzH,SAAQC,eAAe,QAAO,oBAAoB;AAElD,SAAQC,IAAI,QAAO,QAAQ;AAE3B,OAAM,SAAUC,QAAQA,CACpBC,IAC0E;EAE5E,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,CAAC;IAAEC;EAAO,CAAC,GAAGJ,MAAM;EAC3B,MAAM;IAACK;EAAI,CAAC,GAAGH,KAAK;EAEpB,MAAMI,KAAK,GAAGX,IAAI,CAACY,aAAa,CAACJ,CAAC,CAACK,KAAK,CAAC;EACzC,MAAMC,WAAW,GAAGd,IAAI,CAACY,aAAa,CAACH,OAAO,CAACI,KAAK,CAAC;EACrD,MAAME,UAAU,GAAGD,WAAW,GAAG,CAAC;EAClC,MAAME,UAAU,GAAa,CAACN,IAAI,CAAC;EACnC,MAAMO,KAAK,GAAGR,OAAO,CAACQ,KAAK;EAE3B,MAAMC,MAAM,GAAGhB,IAAI,CAAC;IAACI,OAAO;IAAEC,KAAK,EAAE;MAACM,KAAK,EAAEG,UAAU;MAAEG,KAAK,EAAE,CAAC;MAAEF;IAAK;EAAC,CAAC,CAAC;EAC3E,MAAMG,OAAO,GAAG,IAAInB,eAAe,CAAC,CAACU,KAAK,CAAC,EAAEI,UAAU,CAAC;EACxD,MAAMM,WAAW,GAAG,CAAC;IAACC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACb,IAAI;EAAC,CAAC,CAAC;EACnD,MAAMc,cAAc,GAAiBT,UAAU,GAAG,CAACP,CAAC,EAAEC,OAAO,CAAC,GAAG,CAACD,CAAC,CAAC;EACpE,MAAMiB,GAAG,GAAGnB,OAAO,CAACoB,gBAAgB,CAChCN,OAAO,EAAEI,cAAc,EAAEP,KAAK,EAAEI,WAAW,EAAEH,MAAM,CAAC;EAExD,OAAOO,GAAG;AACZ;AAEA,OAAO,MAAME,cAAc,GAAiB;EAC1CC,UAAU,EAAE7B,QAAQ;EACpB8B,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAE3B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}