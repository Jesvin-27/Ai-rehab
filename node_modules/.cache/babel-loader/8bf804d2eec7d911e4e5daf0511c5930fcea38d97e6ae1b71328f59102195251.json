{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, TensorScatterUpdate, util } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_webgpu';\nimport { reshape } from './Reshape';\nimport { tile } from './Tile';\nexport function tensorScatterUpdate(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    tensor,\n    indices,\n    updates\n  } = inputs;\n  const {} = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(updates, indices, tensor.shape);\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(tensor.shape, indices.dtype);\n  }\n  const toDispose = [];\n  const flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceRank]\n    }\n  });\n  toDispose.push(flattenIndices);\n  const flattenX = reshape({\n    inputs: {\n      x: updates\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceSize]\n    }\n  });\n  toDispose.push(flattenX);\n  const flattenTensor = reshape({\n    inputs: {\n      x: tensor\n    },\n    backend,\n    attrs: {\n      shape: flattenShape\n    }\n  });\n  toDispose.push(flattenTensor);\n  const output = tile({\n    inputs: {\n      x: flattenTensor\n    },\n    backend,\n    attrs: {\n      reps: Array(flattenShape.length).fill(1)\n    }\n  });\n  const program = new ScatterProgram([numUpdates, sliceSize], sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape, tensor.dtype, false);\n  const size = util.sizeFromShape([numUpdates, sliceSize]);\n  const uniformData = [{\n    type: 'int32',\n    data: [sliceRank]\n  }, {\n    type: 'int32',\n    data: strides\n  }, {\n    type: 'int32',\n    data: [size]\n  }];\n  const res = backend.runWebGPUProgram(program, [flattenX, flattenIndices], flattenTensor.dtype, uniformData, output);\n  toDispose.push(res);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: tensor.shape\n    }\n  });\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return reshaped;\n}\nexport const tensorScatterUpdateConfig = {\n  kernelName: TensorScatterUpdate,\n  backendName: 'webgpu',\n  kernelFunc: tensorScatterUpdate\n};","map":{"version":3,"names":["backend_util","TensorScatterUpdate","util","ScatterProgram","reshape","tile","tensorScatterUpdate","args","inputs","backend","attrs","tensor","indices","updates","sliceRank","numUpdates","sliceSize","strides","outputSize","calculateShapes","shape","flattenShape","makeTensorInfo","dtype","toDispose","flattenIndices","x","push","flattenX","flattenTensor","output","reps","Array","length","fill","program","size","sizeFromShape","uniformData","type","data","res","runWebGPUProgram","reshaped","forEach","t","disposeData","dataId","tensorScatterUpdateConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/TensorScatterUpdate.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, TensorInfo, TensorScatterUpdate, TensorScatterUpdateAttrs, TensorScatterUpdateInputs, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ScatterProgram} from '../scatter_webgpu';\n\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\n\nexport function tensorScatterUpdate(args: {\n  inputs: TensorScatterUpdateInputs,\n  backend: WebGPUBackend,\n  attrs: TensorScatterUpdateAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {tensor, indices, updates} = inputs;\n  const {} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, tensor.shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(tensor.shape, indices.dtype);\n  }\n\n  const toDispose = [];\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  toDispose.push(flattenIndices);\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n  toDispose.push(flattenX);\n  const flattenTensor =\n      reshape({inputs: {x: tensor}, backend, attrs: {shape: flattenShape}});\n  toDispose.push(flattenTensor);\n  const output = tile({\n    inputs: {x: flattenTensor},\n    backend,\n    attrs: {reps: Array(flattenShape.length).fill(1)}\n  });\n  const program = new ScatterProgram(\n      [numUpdates, sliceSize], sliceRank, flattenIndices.shape.length,\n      flattenX.shape.length, strides, flattenShape, tensor.dtype, false);\n  const size = util.sizeFromShape([numUpdates, sliceSize]);\n  const uniformData = [\n    {type: 'int32', data: [sliceRank]},\n    {type: 'int32', data: strides},\n    {type: 'int32', data: [size]},\n  ];\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndices], flattenTensor.dtype, uniformData,\n      output);\n  toDispose.push(res);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: tensor.shape}});\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n\n  return reshaped;\n}\n\nexport const tensorScatterUpdateConfig: KernelConfig = {\n  kernelName: TensorScatterUpdate,\n  backendName: 'webgpu',\n  kernelFunc: tensorScatterUpdate as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}