{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OnesLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { zerosLike } from './ZerosLike';\nexport function onesLike(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const r = onesLike({\n      inputs: {\n        x: realPart\n      },\n      backend\n    });\n    const imagPart = imag({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const i = zerosLike({\n      inputs: {\n        x: imagPart\n      },\n      backend\n    });\n    const result = complex({\n      inputs: {\n        real: r,\n        imag: i\n      },\n      backend\n    });\n    backend.disposeData(realPart.dataId);\n    backend.disposeData(r.dataId);\n    backend.disposeData(imagPart.dataId);\n    backend.disposeData(i.dataId);\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: 1\n      },\n      backend\n    });\n  }\n}\nexport const onesLikeConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgpu',\n  kernelFunc: onesLike\n};","map":{"version":3,"names":["OnesLike","complex","fill","imag","real","zerosLike","onesLike","args","inputs","backend","x","dtype","Error","realPart","input","r","imagPart","i","result","disposeData","dataId","attrs","shape","value","onesLikeConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/OnesLike.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeData(realPart.dataId);\n    backend.disposeData(r.dataId);\n    backend.disposeData(imagPart.dataId);\n    backend.disposeData(i.dataId);\n\n    return result;\n  } else {\n    return fill({attrs: {shape: x.shape, dtype: x.dtype, value: 1}, backend});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgpu',\n  kernelFunc: onesLike as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,QAAQ,QAAmC,uBAAuB;AAIpG,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,IAAI,QAAO,QAAQ;AAC3B,SAAQC,IAAI,QAAO,QAAQ;AAC3B,SAAQC,IAAI,QAAO,QAAQ;AAC3B,SAAQC,SAAS,QAAO,aAAa;AAErC,OAAM,SAAUC,QAAQA,CACpBC,IAAsD;EACxD,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAC9B,MAAM;IAACG;EAAC,CAAC,GAAGF,MAAM;EAElB,IAAIE,CAAC,CAACC,KAAK,KAAK,QAAQ,EAAE;IACxB,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;GAChE,MAAM,IAAIF,CAAC,CAACC,KAAK,KAAK,WAAW,EAAE;IAClC,MAAME,QAAQ,GAAGT,IAAI,CAAC;MAACI,MAAM,EAAE;QAACM,KAAK,EAAEJ;MAAC,CAAC;MAAED;IAAO,CAAC,CAAC;IACpD,MAAMM,CAAC,GAAGT,QAAQ,CAAC;MAACE,MAAM,EAAE;QAACE,CAAC,EAAEG;MAAQ,CAAC;MAAEJ;IAAO,CAAC,CAAC;IACpD,MAAMO,QAAQ,GAAGb,IAAI,CAAC;MAACK,MAAM,EAAE;QAACM,KAAK,EAAEJ;MAAC,CAAC;MAAED;IAAO,CAAC,CAAC;IACpD,MAAMQ,CAAC,GAAGZ,SAAS,CAAC;MAACG,MAAM,EAAE;QAACE,CAAC,EAAEM;MAAQ,CAAC;MAAEP;IAAO,CAAC,CAAC;IAErD,MAAMS,MAAM,GAAGjB,OAAO,CAAC;MAACO,MAAM,EAAE;QAACJ,IAAI,EAAEW,CAAC;QAAEZ,IAAI,EAAEc;MAAC,CAAC;MAAER;IAAO,CAAC,CAAC;IAE7DA,OAAO,CAACU,WAAW,CAACN,QAAQ,CAACO,MAAM,CAAC;IACpCX,OAAO,CAACU,WAAW,CAACJ,CAAC,CAACK,MAAM,CAAC;IAC7BX,OAAO,CAACU,WAAW,CAACH,QAAQ,CAACI,MAAM,CAAC;IACpCX,OAAO,CAACU,WAAW,CAACF,CAAC,CAACG,MAAM,CAAC;IAE7B,OAAOF,MAAM;GACd,MAAM;IACL,OAAOhB,IAAI,CAAC;MAACmB,KAAK,EAAE;QAACC,KAAK,EAAEZ,CAAC,CAACY,KAAK;QAAEX,KAAK,EAAED,CAAC,CAACC,KAAK;QAAEY,KAAK,EAAE;MAAC,CAAC;MAAEd;IAAO,CAAC,CAAC;;AAE7E;AAEA,OAAO,MAAMe,cAAc,GAAiB;EAC1CC,UAAU,EAAEzB,QAAQ;EACpB0B,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAErB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}