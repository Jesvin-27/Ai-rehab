{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMin, backend_util, util } from '@tensorflow/tfjs-core';\nimport { ArgMinMaxProgram } from '../argminmax_webgpu';\nimport { transpose } from './Transpose';\nexport function argMin(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis\n  } = attrs;\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n  const program = new ArgMinMaxProgram($x.shape, axes[0], 'min');\n  const uniformData = [{\n    type: 'float32',\n    data: [Number.POSITIVE_INFINITY]\n  }];\n  const out = backend.runWebGPUProgram(program, [$x], 'int32', uniformData);\n  intermediateTensorInfos.forEach(t => backend.disposeData(t.dataId));\n  return out;\n}\nexport const argMinConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgpu',\n  kernelFunc: argMin\n};","map":{"version":3,"names":["ArgMin","backend_util","util","ArgMinMaxProgram","transpose","argMin","args","inputs","backend","attrs","x","axis","axes","parseAxisParam","shape","permutedAxes","getAxesPermutation","length","$x","intermediateTensorInfos","perm","push","getInnerMostAxes","assertAxesAreInnerMostDims","program","uniformData","type","data","Number","POSITIVE_INFINITY","out","runWebGPUProgram","forEach","t","disposeData","dataId","argMinConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/ArgMin.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_webgpu';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: WebGPUBackend, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n  const program = new ArgMinMaxProgram($x.shape, axes[0], 'min');\n  const uniformData = [{type: 'float32', data: [Number.POSITIVE_INFINITY]}];\n  const out = backend.runWebGPUProgram(program, [$x], 'int32', uniformData);\n  intermediateTensorInfos.forEach(t => backend.disposeData(t.dataId));\n  return out;\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgpu',\n  kernelFunc: argMin as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,EAA6BC,YAAY,EAAwCC,IAAI,QAAO,uBAAuB;AAEjI,SAAQC,gBAAgB,QAAO,qBAAqB;AAGpD,SAAQC,SAAS,QAAO,aAAa;AAErC,OAAM,SAAUC,MAAMA,CAClBC,IAAwE;EAE1E,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI;EAAI,CAAC,GAAGF,KAAK;EAEpB,IAAIG,IAAI,GAAGV,IAAI,CAACW,cAAc,CAACF,IAAI,EAAED,CAAC,CAACI,KAAK,CAAC;EAC7C,MAAMC,YAAY,GAAGd,YAAY,CAACe,kBAAkB,CAACJ,IAAI,EAAEF,CAAC,CAACI,KAAK,CAACG,MAAM,CAAC;EAC1E,IAAIC,EAAE,GAAGR,CAAC;EACV,MAAMS,uBAAuB,GAAG,EAAE;EAClC,IAAIJ,YAAY,IAAI,IAAI,EAAE;IACxBG,EAAE,GAAGd,SAAS,CAAC;MAACG,MAAM,EAAE;QAACG;MAAC,CAAC;MAAEF,OAAO;MAAEC,KAAK,EAAE;QAACW,IAAI,EAAEL;MAAY;IAAC,CAAC,CAAC;IACnEI,uBAAuB,CAACE,IAAI,CAACH,EAAE,CAAC;IAChCN,IAAI,GAAGX,YAAY,CAACqB,gBAAgB,CAACV,IAAI,CAACK,MAAM,EAAEC,EAAE,CAACJ,KAAK,CAACG,MAAM,CAAC;;EAGpEhB,YAAY,CAACsB,0BAA0B,CAAC,QAAQ,EAAE,CAACX,IAAI,CAAC,CAAC,CAAC,CAAC,EAAEM,EAAE,CAACJ,KAAK,CAACG,MAAM,CAAC;EAC7E,MAAMO,OAAO,GAAG,IAAIrB,gBAAgB,CAACe,EAAE,CAACJ,KAAK,EAAEF,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;EAC9D,MAAMa,WAAW,GAAG,CAAC;IAACC,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE,CAACC,MAAM,CAACC,iBAAiB;EAAC,CAAC,CAAC;EACzE,MAAMC,GAAG,GAAGtB,OAAO,CAACuB,gBAAgB,CAACP,OAAO,EAAE,CAACN,EAAE,CAAC,EAAE,OAAO,EAAEO,WAAW,CAAC;EACzEN,uBAAuB,CAACa,OAAO,CAACC,CAAC,IAAIzB,OAAO,CAAC0B,WAAW,CAACD,CAAC,CAACE,MAAM,CAAC,CAAC;EACnE,OAAOL,GAAG;AACZ;AAEA,OAAO,MAAMM,YAAY,GAAiB;EACxCC,UAAU,EAAErC,MAAM;EAClBsC,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAElC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}