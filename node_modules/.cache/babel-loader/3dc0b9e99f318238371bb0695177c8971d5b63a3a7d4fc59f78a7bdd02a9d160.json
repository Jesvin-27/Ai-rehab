{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeBilinear } from '@tensorflow/tfjs-core';\nimport { ResizeBilinearProgram } from '../resize_bilinear_webgpu';\nexport function resizeBilinear(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    images\n  } = inputs;\n  const {\n    alignCorners,\n    size,\n    halfPixelCenters\n  } = attrs;\n  const [newHeight, newWidth] = size;\n  const adjustHeight = alignCorners && newHeight > 1 ? 1.0 : 0.0;\n  const adjustWidth = alignCorners && newWidth > 1 ? 1.0 : 0.0;\n  const halfPixelCentersValue = halfPixelCenters ? 0.5 : 0.0;\n  const uniformData = [{\n    type: 'float32',\n    data: [adjustHeight, adjustWidth]\n  }, {\n    type: 'float32',\n    data: [halfPixelCentersValue]\n  }];\n  const program = new ResizeBilinearProgram(images.shape, newHeight, newWidth);\n  return backend.runWebGPUProgram(program, [images], 'float32', uniformData);\n}\nexport const resizeBilinearConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgpu',\n  kernelFunc: resizeBilinear\n};","map":{"version":3,"names":["ResizeBilinear","ResizeBilinearProgram","resizeBilinear","args","inputs","backend","attrs","images","alignCorners","size","halfPixelCenters","newHeight","newWidth","adjustHeight","adjustWidth","halfPixelCentersValue","uniformData","type","data","program","shape","runWebGPUProgram","resizeBilinearConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/ResizeBilinear.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ResizeBilinearProgram} from '../resize_bilinear_webgpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: WebGPUBackend,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, size, halfPixelCenters} = attrs;\n\n  const [newHeight, newWidth] = size;\n  const adjustHeight = alignCorners && newHeight > 1 ? 1.0 : 0.0;\n  const adjustWidth = alignCorners && newWidth > 1 ? 1.0 : 0.0;\n  const halfPixelCentersValue = halfPixelCenters ? 0.5 : 0.0;\n  const uniformData = [\n    {type: 'float32', data: [adjustHeight, adjustWidth]},\n    {type: 'float32', data: [halfPixelCentersValue]}\n  ];\n\n  const program = new ResizeBilinearProgram(\n      images.shape as [number, number, number, number], newHeight, newWidth);\n\n  return backend.runWebGPUProgram(program, [images], 'float32', uniformData);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgpu',\n  kernelFunc: resizeBilinear as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,cAAc,QAA8D,uBAAuB;AAGrI,SAAQC,qBAAqB,QAAO,2BAA2B;AAE/D,OAAM,SAAUC,cAAcA,CAACC,IAI9B;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAM,CAAC,GAAGH,MAAM;EACvB,MAAM;IAACI,YAAY;IAAEC,IAAI;IAAEC;EAAgB,CAAC,GAAGJ,KAAK;EAEpD,MAAM,CAACK,SAAS,EAAEC,QAAQ,CAAC,GAAGH,IAAI;EAClC,MAAMI,YAAY,GAAGL,YAAY,IAAIG,SAAS,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG;EAC9D,MAAMG,WAAW,GAAGN,YAAY,IAAII,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG;EAC5D,MAAMG,qBAAqB,GAAGL,gBAAgB,GAAG,GAAG,GAAG,GAAG;EAC1D,MAAMM,WAAW,GAAG,CAClB;IAACC,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE,CAACL,YAAY,EAAEC,WAAW;EAAC,CAAC,EACpD;IAACG,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE,CAACH,qBAAqB;EAAC,CAAC,CACjD;EAED,MAAMI,OAAO,GAAG,IAAIlB,qBAAqB,CACrCM,MAAM,CAACa,KAAyC,EAAET,SAAS,EAAEC,QAAQ,CAAC;EAE1E,OAAOP,OAAO,CAACgB,gBAAgB,CAACF,OAAO,EAAE,CAACZ,MAAM,CAAC,EAAE,SAAS,EAAES,WAAW,CAAC;AAC5E;AAEA,OAAO,MAAMM,oBAAoB,GAAiB;EAChDC,UAAU,EAAEvB,cAAc;EAC1BwB,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAEvB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}