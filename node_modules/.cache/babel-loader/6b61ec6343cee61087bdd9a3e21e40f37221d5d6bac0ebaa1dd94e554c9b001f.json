{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class SearchSortedProgram {\n  constructor(outputShape, side) {\n    this.outputShape = [];\n    this.variableNames = ['sortedSequence', 'values'];\n    this.uniforms = 'numInputs : i32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.side = side;\n    this.shaderKey = `search_sorted_${side}`;\n  }\n  getUserCode() {\n    const boundComparator = this.side === 'left' ? '<' : '<=';\n    const userCode = `\n      fn findBound(batch: i32, value: f32) -> i32 {\n        var left = i32(0);\n        var right = uniforms.numInputs;\n        while (left < right) {\n          var mid = (left + right) / 2;\n          if (getSortedSequence(batch, mid) ${boundComparator} value) {\n            left = mid + 1;\n          } else {\n            right = mid;\n          }\n        }\n        return right;\n      }\n\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let value = getValuesByOutputIndex(index);\n          setOutputAtIndexI32(index, findBound(coords[0], value));\n        }\n      }\n    `;\n    return userCode;\n  }\n}","map":{"version":3,"names":["getMainHeaderString","main","computeDispatch","flatDispatchLayout","SearchSortedProgram","constructor","outputShape","side","variableNames","uniforms","workgroupSize","size","dispatchLayout","dispatch","shaderKey","getUserCode","boundComparator","userCode"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/search_sorted_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SearchSortedProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['sortedSequence', 'values'];\n  uniforms = 'numInputs : i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  side: string;\n\n  constructor(outputShape: [number, number], side: 'left'|'right') {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.side = side;\n    this.shaderKey = `search_sorted_${side}`;\n  }\n\n  getUserCode(): string {\n    const boundComparator = this.side === 'left' ? '<' : '<=';\n    const userCode = `\n      fn findBound(batch: i32, value: f32) -> i32 {\n        var left = i32(0);\n        var right = uniforms.numInputs;\n        while (left < right) {\n          var mid = (left + right) / 2;\n          if (getSortedSequence(batch, mid) ${boundComparator} value) {\n            left = mid + 1;\n          } else {\n            right = mid;\n          }\n        }\n        return right;\n      }\n\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let value = getValuesByOutputIndex(index);\n          setOutputAtIndexI32(index, findBound(coords[0], value));\n        }\n      }\n    `;\n\n    return userCode;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,mBAAmB,IAAIC,IAAI,QAAsB,kBAAkB;AAC3E,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAEjE,OAAM,MAAOC,mBAAmB;EAW9BC,YAAYC,WAA6B,EAAEC,IAAoB;IAV/D,KAAAD,WAAW,GAAa,EAAE;IAI1B,KAAAE,aAAa,GAAG,CAAC,gBAAgB,EAAE,QAAQ,CAAC;IAC5C,KAAAC,QAAQ,GAAG,kBAAkB;IAC7B,KAAAC,aAAa,GAA6B,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IACpD,KAAAC,IAAI,GAAG,IAAI;IAIT,IAAI,CAACL,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACM,cAAc,GAAGT,kBAAkB,CAAC,IAAI,CAACG,WAAW,CAAC;IAC1D,IAAI,CAACO,QAAQ,GAAGX,eAAe,CAC3B,IAAI,CAACU,cAAc,EAAE,IAAI,CAACN,WAAW,EAAE,IAAI,CAACI,aAAa,CAAC;IAE9D,IAAI,CAACH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACO,SAAS,GAAG,iBAAiBP,IAAI,EAAE;EAC1C;EAEAQ,WAAWA,CAAA;IACT,MAAMC,eAAe,GAAG,IAAI,CAACT,IAAI,KAAK,MAAM,GAAG,GAAG,GAAG,IAAI;IACzD,MAAMU,QAAQ,GAAG;;;;;;8CAMyBD,eAAe;;;;;;;;;QASrDf,IAAI,CAAC,OAAO,CAAC;;;;;;;KAOhB;IAED,OAAOgB,QAAQ;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}