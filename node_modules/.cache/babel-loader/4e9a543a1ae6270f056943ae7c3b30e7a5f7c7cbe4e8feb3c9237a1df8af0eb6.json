{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { Pool2DProgram } from '../pool_webgpu';\nexport function maxPoolWithArgmax(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    filterSize,\n    strides,\n    pad,\n    includeBatchInIndex\n  } = attrs;\n  const {\n    x\n  } = inputs;\n  util.assert(x.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);\n  const dilations = [1, 1];\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad);\n  const uniformData = [{\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.dilationHeight, convInfo.dilationWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.inHeight, convInfo.inWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n  }];\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGPUProgram(program, [x], 'int32', uniformData);\n  return [poolOutput, indexOutput];\n}\nexport const maxPoolWithArgmaxConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgpu',\n  kernelFunc: maxPoolWithArgmax\n};","map":{"version":3,"names":["MaxPoolWithArgmax","backend_util","util","Pool2DProgram","maxPoolWithArgmax","args","inputs","backend","attrs","filterSize","strides","pad","includeBatchInIndex","x","assert","shape","length","dilations","eitherStridesOrDilationsAreOne","convInfo","computePool2DInfo","uniformData","type","data","strideHeight","strideWidth","padInfo","top","left","dilationHeight","dilationWidth","inHeight","inWidth","effectiveFilterHeight","effectiveFilterWidth","program","poolOutput","runWebGPUProgram","dtype","indexOutput","maxPoolWithArgmaxConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/MaxPoolWithArgmax.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Pool2DProgram} from '../pool_webgpu';\n\nexport function maxPoolWithArgmax(args: {\n  inputs: MaxPoolWithArgmaxInputs,\n  attrs: MaxPoolWithArgmaxAttrs,\n  backend: WebGPUBackend\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {filterSize, strides, pad, includeBatchInIndex} = attrs;\n  const {x} = inputs;\n\n  util.assert(\n      x.shape.length === 4,\n      () => `Error in maxPool: input must be rank 4 but got rank ${\n          x.shape.length}.`);\n  const dilations: [number, number] = [1, 1];\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad);\n\n  const uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]},\n    {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]}, {\n      type: 'int32',\n      data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n    }\n  ];\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput =\n      backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput =\n      backend.runWebGPUProgram(program, [x], 'int32', uniformData);\n  return [poolOutput, indexOutput];\n}\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgpu',\n  kernelFunc: maxPoolWithArgmax as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,iBAAiB,QAAwD,uBAAuB;AACxG,SAAQC,YAAY,EAAwCC,IAAI,QAAO,uBAAuB;AAG9F,SAAQC,aAAa,QAAO,gBAAgB;AAE5C,OAAM,SAAUC,iBAAiBA,CAACC,IAIjC;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,UAAU;IAAEC,OAAO;IAAEC,GAAG;IAAEC;EAAmB,CAAC,GAAGJ,KAAK;EAC7D,MAAM;IAACK;EAAC,CAAC,GAAGP,MAAM;EAElBJ,IAAI,CAACY,MAAM,CACPD,CAAC,CAACE,KAAK,CAACC,MAAM,KAAK,CAAC,EACpB,MAAM,uDACFH,CAAC,CAACE,KAAK,CAACC,MAAM,GAAG,CAAC;EAC1B,MAAMC,SAAS,GAAqB,CAAC,CAAC,EAAE,CAAC,CAAC;EAC1Cf,IAAI,CAACY,MAAM,CACPb,YAAY,CAACiB,8BAA8B,CAACR,OAAO,EAAEO,SAAS,CAAC,EAC/D,MAAM,2DAA2D,GAC7D,eAAeP,OAAO,mBAAmBO,SAAS,GAAG,CAAC;EAE9D,MAAME,QAAQ,GAAGlB,YAAY,CAACmB,iBAAiB,CAC3CP,CAAC,CAACE,KAAyC,EAAEN,UAAU,EAAEC,OAAO,EAChEO,SAAS,EAAEN,GAAG,CAAC;EAEnB,MAAMU,WAAW,GAAG,CAClB;IAACC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACJ,QAAQ,CAACK,YAAY,EAAEL,QAAQ,CAACM,WAAW;EAAC,CAAC,EACpE;IAACH,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACJ,QAAQ,CAACO,OAAO,CAACC,GAAG,EAAER,QAAQ,CAACO,OAAO,CAACE,IAAI;EAAC,CAAC,EACpE;IAACN,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACJ,QAAQ,CAACU,cAAc,EAAEV,QAAQ,CAACW,aAAa;EAAC,CAAC,EACxE;IAACR,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACJ,QAAQ,CAACY,QAAQ,EAAEZ,QAAQ,CAACa,OAAO;EAAC,CAAC,EAAE;IAC5DV,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,CAACJ,QAAQ,CAACc,qBAAqB,EAAEd,QAAQ,CAACe,oBAAoB;GACrE,CACF;EACD,IAAIC,OAAO,GAAG,IAAIhC,aAAa,CAACgB,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC;EACvD,MAAMiB,UAAU,GACZ7B,OAAO,CAAC8B,gBAAgB,CAACF,OAAO,EAAE,CAACtB,CAAC,CAAC,EAAEA,CAAC,CAACyB,KAAK,EAAEjB,WAAW,CAAC;EAEhEc,OAAO,GAAG,IAAIhC,aAAa,CAACgB,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAEP,mBAAmB,CAAC;EAC7E,MAAM2B,WAAW,GACbhC,OAAO,CAAC8B,gBAAgB,CAACF,OAAO,EAAE,CAACtB,CAAC,CAAC,EAAE,OAAO,EAAEQ,WAAW,CAAC;EAChE,OAAO,CAACe,UAAU,EAAEG,WAAW,CAAC;AAClC;AAEA,OAAO,MAAMC,uBAAuB,GAAiB;EACnDC,UAAU,EAAEzC,iBAAiB;EAC7B0C,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAEvC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}