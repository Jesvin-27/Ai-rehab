{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FFTProgram } from '../fft_webgpu';\nimport { complex } from './Complex';\nimport { reshape } from './Reshape';\nexport function fftImpl(x, inverse, backend) {\n  const xData = backend.tensorMap.get(x.dataId);\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n  const toDispose = [];\n  const input2D = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: [batch, innerDimensionSize]\n    }\n  });\n  toDispose.push(input2D);\n  const xShape = input2D.shape;\n  const realProgram = new FFTProgram('real', xShape);\n  const imagProgram = new FFTProgram('imag', xShape);\n  const inputs = [{\n    dataId: xData.complexTensorInfos.real.dataId,\n    dtype: xData.complexTensorInfos.real.dtype,\n    shape: xShape\n  }, {\n    dataId: xData.complexTensorInfos.imag.dataId,\n    dtype: xData.complexTensorInfos.imag.dtype,\n    shape: xShape\n  }];\n  const exponentMultiplier = inverse ? 2.0 * Math.PI : -2.0 * Math.PI;\n  const denominator = inverse ? xShape[1] : 1.0;\n  const uniformData = [{\n    type: 'float32',\n    data: [exponentMultiplier]\n  }, {\n    type: 'float32',\n    data: [denominator]\n  }];\n  const realPart = backend.runWebGPUProgram(realProgram, inputs, 'float32', uniformData);\n  toDispose.push(realPart);\n  const imagPart = backend.runWebGPUProgram(imagProgram, inputs, 'float32', uniformData);\n  toDispose.push(imagPart);\n  const complexOutput = complex({\n    inputs: {\n      real: realPart,\n      imag: imagPart\n    },\n    backend\n  });\n  toDispose.push(complexOutput);\n  const complexOutputReshaped = reshape({\n    inputs: {\n      x: complexOutput\n    },\n    backend,\n    attrs: {\n      shape: x.shape\n    }\n  });\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return complexOutputReshaped;\n}","map":{"version":3,"names":["util","FFTProgram","complex","reshape","fftImpl","x","inverse","backend","xData","tensorMap","get","dataId","inputSize","sizeFromShape","shape","innerDimensionSize","length","batch","toDispose","input2D","inputs","attrs","push","xShape","realProgram","imagProgram","complexTensorInfos","real","dtype","imag","exponentMultiplier","Math","PI","denominator","uniformData","type","data","realPart","runWebGPUProgram","imagPart","complexOutput","complexOutputReshaped","forEach","t","disposeData"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/FFT_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {FFTProgram} from '../fft_webgpu';\n\nimport {complex} from './Complex';\nimport {reshape} from './Reshape';\n\nexport function fftImpl(\n    x: TensorInfo, inverse: boolean, backend: WebGPUBackend): TensorInfo {\n  const xData = backend.tensorMap.get(x.dataId);\n\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const toDispose = [];\n  const input2D = reshape(\n      {inputs: {x}, backend, attrs: {shape: [batch, innerDimensionSize]}});\n  toDispose.push(input2D);\n\n  const xShape = input2D.shape as [number, number];\n  const realProgram = new FFTProgram('real', xShape);\n  const imagProgram = new FFTProgram('imag', xShape);\n\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n\n  const exponentMultiplier = inverse ? 2.0 * Math.PI : -2.0 * Math.PI;\n  const denominator = inverse ? xShape[1] : 1.0;\n  const uniformData = [\n    {type: 'float32', data: [exponentMultiplier]},\n    {type: 'float32', data: [denominator]}\n  ];\n\n  const realPart =\n      backend.runWebGPUProgram(realProgram, inputs, 'float32', uniformData);\n  toDispose.push(realPart);\n  const imagPart =\n      backend.runWebGPUProgram(imagProgram, inputs, 'float32', uniformData);\n  toDispose.push(imagPart);\n\n  const complexOutput =\n      complex({inputs: {real: realPart, imag: imagPart}, backend});\n  toDispose.push(complexOutput);\n\n  const complexOutputReshaped =\n      reshape({inputs: {x: complexOutput}, backend, attrs: {shape: x.shape}});\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n\n  return complexOutputReshaped;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}