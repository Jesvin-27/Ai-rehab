{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, GatherV2, util } from '@tensorflow/tfjs-core';\nimport { GatherProgram } from '../gather_webgpu';\nimport { gatherV2ImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    indices\n  } = inputs;\n  const {\n    axis,\n    batchDims\n  } = attrs;\n  // Unlike WebGL, WebGPU won't check if index is out of bound by calling\n  // backend.readSync() function in debug mode.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const toDispose = [];\n  const flattenX = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize, shapeInfo.sliceSize]\n    }\n  });\n  const flattenIndex = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]\n    }\n  });\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n  const flattenOutputShape = [shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize, shapeInfo.sliceSize];\n  if (backend.shouldExecuteOnCPU([x, indices])) {\n    const indicesTensorData = backend.tensorMap.get(flattenIndex.dataId);\n    const indicesValues = indicesTensorData.values;\n    const indicesBuffer = buffer(flattenIndex.shape, flattenIndex.dtype, indicesValues);\n    const flattenXTensorData = backend.tensorMap.get(flattenX.dataId);\n    const xValues = flattenXTensorData.values;\n    const xBuffer = buffer(flattenX.shape, flattenX.dtype, xValues);\n    const outBuf = gatherV2ImplCPU(xBuffer, indicesBuffer, flattenOutputShape);\n    toDispose.forEach(t => backend.disposeData(t.dataId));\n    return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n  }\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend.runWebGPUProgram(program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: shapeInfo.outputShape\n    }\n  });\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return reshaped;\n}\nexport const gatherV2Config = {\n  kernelName: GatherV2,\n  backendName: 'webgpu',\n  kernelFunc: gatherV2\n};","map":{"version":3,"names":["backend_util","buffer","GatherV2","util","GatherProgram","gatherV2ImplCPU","reshape","gatherV2","args","inputs","backend","attrs","x","indices","axis","batchDims","parsedAxis","parseAxisParam","shape","shapeInfo","segment_util","collectGatherOpShapeInfo","indicesSize","sizeFromShape","toDispose","flattenX","batchSize","outerSize","dimSize","sliceSize","flattenIndex","push","flattenOutputShape","shouldExecuteOnCPU","indicesTensorData","tensorMap","get","dataId","indicesValues","values","indicesBuffer","dtype","flattenXTensorData","xValues","xBuffer","outBuf","forEach","t","disposeData","makeTensorInfo","outputShape","program","res","runWebGPUProgram","reshaped","gatherV2Config","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/GatherV2.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, Rank, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {GatherProgram} from '../gather_webgpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(\n    args:\n        {inputs: GatherV2Inputs, backend: WebGPUBackend, attrs: GatherV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  // Unlike WebGL, WebGPU won't check if index is out of bound by calling\n  // backend.readSync() function in debug mode.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices])) {\n    const indicesTensorData = backend.tensorMap.get(flattenIndex.dataId);\n    const indicesValues = indicesTensorData.values as TypedArray;\n    const indicesBuffer =\n        buffer(flattenIndex.shape, flattenIndex.dtype, indicesValues) as\n        TensorBuffer<Rank>;\n    const flattenXTensorData = backend.tensorMap.get(flattenX.dataId);\n    const xValues = flattenXTensorData.values as TypedArray;\n    const xBuffer =\n        buffer(flattenX.shape, flattenX.dtype, xValues) as TensorBuffer<Rank>;\n    const outBuf = gatherV2ImplCPU(xBuffer, indicesBuffer, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeData(t.dataId));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgpu',\n  kernelFunc: gatherV2 as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}