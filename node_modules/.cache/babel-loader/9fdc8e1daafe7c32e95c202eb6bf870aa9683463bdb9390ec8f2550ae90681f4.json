{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose, util } from '@tensorflow/tfjs-core';\nimport { transposeImplCPU as cpuTranspose } from '../kernel_utils/shared';\nimport { TransposeSharedProgram } from '../transpose_shared_webgpu';\nimport { TransposeProgram } from '../transpose_webgpu';\nexport function transpose(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    perm\n  } = attrs;\n  const webgpuBackend = backend;\n  const xRank = x.shape.length;\n  const newShape = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = webgpuBackend.tensorMap.get(x.dataId);\n    const values = xData.values;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n  if (x.shape.length === 2 && util.arraysEqual(perm, [1, 0])) {\n    const program = new TransposeSharedProgram(x.shape, perm);\n    return webgpuBackend.runWebGPUProgram(program, [x], x.dtype);\n  }\n  const program = new TransposeProgram(x.shape, perm);\n  return webgpuBackend.runWebGPUProgram(program, [x], x.dtype);\n}\nexport const transposeConfig = {\n  kernelName: Transpose,\n  backendName: 'webgpu',\n  kernelFunc: transpose\n};","map":{"version":3,"names":["Transpose","util","transposeImplCPU","cpuTranspose","TransposeSharedProgram","TransposeProgram","transpose","args","inputs","backend","attrs","x","perm","webgpuBackend","xRank","shape","length","newShape","Array","i","shouldExecuteOnCPU","xData","tensorMap","get","dataId","values","outValues","dtype","makeTensorInfo","arraysEqual","program","runWebGPUProgram","transposeConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/Transpose.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Transpose, TransposeAttrs, TransposeInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {transposeImplCPU as cpuTranspose} from '../kernel_utils/shared';\n\nimport {TransposeSharedProgram} from '../transpose_shared_webgpu';\nimport {TransposeProgram} from '../transpose_webgpu';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webgpuBackend = backend;\n\n  const xRank = x.shape.length;\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = webgpuBackend.tensorMap.get(x.dataId);\n    const values = xData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n  if (x.shape.length === 2 && util.arraysEqual(perm, [1, 0])) {\n    const program = new TransposeSharedProgram(x.shape, perm);\n    return webgpuBackend.runWebGPUProgram(program, [x], x.dtype);\n  }\n  const program = new TransposeProgram(x.shape, perm);\n  return webgpuBackend.runWebGPUProgram(program, [x], x.dtype);\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgpu',\n  kernelFunc: transpose as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,SAAS,EAA+CC,IAAI,QAAO,uBAAuB;AAG5H,SAAQC,gBAAgB,IAAIC,YAAY,QAAO,wBAAwB;AAEvE,SAAQC,sBAAsB,QAAO,4BAA4B;AACjE,SAAQC,gBAAgB,QAAO,qBAAqB;AAEpD,OAAM,SAAUC,SAASA,CAACC,IAIzB;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI;EAAI,CAAC,GAAGF,KAAK;EACpB,MAAMG,aAAa,GAAGJ,OAAO;EAE7B,MAAMK,KAAK,GAAGH,CAAC,CAACI,KAAK,CAACC,MAAM;EAC5B,MAAMC,QAAQ,GAAa,IAAIC,KAAK,CAACJ,KAAK,CAAC;EAC3C,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,CAACD,MAAM,EAAEG,CAAC,EAAE,EAAE;IACxCF,QAAQ,CAACE,CAAC,CAAC,GAAGR,CAAC,CAACI,KAAK,CAACH,IAAI,CAACO,CAAC,CAAC,CAAC;;EAEhC,IAAIV,OAAO,CAACW,kBAAkB,CAAC,CAACT,CAAC,CAAC,CAAC,EAAE;IACnC,MAAMU,KAAK,GAAGR,aAAa,CAACS,SAAS,CAACC,GAAG,CAACZ,CAAC,CAACa,MAAM,CAAC;IACnD,MAAMC,MAAM,GAAGJ,KAAK,CAACI,MAAoB;IACzC,MAAMC,SAAS,GAAGvB,YAAY,CAACsB,MAAM,EAAEd,CAAC,CAACI,KAAK,EAAEJ,CAAC,CAACgB,KAAK,EAAEf,IAAI,EAAEK,QAAQ,CAAC;IACxE,OAAOR,OAAO,CAACmB,cAAc,CAACX,QAAQ,EAAEN,CAAC,CAACgB,KAAK,EAAED,SAAS,CAAC;;EAE7D,IAAIf,CAAC,CAACI,KAAK,CAACC,MAAM,KAAK,CAAC,IAAIf,IAAI,CAAC4B,WAAW,CAACjB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IAC1D,MAAMkB,OAAO,GAAG,IAAI1B,sBAAsB,CAACO,CAAC,CAACI,KAAK,EAAEH,IAAI,CAAC;IACzD,OAAOC,aAAa,CAACkB,gBAAgB,CAACD,OAAO,EAAE,CAACnB,CAAC,CAAC,EAAEA,CAAC,CAACgB,KAAK,CAAC;;EAE9D,MAAMG,OAAO,GAAG,IAAIzB,gBAAgB,CAACM,CAAC,CAACI,KAAK,EAAEH,IAAI,CAAC;EACnD,OAAOC,aAAa,CAACkB,gBAAgB,CAACD,OAAO,EAAE,CAACnB,CAAC,CAAC,EAAEA,CAAC,CAACgB,KAAK,CAAC;AAC9D;AAEA,OAAO,MAAMK,eAAe,GAAiB;EAC3CC,UAAU,EAAEjC,SAAS;EACrBkC,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAE7B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}