{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropFilter } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DDerFilterProgram } from '../conv_backprop_depthwise_webgpu';\nexport function depthwiseConv2dNativeBackpropFilter(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    dy\n  } = inputs;\n  const {\n    strides,\n    dilations,\n    pad,\n    dimRoundingMode,\n    filterShape\n  } = attrs;\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  const uniformData = [{\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.filterHeight, convInfo.filterWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.outWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.inHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.inWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.batchSize]\n  }, {\n    type: 'int32',\n    data: [convInfo.outChannels / convInfo.inChannels]\n  }];\n  return backend.runWebGPUProgram(program, [x, dy], 'float32', uniformData);\n}\nexport const depthwiseConv2dNativeBackpropFilterConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter\n};","map":{"version":3,"names":["backend_util","DepthwiseConv2dNativeBackpropFilter","DepthwiseConv2DDerFilterProgram","depthwiseConv2dNativeBackpropFilter","args","inputs","backend","attrs","x","dy","strides","dilations","pad","dimRoundingMode","filterShape","convInfo","computeConv2DInfo","shape","program","uniformData","type","data","strideHeight","strideWidth","padInfo","top","left","filterHeight","filterWidth","outHeight","outWidth","inHeight","inWidth","batchSize","outChannels","inChannels","runWebGPUProgram","depthwiseConv2dNativeBackpropFilterConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthwiseConv2DDerFilterProgram} from '../conv_backprop_depthwise_webgpu';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  const uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'int32', data: [convInfo.inHeight]},\n    {type: 'int32', data: [convInfo.inWidth]},\n    {type: 'int32', data: [convInfo.batchSize]},\n    {type: 'int32', data: [convInfo.outChannels / convInfo.inChannels]}\n  ];\n  return backend.runWebGPUProgram(program, [x, dy], 'float32', uniformData);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAEC,mCAAmC,QAAsH,uBAAuB;AAGtM,SAAQC,+BAA+B,QAAO,mCAAmC;AAEjF,OAAM,SAAUC,mCAAmCA,CAACC,IAInD;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,CAAC;IAAEC;EAAE,CAAC,GAAGJ,MAAM;EACtB,MAAM;IAACK,OAAO;IAAEC,SAAS;IAAEC,GAAG;IAAEC,eAAe;IAAEC;EAAW,CAAC,GAAGP,KAAK;EAErE,MAAMQ,QAAQ,GAAGf,YAAY,CAACgB,iBAAiB,CAC3CR,CAAC,CAACS,KAAyC,EAAEH,WAAW,EAAEJ,OAAO,EACjEC,SAAS,EAAEC,GAAG,EAAEC,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC;EAE1D,MAAMK,OAAO,GAAG,IAAIhB,+BAA+B,CAACa,QAAQ,CAAC;EAC7D,MAAMI,WAAW,GAAG,CAClB;IAACC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACN,QAAQ,CAACO,YAAY,EAAEP,QAAQ,CAACQ,WAAW;EAAC,CAAC,EACpE;IAACH,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACN,QAAQ,CAACS,OAAO,CAACC,GAAG,EAAEV,QAAQ,CAACS,OAAO,CAACE,IAAI;EAAC,CAAC,EACpE;IAACN,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACN,QAAQ,CAACY,YAAY,EAAEZ,QAAQ,CAACa,WAAW;EAAC,CAAC,EACpE;IAACR,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACN,QAAQ,CAACc,SAAS;EAAC,CAAC,EAC3C;IAACT,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACN,QAAQ,CAACe,QAAQ;EAAC,CAAC,EAC1C;IAACV,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACN,QAAQ,CAACgB,QAAQ;EAAC,CAAC,EAC1C;IAACX,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACN,QAAQ,CAACiB,OAAO;EAAC,CAAC,EACzC;IAACZ,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACN,QAAQ,CAACkB,SAAS;EAAC,CAAC,EAC3C;IAACb,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACN,QAAQ,CAACmB,WAAW,GAAGnB,QAAQ,CAACoB,UAAU;EAAC,CAAC,CACpE;EACD,OAAO7B,OAAO,CAAC8B,gBAAgB,CAAClB,OAAO,EAAE,CAACV,CAAC,EAAEC,EAAE,CAAC,EAAE,SAAS,EAAEU,WAAW,CAAC;AAC3E;AAEA,OAAO,MAAMkB,yCAAyC,GAAiB;EACrEC,UAAU,EAAErC,mCAAmC;EAC/CsC,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAErC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}