{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reverse, util } from '@tensorflow/tfjs-core';\nimport { ReverseProgram } from '../reverse_webgpu';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nexport function reverse(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dims\n  } = attrs;\n  const xRank = x.shape.length;\n  if (xRank === 0) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n  const xShape = x.shape;\n  const xShape4D = [1, 1, 1, 1];\n  xShape.forEach((d, i) => {\n    const index = i + 4 - xRank;\n    xShape4D[index] = d;\n  });\n  const axes = util.parseAxisParam(dims, x.shape);\n  const dims4D = [0, 0, 0, 0];\n  axes.forEach(ax => {\n    const index = ax + 4 - xRank;\n    dims4D[index] = 1;\n  });\n  const uniformData = [{\n    type: 'int32',\n    data: dims4D\n  }];\n  const xReshaped = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: xShape4D\n    }\n  });\n  const program = new ReverseProgram(xShape4D);\n  const values = backend.runWebGPUProgram(program, [xReshaped], xReshaped.dtype, uniformData);\n  backend.disposeData(xReshaped.dataId);\n  const result = reshape({\n    inputs: {\n      x: values\n    },\n    backend,\n    attrs: {\n      shape: xShape\n    }\n  });\n  backend.disposeData(values.dataId);\n  return result;\n}\nexport const reverseConfig = {\n  kernelName: Reverse,\n  backendName: 'webgpu',\n  kernelFunc: reverse\n};","map":{"version":3,"names":["Reverse","util","ReverseProgram","identity","reshape","reverse","args","inputs","backend","attrs","x","dims","xRank","shape","length","xShape","xShape4D","forEach","d","i","index","axes","parseAxisParam","dims4D","ax","uniformData","type","data","xReshaped","program","values","runWebGPUProgram","dtype","disposeData","dataId","result","reverseConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/Reverse.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ReverseProgram} from '../reverse_webgpu';\n\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\n\nexport function reverse(\n    args: {inputs: ReverseInputs, backend: WebGPUBackend, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const xRank = x.shape.length;\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const xShape = x.shape;\n  const xShape4D: [number, number, number, number] = [1, 1, 1, 1];\n  xShape.forEach((d, i) => {\n    const index = i + 4 - xRank;\n    xShape4D[index] = d;\n  });\n\n  const axes = util.parseAxisParam(dims, x.shape);\n  const dims4D: [number, number, number, number] = [0, 0, 0, 0];\n  axes.forEach(ax => {\n    const index = ax + 4 - xRank;\n    dims4D[index] = 1;\n  });\n  const uniformData = [{type: 'int32', data: dims4D}];\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: xShape4D}});\n\n  const program = new ReverseProgram(xShape4D);\n  const values = backend.runWebGPUProgram(\n      program, [xReshaped], xReshaped.dtype, uniformData);\n  backend.disposeData(xReshaped.dataId);\n\n  const result =\n      reshape({inputs: {x: values}, backend, attrs: {shape: xShape}});\n  backend.disposeData(values.dataId);\n\n  return result;\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'webgpu',\n  kernelFunc: reverse as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,OAAO,EAA2CC,IAAI,QAAO,uBAAuB;AAGtH,SAAQC,cAAc,QAAO,mBAAmB;AAEhD,SAAQC,QAAQ,QAAO,YAAY;AACnC,SAAQC,OAAO,QAAO,WAAW;AAEjC,OAAM,SAAUC,OAAOA,CACnBC,IAA0E;EAE5E,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI;EAAI,CAAC,GAAGF,KAAK;EAEpB,MAAMG,KAAK,GAAGF,CAAC,CAACG,KAAK,CAACC,MAAM;EAC5B,IAAIF,KAAK,KAAK,CAAC,EAAE;IACf,OAAOT,QAAQ,CAAC;MAACI,MAAM,EAAE;QAACG;MAAC,CAAC;MAAEF;IAAO,CAAC,CAAC;;EAGzC,MAAMO,MAAM,GAAGL,CAAC,CAACG,KAAK;EACtB,MAAMG,QAAQ,GAAqC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC/DD,MAAM,CAACE,OAAO,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;IACtB,MAAMC,KAAK,GAAGD,CAAC,GAAG,CAAC,GAAGP,KAAK;IAC3BI,QAAQ,CAACI,KAAK,CAAC,GAAGF,CAAC;EACrB,CAAC,CAAC;EAEF,MAAMG,IAAI,GAAGpB,IAAI,CAACqB,cAAc,CAACX,IAAI,EAAED,CAAC,CAACG,KAAK,CAAC;EAC/C,MAAMU,MAAM,GAAqC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC7DF,IAAI,CAACJ,OAAO,CAACO,EAAE,IAAG;IAChB,MAAMJ,KAAK,GAAGI,EAAE,GAAG,CAAC,GAAGZ,KAAK;IAC5BW,MAAM,CAACH,KAAK,CAAC,GAAG,CAAC;EACnB,CAAC,CAAC;EACF,MAAMK,WAAW,GAAG,CAAC;IAACC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAEJ;EAAM,CAAC,CAAC;EAEnD,MAAMK,SAAS,GAAGxB,OAAO,CAAC;IAACG,MAAM,EAAE;MAACG;IAAC,CAAC;IAAEF,OAAO;IAAEC,KAAK,EAAE;MAACI,KAAK,EAAEG;IAAQ;EAAC,CAAC,CAAC;EAE3E,MAAMa,OAAO,GAAG,IAAI3B,cAAc,CAACc,QAAQ,CAAC;EAC5C,MAAMc,MAAM,GAAGtB,OAAO,CAACuB,gBAAgB,CACnCF,OAAO,EAAE,CAACD,SAAS,CAAC,EAAEA,SAAS,CAACI,KAAK,EAAEP,WAAW,CAAC;EACvDjB,OAAO,CAACyB,WAAW,CAACL,SAAS,CAACM,MAAM,CAAC;EAErC,MAAMC,MAAM,GACR/B,OAAO,CAAC;IAACG,MAAM,EAAE;MAACG,CAAC,EAAEoB;IAAM,CAAC;IAAEtB,OAAO;IAAEC,KAAK,EAAE;MAACI,KAAK,EAAEE;IAAM;EAAC,CAAC,CAAC;EACnEP,OAAO,CAACyB,WAAW,CAACH,MAAM,CAACI,MAAM,CAAC;EAElC,OAAOC,MAAM;AACf;AAEA,OAAO,MAAMC,aAAa,GAAiB;EACzCC,UAAU,EAAErC,OAAO;EACnBsC,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAElC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}