{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense, util } from '@tensorflow/tfjs-core';\nimport { scatterImplCPU } from '../kernel_utils/shared';\nimport { ScatterProgram } from '../scatter_webgpu';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nimport { tile } from './Tile';\nexport function sparseToDense(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    sparseIndices,\n    sparseValues,\n    defaultValue\n  } = inputs;\n  const {\n    outputShape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(sparseIndices);\n    const updatesBuf = backend.bufferSync(sparseValues);\n    const $defaultValue = util.decodeString(backend.readSync(defaultValue.dataId)[0]);\n    const outBuf = scatterImplCPU(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n  const $sparseIndices = reshape({\n    inputs: {\n      x: sparseIndices\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceRank]\n    }\n  });\n  const $sparseValues = sparseValues.shape.length ? reshape({\n    inputs: {\n      x: sparseValues\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceSize]\n    }\n  }) : identity({\n    inputs: {\n      x: sparseValues\n    },\n    backend\n  });\n  const type = $sparseValues.dtype;\n  const zero = backend.makeTensorInfo([], type, util.makeZerosTypedArray(1, type));\n  // Fill output tensor with the default value.\n  const $defaultValue = reshape({\n    inputs: {\n      x: defaultValue\n    },\n    backend,\n    attrs: {\n      shape: Array(flattenShape.length).fill(1)\n    }\n  });\n  const $denseValues = tile({\n    inputs: {\n      x: $defaultValue\n    },\n    backend,\n    attrs: {\n      reps: flattenShape\n    }\n  });\n  const size = util.sizeFromShape([numUpdates, sliceSize]);\n  const uniformData = [{\n    type: 'int32',\n    data: [sliceRank]\n  }, {\n    type: 'int32',\n    data: strides\n  }, {\n    type: 'int32',\n    data: [size]\n  }];\n  switch (numUpdates) {\n    case 0:\n      break;\n    case 1:\n      if (true) {\n        const program = new ScatterProgram([numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length, $sparseValues.shape.length, strides, flattenShape, type, sumDupeIndices);\n        backend.runWebGPUProgram(program, [$sparseValues, $sparseIndices], type, uniformData, $denseValues);\n      }\n      break;\n    default:\n      if (true) {\n        // First replace the default value with 0 at indices.\n        const program = new ScatterProgram([numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length, zero.shape.length, strides, flattenShape, type, sumDupeIndices);\n        backend.runWebGPUProgram(program, [zero, $sparseIndices], type, uniformData, $denseValues);\n      }\n      {\n        // Then replace 0 with the (sum of) sparse value(s) at indices.\n        const program = new ScatterProgram([numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length, $sparseValues.shape.length, strides, flattenShape, type);\n        backend.runWebGPUProgram(program, [$sparseValues, $sparseIndices], type, uniformData, $denseValues);\n      }\n  }\n  const denseValues = reshape({\n    inputs: {\n      x: $denseValues\n    },\n    backend,\n    attrs: {\n      shape: outputShape\n    }\n  });\n  backend.disposeData($sparseIndices.dataId);\n  backend.disposeData($sparseValues.dataId);\n  backend.disposeData($defaultValue.dataId);\n  backend.disposeData(zero.dataId);\n  backend.disposeData($denseValues.dataId);\n  return denseValues;\n}\nexport const sparseToDenseConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgpu',\n  kernelFunc: sparseToDense\n};","map":{"version":3,"names":["backend_util","SparseToDense","util","scatterImplCPU","ScatterProgram","identity","reshape","tile","sparseToDense","args","inputs","backend","attrs","sparseIndices","sparseValues","defaultValue","outputShape","sliceRank","numUpdates","sliceSize","strides","outputSize","calculateShapes","sumDupeIndices","dtype","indicesBuf","bufferSync","updatesBuf","$defaultValue","decodeString","readSync","dataId","outBuf","makeTensorInfo","values","flattenShape","$sparseIndices","x","shape","$sparseValues","length","type","zero","makeZerosTypedArray","Array","fill","$denseValues","reps","size","sizeFromShape","uniformData","data","program","runWebGPUProgram","denseValues","disposeData","sparseToDenseConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/SparseToDense.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {scatterImplCPU} from '../kernel_utils/shared';\nimport {ScatterProgram} from '../scatter_webgpu';\n\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: WebGPUBackend,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n\n  const sumDupeIndices = false;\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n    const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n    const $defaultValue = util.decodeString(\n        backend.readSync(defaultValue.dataId)[0] as Uint8Array);\n    const outBuf = scatterImplCPU(\n        indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n        sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const $sparseIndices = reshape({\n    inputs: {x: sparseIndices},\n    backend,\n    attrs: {shape: [numUpdates, sliceRank]}\n  });\n  const $sparseValues = sparseValues.shape.length ?\n      reshape({\n        inputs: {x: sparseValues},\n        backend,\n        attrs: {shape: [numUpdates, sliceSize]}\n      }) :\n      identity({inputs: {x: sparseValues}, backend});\n\n  const type = $sparseValues.dtype;\n  const zero =\n      backend.makeTensorInfo([], type, util.makeZerosTypedArray(1, type));\n\n  // Fill output tensor with the default value.\n  const $defaultValue = reshape({\n    inputs: {x: defaultValue},\n    backend,\n    attrs: {shape: Array(flattenShape.length).fill(1)}\n  });\n  const $denseValues =\n      tile({inputs: {x: $defaultValue}, backend, attrs: {reps: flattenShape}});\n\n  const size = util.sizeFromShape([numUpdates, sliceSize]);\n  const uniformData = [\n    {type: 'int32', data: [sliceRank]},\n    {type: 'int32', data: strides},\n    {type: 'int32', data: [size]},\n  ];\n\n  switch (numUpdates) {\n    case 0:\n      break;\n    case 1:\n      if (true) {\n        const program = new ScatterProgram(\n            [numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length,\n            $sparseValues.shape.length, strides, flattenShape, type,\n            sumDupeIndices);\n        backend.runWebGPUProgram(\n            program, [$sparseValues, $sparseIndices], type, uniformData,\n            $denseValues);\n      }\n      break;\n    default:\n      if (true) {\n        // First replace the default value with 0 at indices.\n        const program = new ScatterProgram(\n            [numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length,\n            zero.shape.length, strides, flattenShape, type, sumDupeIndices);\n        backend.runWebGPUProgram(\n            program, [zero, $sparseIndices], type, uniformData, $denseValues);\n      }\n      {\n        // Then replace 0 with the (sum of) sparse value(s) at indices.\n        const program = new ScatterProgram(\n            [numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length,\n            $sparseValues.shape.length, strides, flattenShape, type);\n        backend.runWebGPUProgram(\n            program, [$sparseValues, $sparseIndices], type, uniformData,\n            $denseValues);\n      }\n  }\n\n  const denseValues = reshape(\n      {inputs: {x: $denseValues}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeData($sparseIndices.dataId);\n  backend.disposeData($sparseValues.dataId);\n  backend.disposeData($defaultValue.dataId);\n  backend.disposeData(zero.dataId);\n  backend.disposeData($denseValues.dataId);\n  return denseValues;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgpu',\n  kernelFunc: sparseToDense as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAkCC,aAAa,EAAuDC,IAAI,QAAO,uBAAuB;AAG5J,SAAQC,cAAc,QAAO,wBAAwB;AACrD,SAAQC,cAAc,QAAO,mBAAmB;AAEhD,SAAQC,QAAQ,QAAO,YAAY;AACnC,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,IAAI,QAAO,QAAQ;AAE3B,OAAM,SAAUC,aAAaA,CAACC,IAI7B;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,aAAa;IAAEC,YAAY;IAAEC;EAAY,CAAC,GAAGL,MAAM;EAC1D,MAAM;IAACM;EAAW,CAAC,GAAGJ,KAAK;EAE3B,MAAM;IAACK,SAAS;IAAEC,UAAU;IAAEC,SAAS;IAAEC,OAAO;IAAEC;EAAU,CAAC,GACzDrB,YAAY,CAACsB,eAAe,CAACR,YAAY,EAAED,aAAa,EAAEG,WAAW,CAAC;EAE1E,MAAMO,cAAc,GAAG,KAAK;EAC5B,IAAIT,YAAY,CAACU,KAAK,KAAK,QAAQ,EAAE;IACnC,MAAMC,UAAU,GAAGd,OAAO,CAACe,UAAU,CAAgBb,aAAa,CAAC;IACnE,MAAMc,UAAU,GAAGhB,OAAO,CAACe,UAAU,CAAiBZ,YAAY,CAAC;IACnE,MAAMc,aAAa,GAAG1B,IAAI,CAAC2B,YAAY,CACnClB,OAAO,CAACmB,QAAQ,CAACf,YAAY,CAACgB,MAAM,CAAC,CAAC,CAAC,CAAe,CAAC;IAC3D,MAAMC,MAAM,GAAG7B,cAAc,CACzBsB,UAAU,EAAEE,UAAU,EAAEX,WAAW,EAAEK,UAAU,EAAEF,SAAS,EAAED,UAAU,EACtED,SAAS,EAAEG,OAAO,EAAEQ,aAAa,EAAEL,cAAc,CAAC;IACtD,OAAOZ,OAAO,CAACsB,cAAc,CAACjB,WAAW,EAAEgB,MAAM,CAACR,KAAK,EAAEQ,MAAM,CAACE,MAAM,CAAC;;EAGzE,MAAMC,YAAY,GAAG,CAACd,UAAU,GAAGF,SAAS,EAAEA,SAAS,CAAC;EAExD,MAAMiB,cAAc,GAAG9B,OAAO,CAAC;IAC7BI,MAAM,EAAE;MAAC2B,CAAC,EAAExB;IAAa,CAAC;IAC1BF,OAAO;IACPC,KAAK,EAAE;MAAC0B,KAAK,EAAE,CAACpB,UAAU,EAAED,SAAS;IAAC;GACvC,CAAC;EACF,MAAMsB,aAAa,GAAGzB,YAAY,CAACwB,KAAK,CAACE,MAAM,GAC3ClC,OAAO,CAAC;IACNI,MAAM,EAAE;MAAC2B,CAAC,EAAEvB;IAAY,CAAC;IACzBH,OAAO;IACPC,KAAK,EAAE;MAAC0B,KAAK,EAAE,CAACpB,UAAU,EAAEC,SAAS;IAAC;GACvC,CAAC,GACFd,QAAQ,CAAC;IAACK,MAAM,EAAE;MAAC2B,CAAC,EAAEvB;IAAY,CAAC;IAAEH;EAAO,CAAC,CAAC;EAElD,MAAM8B,IAAI,GAAGF,aAAa,CAACf,KAAK;EAChC,MAAMkB,IAAI,GACN/B,OAAO,CAACsB,cAAc,CAAC,EAAE,EAAEQ,IAAI,EAAEvC,IAAI,CAACyC,mBAAmB,CAAC,CAAC,EAAEF,IAAI,CAAC,CAAC;EAEvE;EACA,MAAMb,aAAa,GAAGtB,OAAO,CAAC;IAC5BI,MAAM,EAAE;MAAC2B,CAAC,EAAEtB;IAAY,CAAC;IACzBJ,OAAO;IACPC,KAAK,EAAE;MAAC0B,KAAK,EAAEM,KAAK,CAACT,YAAY,CAACK,MAAM,CAAC,CAACK,IAAI,CAAC,CAAC;IAAC;GAClD,CAAC;EACF,MAAMC,YAAY,GACdvC,IAAI,CAAC;IAACG,MAAM,EAAE;MAAC2B,CAAC,EAAET;IAAa,CAAC;IAAEjB,OAAO;IAAEC,KAAK,EAAE;MAACmC,IAAI,EAAEZ;IAAY;EAAC,CAAC,CAAC;EAE5E,MAAMa,IAAI,GAAG9C,IAAI,CAAC+C,aAAa,CAAC,CAAC/B,UAAU,EAAEC,SAAS,CAAC,CAAC;EACxD,MAAM+B,WAAW,GAAG,CAClB;IAACT,IAAI,EAAE,OAAO;IAAEU,IAAI,EAAE,CAAClC,SAAS;EAAC,CAAC,EAClC;IAACwB,IAAI,EAAE,OAAO;IAAEU,IAAI,EAAE/B;EAAO,CAAC,EAC9B;IAACqB,IAAI,EAAE,OAAO;IAAEU,IAAI,EAAE,CAACH,IAAI;EAAC,CAAC,CAC9B;EAED,QAAQ9B,UAAU;IAChB,KAAK,CAAC;MACJ;IACF,KAAK,CAAC;MACJ,IAAI,IAAI,EAAE;QACR,MAAMkC,OAAO,GAAG,IAAIhD,cAAc,CAC9B,CAACc,UAAU,EAAEC,SAAS,CAAC,EAAEF,SAAS,EAAEmB,cAAc,CAACE,KAAK,CAACE,MAAM,EAC/DD,aAAa,CAACD,KAAK,CAACE,MAAM,EAAEpB,OAAO,EAAEe,YAAY,EAAEM,IAAI,EACvDlB,cAAc,CAAC;QACnBZ,OAAO,CAAC0C,gBAAgB,CACpBD,OAAO,EAAE,CAACb,aAAa,EAAEH,cAAc,CAAC,EAAEK,IAAI,EAAES,WAAW,EAC3DJ,YAAY,CAAC;;MAEnB;IACF;MACE,IAAI,IAAI,EAAE;QACR;QACA,MAAMM,OAAO,GAAG,IAAIhD,cAAc,CAC9B,CAACc,UAAU,EAAEC,SAAS,CAAC,EAAEF,SAAS,EAAEmB,cAAc,CAACE,KAAK,CAACE,MAAM,EAC/DE,IAAI,CAACJ,KAAK,CAACE,MAAM,EAAEpB,OAAO,EAAEe,YAAY,EAAEM,IAAI,EAAElB,cAAc,CAAC;QACnEZ,OAAO,CAAC0C,gBAAgB,CACpBD,OAAO,EAAE,CAACV,IAAI,EAAEN,cAAc,CAAC,EAAEK,IAAI,EAAES,WAAW,EAAEJ,YAAY,CAAC;;MAEvE;QACE;QACA,MAAMM,OAAO,GAAG,IAAIhD,cAAc,CAC9B,CAACc,UAAU,EAAEC,SAAS,CAAC,EAAEF,SAAS,EAAEmB,cAAc,CAACE,KAAK,CAACE,MAAM,EAC/DD,aAAa,CAACD,KAAK,CAACE,MAAM,EAAEpB,OAAO,EAAEe,YAAY,EAAEM,IAAI,CAAC;QAC5D9B,OAAO,CAAC0C,gBAAgB,CACpBD,OAAO,EAAE,CAACb,aAAa,EAAEH,cAAc,CAAC,EAAEK,IAAI,EAAES,WAAW,EAC3DJ,YAAY,CAAC;;;EAIvB,MAAMQ,WAAW,GAAGhD,OAAO,CACvB;IAACI,MAAM,EAAE;MAAC2B,CAAC,EAAES;IAAY,CAAC;IAAEnC,OAAO;IAAEC,KAAK,EAAE;MAAC0B,KAAK,EAAEtB;IAAW;EAAC,CAAC,CAAC;EAEtEL,OAAO,CAAC4C,WAAW,CAACnB,cAAc,CAACL,MAAM,CAAC;EAC1CpB,OAAO,CAAC4C,WAAW,CAAChB,aAAa,CAACR,MAAM,CAAC;EACzCpB,OAAO,CAAC4C,WAAW,CAAC3B,aAAa,CAACG,MAAM,CAAC;EACzCpB,OAAO,CAAC4C,WAAW,CAACb,IAAI,CAACX,MAAM,CAAC;EAChCpB,OAAO,CAAC4C,WAAW,CAACT,YAAY,CAACf,MAAM,CAAC;EACxC,OAAOuB,WAAW;AACpB;AAEA,OAAO,MAAME,mBAAmB,GAAiB;EAC/CC,UAAU,EAAExD,aAAa;EACzByD,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAEnD;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}