{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DenseBincount, util } from '@tensorflow/tfjs-core';\nimport { BincountProgram } from '../bincount_webgpu';\nimport { fill } from './Fill';\nexport function denseBincount(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    weights\n  } = inputs;\n  const {\n    size,\n    binaryOutput\n  } = attrs;\n  const xRankOne = x.shape.length === 1;\n  const weightsSize = util.sizeFromShape(weights.shape);\n  const hasWeights = weightsSize > 0;\n  const dtype = weights.dtype;\n  const xSize = xRankOne ? [x.shape[0]] : [x.shape[0], x.shape[1]];\n  const outputSize = xRankOne ? [size] : [x.shape[0], size];\n  const output = fill({\n    backend,\n    attrs: {\n      shape: outputSize,\n      value: 0,\n      dtype\n    }\n  });\n  const program = new BincountProgram(xSize, hasWeights, binaryOutput);\n  const uniformData = [{\n    type: 'int32',\n    data: [size]\n  }];\n  const bincountInputs = hasWeights ? [x, weights] : [x];\n  const res = backend.runWebGPUProgram(program, bincountInputs, dtype, uniformData, output);\n  return res;\n}\nexport const denseBincountConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgpu',\n  kernelFunc: denseBincount\n};","map":{"version":3,"names":["DenseBincount","util","BincountProgram","fill","denseBincount","args","inputs","backend","attrs","x","weights","size","binaryOutput","xRankOne","shape","length","weightsSize","sizeFromShape","hasWeights","dtype","xSize","outputSize","output","value","program","uniformData","type","data","bincountInputs","res","runWebGPUProgram","denseBincountConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/DenseBincount.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BincountProgram} from '../bincount_webgpu';\n\nimport {fill} from './Fill';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: WebGPUBackend,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  const xRankOne = x.shape.length === 1;\n  const weightsSize = util.sizeFromShape(weights.shape);\n  const hasWeights = weightsSize > 0;\n  const dtype = weights.dtype;\n  const xSize: [number]|[number, number] =\n      xRankOne ? [x.shape[0]] : [x.shape[0], x.shape[1]];\n  const outputSize: [number]|[number, number] =\n      xRankOne ? [size] : [x.shape[0], size];\n\n  const output = fill({backend, attrs: {shape: outputSize, value: 0, dtype}});\n  const program = new BincountProgram(xSize, hasWeights, binaryOutput);\n  const uniformData = [{type: 'int32', data: [size]}];\n  const bincountInputs: TensorInfo[] = hasWeights ? [x, weights] : [x];\n  const res = backend.runWebGPUProgram(\n      program, bincountInputs, dtype, uniformData, output);\n\n  return res;\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgpu',\n  kernelFunc: denseBincount as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,aAAa,EAAiFC,IAAI,QAAO,uBAAuB;AAGxI,SAAQC,eAAe,QAAO,oBAAoB;AAElD,SAAQC,IAAI,QAAO,QAAQ;AAE3B,OAAM,SAAUC,aAAaA,CAACC,IAI7B;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,CAAC;IAAEC;EAAO,CAAC,GAAGJ,MAAM;EAC3B,MAAM;IAACK,IAAI;IAAEC;EAAY,CAAC,GAAGJ,KAAK;EAElC,MAAMK,QAAQ,GAAGJ,CAAC,CAACK,KAAK,CAACC,MAAM,KAAK,CAAC;EACrC,MAAMC,WAAW,GAAGf,IAAI,CAACgB,aAAa,CAACP,OAAO,CAACI,KAAK,CAAC;EACrD,MAAMI,UAAU,GAAGF,WAAW,GAAG,CAAC;EAClC,MAAMG,KAAK,GAAGT,OAAO,CAACS,KAAK;EAC3B,MAAMC,KAAK,GACPP,QAAQ,GAAG,CAACJ,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAACL,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC,EAAEL,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC;EACtD,MAAMO,UAAU,GACZR,QAAQ,GAAG,CAACF,IAAI,CAAC,GAAG,CAACF,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC,EAAEH,IAAI,CAAC;EAE1C,MAAMW,MAAM,GAAGnB,IAAI,CAAC;IAACI,OAAO;IAAEC,KAAK,EAAE;MAACM,KAAK,EAAEO,UAAU;MAAEE,KAAK,EAAE,CAAC;MAAEJ;IAAK;EAAC,CAAC,CAAC;EAC3E,MAAMK,OAAO,GAAG,IAAItB,eAAe,CAACkB,KAAK,EAAEF,UAAU,EAAEN,YAAY,CAAC;EACpE,MAAMa,WAAW,GAAG,CAAC;IAACC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAAChB,IAAI;EAAC,CAAC,CAAC;EACnD,MAAMiB,cAAc,GAAiBV,UAAU,GAAG,CAACT,CAAC,EAAEC,OAAO,CAAC,GAAG,CAACD,CAAC,CAAC;EACpE,MAAMoB,GAAG,GAAGtB,OAAO,CAACuB,gBAAgB,CAChCN,OAAO,EAAEI,cAAc,EAAET,KAAK,EAAEM,WAAW,EAAEH,MAAM,CAAC;EAExD,OAAOO,GAAG;AACZ;AAEA,OAAO,MAAME,mBAAmB,GAAiB;EAC/CC,UAAU,EAAEhC,aAAa;EACzBiC,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAE9B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}