{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use backend file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Draw } from '@tensorflow/tfjs-core';\nimport { DrawProgram } from '../draw_webgpu';\nexport function draw(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    image\n  } = inputs;\n  const {\n    canvas,\n    options\n  } = attrs;\n  const [height, width] = image.shape.slice(0, 2);\n  const {\n    imageOptions\n  } = options || {};\n  const alpha = (imageOptions === null || imageOptions === void 0 ? void 0 : imageOptions.alpha) || 1;\n  //  'rgba8unorm' should work on macOS according to\n  //  https://bugs.chromium.org/p/chromium/issues/detail?id=1298618. But\n  //  failed on macOS/M2. So use 'bgra8unorm' first when available.\n  const format = backend.device.features.has('bgra8unorm-storage') ? 'bgra8unorm' : 'rgba8unorm';\n  const outShape = [height, width];\n  const program = new DrawProgram(outShape, image.dtype, format);\n  canvas.width = width;\n  canvas.height = height;\n  const backendName = 'webgpu';\n  let gpuContext = canvas.getContext(backendName);\n  let canvasWebGPU;\n  if (!gpuContext) {\n    canvasWebGPU = new OffscreenCanvas(width, height);\n    gpuContext = canvasWebGPU.getContext(backendName);\n  }\n  const numChannels = image.shape.length === 3 ? image.shape[2] : 1;\n  gpuContext.configure({\n    device: backend.device,\n    format,\n    usage: GPUTextureUsage.STORAGE_BINDING,\n    alphaMode: 'premultiplied'\n  });\n  const outputDtype = 'int32';\n  const output = backend.makeTensorInfo(outShape, outputDtype);\n  const info = backend.tensorMap.get(output.dataId);\n  info.resource = gpuContext.getCurrentTexture();\n  info.external = true;\n  const uniformData = [{\n    type: 'uint32',\n    data: [numChannels]\n  }, {\n    type: 'float32',\n    data: [alpha]\n  }];\n  backend.runWebGPUProgram(program, [image], outputDtype, uniformData, output);\n  if (canvasWebGPU) {\n    const canvas2dContext = canvas.getContext('2d');\n    if (!canvas2dContext) {\n      throw new Error(`Please make sure this canvas has only been used for 2d or webgpu context!`);\n    }\n    canvas2dContext.drawImage(canvasWebGPU, 0, 0);\n  }\n  backend.disposeData(output.dataId);\n  return image;\n}\nexport const drawConfig = {\n  kernelName: Draw,\n  backendName: 'webgpu',\n  kernelFunc: draw\n};","map":{"version":3,"names":["Draw","DrawProgram","draw","args","inputs","backend","attrs","image","canvas","options","height","width","shape","slice","imageOptions","alpha","format","device","features","has","outShape","program","dtype","backendName","gpuContext","getContext","canvasWebGPU","OffscreenCanvas","numChannels","length","configure","usage","GPUTextureUsage","STORAGE_BINDING","alphaMode","outputDtype","output","makeTensorInfo","info","tensorMap","get","dataId","resource","getCurrentTexture","external","uniformData","type","data","runWebGPUProgram","canvas2dContext","Error","drawImage","disposeData","drawConfig","kernelName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/Draw.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use backend file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {Draw, DrawAttrs, DrawInputs,} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DrawProgram} from '../draw_webgpu';\n\nexport function draw(\n    args: {inputs: DrawInputs, backend: WebGPUBackend, attrs: DrawAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image} = inputs;\n  const {canvas, options} = attrs;\n  const [height, width] = image.shape.slice(0, 2);\n  const {imageOptions} = options || {};\n  const alpha = imageOptions ?.alpha || 1;\n\n  //  'rgba8unorm' should work on macOS according to\n  //  https://bugs.chromium.org/p/chromium/issues/detail?id=1298618. But\n  //  failed on macOS/M2. So use 'bgra8unorm' first when available.\n  const format = backend.device.features.has('bgra8unorm-storage') ?\n      'bgra8unorm' :\n      'rgba8unorm';\n  const outShape = [height, width];\n  const program = new DrawProgram(outShape, image.dtype, format);\n  canvas.width = width;\n  canvas.height = height;\n  const backendName = 'webgpu';\n  let gpuContext = canvas.getContext(backendName);\n  let canvasWebGPU;\n  if (!gpuContext) {\n    canvasWebGPU = new OffscreenCanvas(width, height);\n    gpuContext = canvasWebGPU.getContext(backendName);\n  }\n  const numChannels = image.shape.length === 3 ? image.shape[2] : 1;\n  gpuContext.configure({\n    device: backend.device,\n    format,\n    usage: GPUTextureUsage.STORAGE_BINDING,\n    alphaMode: 'premultiplied'\n  });\n\n  const outputDtype = 'int32';\n  const output = backend.makeTensorInfo(outShape, outputDtype);\n  const info = backend.tensorMap.get(output.dataId);\n  info.resource = gpuContext.getCurrentTexture();\n  info.external = true;\n\n  const uniformData =\n      [{type: 'uint32', data: [numChannels]}, {type: 'float32', data: [alpha]}];\n  backend.runWebGPUProgram(program, [image], outputDtype, uniformData, output);\n\n  if (canvasWebGPU) {\n    const canvas2dContext = canvas.getContext('2d');\n    if (!canvas2dContext) {\n      throw new Error(\n          `Please make sure this canvas has only been used for 2d or webgpu context!`);\n    }\n    canvas2dContext.drawImage(canvasWebGPU, 0, 0);\n  }\n  backend.disposeData(output.dataId);\n  return image;\n}\n\nexport const drawConfig: KernelConfig = {\n  kernelName: Draw,\n  backendName: 'webgpu',\n  kernelFunc: draw as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}