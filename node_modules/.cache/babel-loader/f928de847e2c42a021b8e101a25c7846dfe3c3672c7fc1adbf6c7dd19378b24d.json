{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3D, upcastType } from '@tensorflow/tfjs-core';\nimport { Conv3DNaiveProgram } from '../conv3d_naive_webgpu';\nexport function conv3D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations\n  } = attrs;\n  const convInfo = backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);\n  const padInfo = [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left];\n  const dimensions = [{\n    type: 'int32',\n    data: [convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth]\n  }, {\n    type: 'int32',\n    data: [...padInfo]\n  }, {\n    type: 'int32',\n    data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth]\n  }];\n  const program = new Conv3DNaiveProgram(convInfo);\n  const dtype = upcastType(x.dtype, filter.dtype);\n  return backend.runWebGPUProgram(program, [x, filter], dtype, dimensions);\n}\nexport const conv3DConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgpu',\n  kernelFunc: conv3D\n};","map":{"version":3,"names":["backend_util","Conv3D","upcastType","Conv3DNaiveProgram","conv3D","args","inputs","backend","attrs","x","filter","strides","pad","dilations","convInfo","computeConv3DInfo","shape","padInfo","front","top","left","dimensions","type","data","filterDepth","filterHeight","filterWidth","strideDepth","strideHeight","strideWidth","dilationDepth","dilationHeight","dilationWidth","program","dtype","runWebGPUProgram","conv3DConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/Conv3D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, upcastType} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv3DNaiveProgram} from '../conv3d_naive_webgpu';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, attrs: Conv3DAttrs, backend: WebGPUBackend}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const padInfo =\n      [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left];\n  const dimensions = [\n    {\n      type: 'int32',\n      data: [convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth]\n    },\n    {type: 'int32', data: [...padInfo]}, {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth\n      ]\n    }\n  ];\n  const program = new Conv3DNaiveProgram(convInfo);\n  const dtype = upcastType(x.dtype, filter.dtype);\n  return backend.runWebGPUProgram(program, [x, filter], dtype, dimensions);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgpu',\n  kernelFunc: conv3D as {} as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAEC,MAAM,EAAuDC,UAAU,QAAO,uBAAuB;AAG3H,SAAQC,kBAAkB,QAAO,wBAAwB;AAEzD,OAAM,SAAUC,MAAMA,CAClBC,IAAwE;EAC1E,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,CAAC;IAAEC;EAAM,CAAC,GAAGJ,MAAM;EAC1B,MAAM;IAACK,OAAO;IAAEC,GAAG;IAAEC;EAAS,CAAC,GAAGL,KAAK;EAEvC,MAAMM,QAAQ,GAAGd,YAAY,CAACe,iBAAiB,CAC3CN,CAAC,CAACO,KAAiD,EACnDN,MAAM,CAACM,KAAiD,EAAEL,OAAO,EACjEE,SAAS,EAAED,GAAG,CAAC;EAEnB,MAAMK,OAAO,GACT,CAACH,QAAQ,CAACG,OAAO,CAACC,KAAK,EAAEJ,QAAQ,CAACG,OAAO,CAACE,GAAG,EAAEL,QAAQ,CAACG,OAAO,CAACG,IAAI,CAAC;EACzE,MAAMC,UAAU,GAAG,CACjB;IACEC,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,CAACT,QAAQ,CAACU,WAAW,EAAEV,QAAQ,CAACW,YAAY,EAAEX,QAAQ,CAACY,WAAW;GACzE,EACD;IAACJ,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAAC,GAAGN,OAAO;EAAC,CAAC,EAAE;IACnCK,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,CAACT,QAAQ,CAACa,WAAW,EAAEb,QAAQ,CAACc,YAAY,EAAEd,QAAQ,CAACe,WAAW;GACzE,EACD;IACEP,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,CACJT,QAAQ,CAACgB,aAAa,EAAEhB,QAAQ,CAACiB,cAAc,EAAEjB,QAAQ,CAACkB,aAAa;GAE1E,CACF;EACD,MAAMC,OAAO,GAAG,IAAI9B,kBAAkB,CAACW,QAAQ,CAAC;EAChD,MAAMoB,KAAK,GAAGhC,UAAU,CAACO,CAAC,CAACyB,KAAK,EAAExB,MAAM,CAACwB,KAAK,CAAC;EAC/C,OAAO3B,OAAO,CAAC4B,gBAAgB,CAACF,OAAO,EAAE,CAACxB,CAAC,EAAEC,MAAM,CAAC,EAAEwB,KAAK,EAAEb,UAAU,CAAC;AAC1E;AAEA,OAAO,MAAMe,YAAY,GAAiB;EACxCC,UAAU,EAAEpC,MAAM;EAClBqC,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAEnC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}