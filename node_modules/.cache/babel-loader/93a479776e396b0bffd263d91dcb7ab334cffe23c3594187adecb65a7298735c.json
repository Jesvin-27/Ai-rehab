{"ast":null,"code":"// Add this at the top with other imports\nimport { processChairSquat, resetChairSquat } from '../exercises/ChairSquats';\n\n// Update the startScan function\nconst startScan = async () => {\n  try {\n    if (!selectedExercise) {\n      alert('Please select an exercise first');\n      return;\n    }\n    resetChairSquat();\n    setRepCount(0);\n    setFeedback('');\n    setIsScanning(true);\n\n    // Initialize detector first\n    const detector = await posedetection.createDetector(posedetection.SupportedModels.MoveNet, {\n      modelType: posedetection.movenet.modelType.SINGLEPOSE_LIGHTNING\n    });\n    detectorRef.current = detector;\n\n    // Then get camera stream\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: {\n        width: 640,\n        height: 480,\n        facingMode: 'user'\n      }\n    });\n    videoRef.current.srcObject = stream;\n    await videoRef.current.play();\n\n    // Start detection loop\n    runDetection();\n  } catch (error) {\n    console.error('Error starting scan:', error);\n    stopScan();\n    alert('Failed to start exercise tracking. Please try again.');\n  }\n};","map":{"version":3,"names":["processChairSquat","resetChairSquat","startScan","selectedExercise","alert","setRepCount","setFeedback","setIsScanning","detector","posedetection","createDetector","SupportedModels","MoveNet","modelType","movenet","SINGLEPOSE_LIGHTNING","detectorRef","current","stream","navigator","mediaDevices","getUserMedia","video","width","height","facingMode","videoRef","srcObject","play","runDetection","error","console","stopScan"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/Ai-rehab/src/pages/ExercisePage.js"],"sourcesContent":["// Add this at the top with other imports\nimport { processChairSquat, resetChairSquat } from '../exercises/ChairSquats';\n\n// Update the startScan function\nconst startScan = async () => {\n  try {\n    if (!selectedExercise) {\n      alert('Please select an exercise first');\n      return;\n    }\n\n    resetChairSquat();\n    setRepCount(0);\n    setFeedback('');\n    setIsScanning(true);\n\n    // Initialize detector first\n    const detector = await posedetection.createDetector(\n      posedetection.SupportedModels.MoveNet,\n      {\n        modelType: posedetection.movenet.modelType.SINGLEPOSE_LIGHTNING,\n      }\n    );\n    detectorRef.current = detector;\n\n    // Then get camera stream\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: { width: 640, height: 480, facingMode: 'user' }\n    });\n    videoRef.current.srcObject = stream;\n    await videoRef.current.play();\n\n    // Start detection loop\n    runDetection();\n  } catch (error) {\n    console.error('Error starting scan:', error);\n    stopScan();\n    alert('Failed to start exercise tracking. Please try again.');\n  }\n};"],"mappings":"AAAA;AACA,SAASA,iBAAiB,EAAEC,eAAe,QAAQ,0BAA0B;;AAE7E;AACA,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EAC5B,IAAI;IACF,IAAI,CAACC,gBAAgB,EAAE;MACrBC,KAAK,CAAC,iCAAiC,CAAC;MACxC;IACF;IAEAH,eAAe,CAAC,CAAC;IACjBI,WAAW,CAAC,CAAC,CAAC;IACdC,WAAW,CAAC,EAAE,CAAC;IACfC,aAAa,CAAC,IAAI,CAAC;;IAEnB;IACA,MAAMC,QAAQ,GAAG,MAAMC,aAAa,CAACC,cAAc,CACjDD,aAAa,CAACE,eAAe,CAACC,OAAO,EACrC;MACEC,SAAS,EAAEJ,aAAa,CAACK,OAAO,CAACD,SAAS,CAACE;IAC7C,CACF,CAAC;IACDC,WAAW,CAACC,OAAO,GAAGT,QAAQ;;IAE9B;IACA,MAAMU,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MACvDC,KAAK,EAAE;QAAEC,KAAK,EAAE,GAAG;QAAEC,MAAM,EAAE,GAAG;QAAEC,UAAU,EAAE;MAAO;IACvD,CAAC,CAAC;IACFC,QAAQ,CAACT,OAAO,CAACU,SAAS,GAAGT,MAAM;IACnC,MAAMQ,QAAQ,CAACT,OAAO,CAACW,IAAI,CAAC,CAAC;;IAE7B;IACAC,YAAY,CAAC,CAAC;EAChB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5CE,QAAQ,CAAC,CAAC;IACV5B,KAAK,CAAC,sDAAsD,CAAC;EAC/D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}