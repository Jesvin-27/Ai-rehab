{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { PoolWithFilterSizeEqualsOneProgram } from '../pool_filtersizeone_webgpu';\nimport { Pool2DProgram } from '../pool_webgpu';\nimport { identity } from './Identity';\nimport { max } from './Max';\nimport { mean } from './Mean';\nimport { reshape } from './Reshape';\nexport function poolImpl(x, convInfo, poolType, backend) {\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n  if (convInfo.filterWidth === convInfo.inWidth && convInfo.filterHeight === convInfo.inHeight && convInfo.batchSize === 1 && convInfo.padInfo.type === 'VALID') {\n    const length = x.shape.length;\n    const reshapeX = reshape({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        shape: [x.shape[length - 3] * x.shape[length - 2] /* height * width */, x.shape[length - 1] /* channel */]\n      }\n    });\n    let reduceX;\n    if (poolType === 'avg') {\n      reduceX = mean({\n        inputs: {\n          x: reshapeX\n        },\n        backend,\n        attrs: {\n          axis: 0,\n          keepDims: false\n        }\n      });\n    } else {\n      util.assert(poolType === 'max', () => `Invalid pool type ${poolType}`);\n      reduceX = max({\n        inputs: {\n          x: reshapeX\n        },\n        backend,\n        attrs: {\n          reductionIndices: 0,\n          keepDims: false\n        }\n      });\n    }\n    const result = reshape({\n      inputs: {\n        x: reduceX\n      },\n      backend,\n      attrs: {\n        shape: convInfo.outShape\n      }\n    });\n    backend.disposeData(reshapeX.dataId);\n    backend.disposeData(reduceX.dataId);\n    return result;\n  }\n  let program;\n  const dimensions = [{\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }];\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1) {\n    program = new PoolWithFilterSizeEqualsOneProgram(convInfo);\n  } else {\n    if (poolType === 'avg') {\n      program = new Pool2DProgram(convInfo, 'avg');\n    } else {\n      util.assert(poolType === 'max', () => `Invalid pool type ${poolType}`);\n      program = new Pool2DProgram(convInfo, 'max');\n    }\n    dimensions.push({\n      type: 'int32',\n      data: [convInfo.padInfo.top, convInfo.padInfo.left]\n    }, {\n      type: 'int32',\n      data: [convInfo.dilationHeight, convInfo.dilationWidth]\n    }, {\n      type: 'int32',\n      data: [convInfo.inHeight, convInfo.inWidth]\n    }, {\n      type: 'int32',\n      data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n    });\n  }\n  return backend.runWebGPUProgram(program, [x], x.dtype, dimensions);\n}","map":{"version":3,"names":["util","PoolWithFilterSizeEqualsOneProgram","Pool2DProgram","identity","max","mean","reshape","poolImpl","x","convInfo","poolType","backend","filterWidth","filterHeight","arraysEqual","inShape","outShape","inputs","inWidth","inHeight","batchSize","padInfo","type","length","shape","reshapeX","attrs","reduceX","axis","keepDims","assert","reductionIndices","result","disposeData","dataId","program","dimensions","data","strideHeight","strideWidth","push","top","left","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","runWebGPUProgram","dtype"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/Pool_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {PoolWithFilterSizeEqualsOneProgram} from '../pool_filtersizeone_webgpu';\nimport {Pool2DProgram} from '../pool_webgpu';\n\nimport {identity} from './Identity';\nimport {max} from './Max';\nimport {mean} from './Mean';\nimport {reshape} from './Reshape';\n\ntype PoolType = 'max'|'avg';\nexport function poolImpl(\n    x: TensorInfo, convInfo: backend_util.Conv2DInfo, poolType: PoolType,\n    backend: WebGPUBackend): TensorInfo {\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n\n  if (convInfo.filterWidth === convInfo.inWidth &&\n      convInfo.filterHeight === convInfo.inHeight && convInfo.batchSize === 1 &&\n      convInfo.padInfo.type === 'VALID') {\n    const length = x.shape.length;\n    const reshapeX = reshape({\n      inputs: {x},\n      backend,\n      attrs: {\n        shape: [\n          x.shape[length - 3] * x.shape[length - 2] /* height * width */,\n          x.shape[length - 1] /* channel */\n        ]\n      }\n    });\n    let reduceX;\n    if (poolType === 'avg') {\n      reduceX = mean(\n          {inputs: {x: reshapeX}, backend, attrs: {axis: 0, keepDims: false}});\n    } else {\n      util.assert(poolType === 'max', () => `Invalid pool type ${poolType}`);\n      reduceX = max({\n        inputs: {x: reshapeX},\n        backend,\n        attrs: {reductionIndices: 0, keepDims: false}\n      });\n    }\n\n    const result = reshape(\n        {inputs: {x: reduceX}, backend, attrs: {shape: convInfo.outShape}});\n    backend.disposeData(reshapeX.dataId);\n    backend.disposeData(reduceX.dataId);\n    return result;\n  }\n\n  let program: Pool2DProgram|PoolWithFilterSizeEqualsOneProgram;\n  const dimensions =\n      [{type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}];\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1) {\n    program = new PoolWithFilterSizeEqualsOneProgram(convInfo);\n  } else {\n    if (poolType === 'avg') {\n      program = new Pool2DProgram(convInfo, 'avg');\n    } else {\n      util.assert(poolType === 'max', () => `Invalid pool type ${poolType}`);\n      program = new Pool2DProgram(convInfo, 'max');\n    }\n\n    dimensions.push(\n        {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]}, {\n          type: 'int32',\n          data: [convInfo.dilationHeight, convInfo.dilationWidth]\n        },\n        {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]}, {\n          type: 'int32',\n          data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n        });\n  }\n\n  return backend.runWebGPUProgram(program, [x], x.dtype, dimensions);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}