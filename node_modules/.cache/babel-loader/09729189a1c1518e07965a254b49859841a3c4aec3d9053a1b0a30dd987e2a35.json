{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main, PixelsOpType } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class DrawProgram {\n  constructor(outShape, type, textureFormat) {\n    this.variableNames = ['Image'];\n    this.uniforms = 'alpha: f32,';\n    this.workgroupSize = [64, 1, 1];\n    this.pixelsOpType = PixelsOpType.DRAW;\n    this.size = true;\n    this.outputShape = outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.type = type;\n    this.textureFormat = textureFormat;\n    this.shaderKey = `draw_${type}_${textureFormat}`;\n  }\n  getUserCode() {\n    let calculateResult;\n    const value = this.type === 'float32' ? 'value' : 'value / 255.0';\n    calculateResult = `\n      if (uniforms.numChannels == 1) {\n        rgba[0] = ${value};\n        rgba[1] = ${value};\n        rgba[2] = ${value};\n      } else {\n        rgba[d] = ${value};\n      }`;\n    const userCode = `\n       @group(0) @binding(0) var outImage : texture_storage_2d<${this.textureFormat}, write>;\n       ${main('index')} {\n         if (index < uniforms.size) {\n           var rgba = vec4<f32>(0.0, 0.0, 0.0, uniforms.alpha);\n           for (var d = 0; d < uniforms.numChannels; d = d + 1) {\n             let value = f32(inBuf[index * uniforms.numChannels + d]);\n             ${calculateResult}\n           }\n           rgba.x = rgba.x * rgba.w;\n           rgba.y = rgba.y * rgba.w;\n           rgba.z = rgba.z * rgba.w;\n           let coords = getCoordsFromIndex(index);\n           textureStore(outImage, vec2<i32>(coords.yx), rgba);\n         }\n       }\n      `;\n    return userCode;\n  }\n}","map":{"version":3,"names":["getMainHeaderString","main","PixelsOpType","computeDispatch","flatDispatchLayout","DrawProgram","constructor","outShape","type","textureFormat","variableNames","uniforms","workgroupSize","pixelsOpType","DRAW","size","outputShape","dispatchLayout","dispatch","shaderKey","getUserCode","calculateResult","value","userCode"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/draw_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType} from '@tensorflow/tfjs-core';\n\nimport {getMainHeaderString as main, PixelsOpType, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DrawProgram implements WebGPUProgram {\n  variableNames = ['Image'];\n  uniforms = 'alpha: f32,';\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  type: DataType;\n  textureFormat: GPUTextureFormat;\n  pixelsOpType = PixelsOpType.DRAW;\n  size = true;\n\n  constructor(\n      outShape: number[], type: DataType, textureFormat: GPUTextureFormat) {\n    this.outputShape = outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.type = type;\n    this.textureFormat = textureFormat;\n    this.shaderKey = `draw_${type}_${textureFormat}`;\n  }\n\n  getUserCode(): string {\n    let calculateResult;\n    const value = this.type === 'float32' ? 'value' : 'value / 255.0';\n    calculateResult = `\n      if (uniforms.numChannels == 1) {\n        rgba[0] = ${value};\n        rgba[1] = ${value};\n        rgba[2] = ${value};\n      } else {\n        rgba[d] = ${value};\n      }`;\n\n    const userCode = `\n       @group(0) @binding(0) var outImage : texture_storage_2d<${\n        this.textureFormat}, write>;\n       ${main('index')} {\n         if (index < uniforms.size) {\n           var rgba = vec4<f32>(0.0, 0.0, 0.0, uniforms.alpha);\n           for (var d = 0; d < uniforms.numChannels; d = d + 1) {\n             let value = f32(inBuf[index * uniforms.numChannels + d]);\n             ${calculateResult}\n           }\n           rgba.x = rgba.x * rgba.w;\n           rgba.y = rgba.y * rgba.w;\n           rgba.z = rgba.z * rgba.w;\n           let coords = getCoordsFromIndex(index);\n           textureStore(outImage, vec2<i32>(coords.yx), rgba);\n         }\n       }\n      `;\n    return userCode;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAmBA,SAAQA,mBAAmB,IAAIC,IAAI,EAAEC,YAAY,QAAsB,kBAAkB;AACzF,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAEjE,OAAM,MAAOC,WAAW;EAatBC,YACIC,QAAkB,EAAEC,IAAc,EAAEC,aAA+B;IAbvE,KAAAC,aAAa,GAAG,CAAC,OAAO,CAAC;IACzB,KAAAC,QAAQ,GAAG,aAAa;IAKxB,KAAAC,aAAa,GAA6B,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IAGpD,KAAAC,YAAY,GAAGX,YAAY,CAACY,IAAI;IAChC,KAAAC,IAAI,GAAG,IAAI;IAIT,IAAI,CAACC,WAAW,GAAGT,QAAQ;IAC3B,IAAI,CAACU,cAAc,GAAGb,kBAAkB,CAAC,IAAI,CAACY,WAAW,CAAC;IAC1D,IAAI,CAACE,QAAQ,GAAGf,eAAe,CAC3B,IAAI,CAACc,cAAc,EAAE,IAAI,CAACD,WAAW,EAAE,IAAI,CAACJ,aAAa,CAAC;IAC9D,IAAI,CAACJ,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACU,SAAS,GAAG,QAAQX,IAAI,IAAIC,aAAa,EAAE;EAClD;EAEAW,WAAWA,CAAA;IACT,IAAIC,eAAe;IACnB,MAAMC,KAAK,GAAG,IAAI,CAACd,IAAI,KAAK,SAAS,GAAG,OAAO,GAAG,eAAe;IACjEa,eAAe,GAAG;;oBAEFC,KAAK;oBACLA,KAAK;oBACLA,KAAK;;oBAELA,KAAK;QACjB;IAEJ,MAAMC,QAAQ,GAAG;iEAEb,IAAI,CAACd,aAAa;SACjBR,IAAI,CAAC,OAAO,CAAC;;;;;eAKPoB,eAAe;;;;;;;;;OASvB;IACH,OAAOE,QAAQ;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}