{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType, getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport function padCommon(shape, fillZero = false) {\n  const rank = shape.length;\n  const type = getCoordsDataType(rank);\n  const start = shape.map((_, i) => `uniforms.pad${i}[0]`).join(',');\n  const end = shape.map((_, i) => `uniforms.pad${i}[0] + uniforms.xShape${rank > 1 ? `[${i}]` : ''}`).join(',');\n  const startValue = rank > 1 ? `${type}(${start})` : `${start}`;\n  const endValue = rank > 1 ? `${type}(${end})` : `${end}`;\n  const leftPadCondition = rank > 1 ? `any(paddedCoords < start)` : `paddedCoords < start`;\n  const rightPadCondition = rank > 1 ? `any(paddedCoords >= end)` : `paddedCoords >= end`;\n  const unpackedCoords = rank > 1 ? ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank) : 'coords';\n  return `\n        let start = ${startValue};\n        let end = ${endValue};\n        if (${leftPadCondition} || ${rightPadCondition}) {\n          setOutputAtIndex(index, ${fillZero ? 0.0 : 'uniforms.constantValue'});\n        } else {\n          let coords = paddedCoords - start;\n          setOutputAtIndex(index, getX(${unpackedCoords}));\n        }\n  `;\n}\nexport class PadProgram {\n  constructor(xShape, paddings) {\n    this.variableNames = ['x'];\n    this.uniforms = 'constantValue : f32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.xShape = xShape;\n    this.shaderKey = 'pad';\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let paddedCoords = getCoordsFromIndex(index);\n          ${padCommon(this.xShape)}\n        }\n      }\n    `;\n    return userCode;\n  }\n}","map":{"version":3,"names":["getCoordsDataType","getMainHeaderString","main","computeDispatch","flatDispatchLayout","padCommon","shape","fillZero","rank","length","type","start","map","_","i","join","end","startValue","endValue","leftPadCondition","rightPadCondition","unpackedCoords","slice","PadProgram","constructor","xShape","paddings","variableNames","uniforms","workgroupSize","size","outputShape","p","dispatchLayout","dispatch","shaderKey","getUserCode","userCode"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/pad_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport function padCommon(shape: number[], fillZero = false): string {\n  const rank = shape.length;\n  const type = getCoordsDataType(rank);\n  const start = shape.map((_, i) => `uniforms.pad${i}[0]`).join(',');\n  const end = shape\n                  .map(\n                      (_, i) => `uniforms.pad${i}[0] + uniforms.xShape${\n                          rank > 1 ? `[${i}]` : ''}`)\n                  .join(',');\n  const startValue = rank > 1 ? `${type}(${start})` : `${start}`;\n  const endValue = rank > 1 ? `${type}(${end})` : `${end}`;\n\n  const leftPadCondition =\n      rank > 1 ? `any(paddedCoords < start)` : `paddedCoords < start`;\n  const rightPadCondition =\n      rank > 1 ? `any(paddedCoords >= end)` : `paddedCoords >= end`;\n\n  const unpackedCoords = rank > 1 ?\n      ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank) :\n      'coords';\n  return `\n        let start = ${startValue};\n        let end = ${endValue};\n        if (${leftPadCondition} || ${rightPadCondition}) {\n          setOutputAtIndex(index, ${fillZero ? 0.0 : 'uniforms.constantValue'});\n        } else {\n          let coords = paddedCoords - start;\n          setOutputAtIndex(index, getX(${unpackedCoords}));\n        }\n  `;\n}\n\nexport class PadProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'constantValue : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  xShape: number[];\n  size = true;\n\n  constructor(xShape: number[], paddings: Array<[number, number]>) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.xShape = xShape;\n    this.shaderKey = 'pad';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let paddedCoords = getCoordsFromIndex(index);\n          ${padCommon(this.xShape)}\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,iBAAiB,EAAEC,mBAAmB,IAAIC,IAAI,QAAsB,kBAAkB;AAC9F,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAEjE,OAAM,SAAUC,SAASA,CAACC,KAAe,EAAEC,QAAQ,GAAG,KAAK;EACzD,MAAMC,IAAI,GAAGF,KAAK,CAACG,MAAM;EACzB,MAAMC,IAAI,GAAGV,iBAAiB,CAACQ,IAAI,CAAC;EACpC,MAAMG,KAAK,GAAGL,KAAK,CAACM,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,eAAeA,CAAC,KAAK,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAClE,MAAMC,GAAG,GAAGV,KAAK,CACAM,GAAG,CACA,CAACC,CAAC,EAAEC,CAAC,KAAK,eAAeA,CAAC,wBACtBN,IAAI,GAAG,CAAC,GAAG,IAAIM,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,CAClCC,IAAI,CAAC,GAAG,CAAC;EAC1B,MAAME,UAAU,GAAGT,IAAI,GAAG,CAAC,GAAG,GAAGE,IAAI,IAAIC,KAAK,GAAG,GAAG,GAAGA,KAAK,EAAE;EAC9D,MAAMO,QAAQ,GAAGV,IAAI,GAAG,CAAC,GAAG,GAAGE,IAAI,IAAIM,GAAG,GAAG,GAAG,GAAGA,GAAG,EAAE;EAExD,MAAMG,gBAAgB,GAClBX,IAAI,GAAG,CAAC,GAAG,2BAA2B,GAAG,sBAAsB;EACnE,MAAMY,iBAAiB,GACnBZ,IAAI,GAAG,CAAC,GAAG,0BAA0B,GAAG,qBAAqB;EAEjE,MAAMa,cAAc,GAAGb,IAAI,GAAG,CAAC,GAC3B,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,CAACc,KAAK,CAAC,CAAC,EAAEd,IAAI,CAAC,GACnE,QAAQ;EACZ,OAAO;sBACaS,UAAU;oBACZC,QAAQ;cACdC,gBAAgB,OAAOC,iBAAiB;oCAClBb,QAAQ,GAAG,GAAG,GAAG,wBAAwB;;;yCAGpCc,cAAc;;GAEpD;AACH;AAEA,OAAM,MAAOE,UAAU;EAWrBC,YAAYC,MAAgB,EAAEC,QAAiC;IAN/D,KAAAC,aAAa,GAAG,CAAC,GAAG,CAAC;IACrB,KAAAC,QAAQ,GAAG,sBAAsB;IACjC,KAAAC,aAAa,GAA6B,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IAEpD,KAAAC,IAAI,GAAG,IAAI;IAGT,IAAI,CAACC,WAAW,GAAGL,QAAQ,CAACd,GAAG,CAC3B,CAACoB,CAAC,EAAElB,CAAC,KAAKkB,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkBP,MAAM,CAACX,CAAC,CAAC,GAAGkB,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC;IACrE,IAAI,CAACC,cAAc,GAAG7B,kBAAkB,CAAC,IAAI,CAAC2B,WAAW,CAAC;IAC1D,IAAI,CAACG,QAAQ,GAAG/B,eAAe,CAC3B,IAAI,CAAC8B,cAAc,EAAE,IAAI,CAACF,WAAW,EAAE,IAAI,CAACF,aAAa,CAAC;IAC9DH,QAAQ,CAACd,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;MACpB,IAAI,CAACc,QAAQ,IAAI,OAAOd,CAAC,eAAe;IAC1C,CAAC,CAAC;IACF,IAAI,CAACW,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACU,SAAS,GAAG,KAAK;EACxB;EAEAC,WAAWA,CAAA;IACT,MAAMC,QAAQ,GAAG;QACbnC,IAAI,CAAC,OAAO,CAAC;;;YAGTG,SAAS,CAAC,IAAI,CAACoB,MAAM,CAAC;;;KAG7B;IACD,OAAOY,QAAQ;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}