{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3D } from '@tensorflow/tfjs-core';\nimport { Pool3DProgram } from '../pool_webgpu';\nexport function maxPool3d(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode\n  } = attrs;\n  const dilations = [1, 1, 1];\n  const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max');\n  const dimensions = [{\n    type: 'int32',\n    data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.inDepth, convInfo.inHeight, convInfo.inWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n  }];\n  return backend.runWebGPUProgram(maxPoolProgram, [x], x.dtype, dimensions);\n}\nexport const maxPool3DConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgpu',\n  kernelFunc: maxPool3d\n};","map":{"version":3,"names":["backend_util","MaxPool3D","Pool3DProgram","maxPool3d","args","inputs","backend","attrs","x","filterSize","strides","pad","dataFormat","dimRoundingMode","dilations","convInfo","computePool3DInfo","shape","maxPoolProgram","dimensions","type","data","strideDepth","strideHeight","strideWidth","padInfo","front","top","left","inDepth","inHeight","inWidth","effectiveFilterDepth","effectiveFilterHeight","effectiveFilterWidth","runWebGPUProgram","dtype","maxPool3DConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/MaxPool3D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Pool3DProgram} from '../pool_webgpu';\n\nexport function maxPool3d(args: {\n  inputs: MaxPool3DInputs,\n  backend: WebGPUBackend,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dataFormat, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max');\n  const dimensions = [\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {\n      type: 'int32',\n      data:\n          [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left]\n    },\n    {\n      type: 'int32',\n      data: [convInfo.inDepth, convInfo.inHeight, convInfo.inWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight,\n        convInfo.effectiveFilterWidth\n      ]\n    }\n  ];\n  return backend.runWebGPUProgram(maxPoolProgram, [x], x.dtype, dimensions);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgpu',\n  kernelFunc: maxPool3d as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,YAAY,EAA4BC,SAAS,QAAoD,uBAAuB;AAGpI,SAAQC,aAAa,QAAO,gBAAgB;AAE5C,OAAM,SAAUC,SAASA,CAACC,IAIzB;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI,UAAU;IAAEC,OAAO;IAAEC,GAAG;IAAEC,UAAU;IAAEC;EAAe,CAAC,GAAGN,KAAK;EACrE,MAAMO,SAAS,GAA6B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAErD,MAAMC,QAAQ,GAAGf,YAAY,CAACgB,iBAAiB,CAC3CR,CAAC,CAACS,KAAiD,EAAER,UAAU,EAAEC,OAAO,EACxEI,SAAS,EAAEH,GAAG,EAAEE,eAAe,EAAED,UAAU,CAAC;EAChD,MAAMM,cAAc,GAAG,IAAIhB,aAAa,CAACa,QAAQ,EAAE,KAAK,CAAC;EACzD,MAAMI,UAAU,GAAG,CACjB;IACEC,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,CAACN,QAAQ,CAACO,WAAW,EAAEP,QAAQ,CAACQ,YAAY,EAAER,QAAQ,CAACS,WAAW;GACzE,EACD;IACEJ,IAAI,EAAE,OAAO;IACbC,IAAI,EACA,CAACN,QAAQ,CAACU,OAAO,CAACC,KAAK,EAAEX,QAAQ,CAACU,OAAO,CAACE,GAAG,EAAEZ,QAAQ,CAACU,OAAO,CAACG,IAAI;GACzE,EACD;IACER,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,CAACN,QAAQ,CAACc,OAAO,EAAEd,QAAQ,CAACe,QAAQ,EAAEf,QAAQ,CAACgB,OAAO;GAC7D,EACD;IACEX,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,CACJN,QAAQ,CAACiB,oBAAoB,EAAEjB,QAAQ,CAACkB,qBAAqB,EAC7DlB,QAAQ,CAACmB,oBAAoB;GAEhC,CACF;EACD,OAAO5B,OAAO,CAAC6B,gBAAgB,CAACjB,cAAc,EAAE,CAACV,CAAC,CAAC,EAAEA,CAAC,CAAC4B,KAAK,EAAEjB,UAAU,CAAC;AAC3E;AAEA,OAAO,MAAMkB,eAAe,GAAiB;EAC3CC,UAAU,EAAErC,SAAS;EACrBsC,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAErC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}