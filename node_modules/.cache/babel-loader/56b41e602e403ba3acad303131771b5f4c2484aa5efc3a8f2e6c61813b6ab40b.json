{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPoolGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool2DBackpropProgram } from '../max_pool_backprop_webgpu';\nimport { Pool2DProgram } from '../pool_webgpu';\nimport { assertNotComplex } from '../webgpu_util';\nexport function maxPoolGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input,\n    output\n  } = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n  const maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', true);\n  let uniformData = [{\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.dilationHeight, convInfo.dilationWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.inHeight, convInfo.inWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n  }];\n  const maxPoolPositions = backend.runWebGPUProgram(maxPoolPositionsProgram, [x], 'int32', uniformData);\n  const maxPoolBackpropProgram = new MaxPool2DBackpropProgram(convInfo);\n  uniformData = [{\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top, convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.dilationHeight, convInfo.dilationWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.outWidth]\n  }];\n  const result = backend.runWebGPUProgram(maxPoolBackpropProgram, [dy, maxPoolPositions], x.dtype, uniformData);\n  backend.disposeData(maxPoolPositions.dataId);\n  return result;\n}\nexport const maxPoolGradConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgpu',\n  kernelFunc: maxPoolGrad\n};","map":{"version":3,"names":["backend_util","MaxPoolGrad","MaxPool2DBackpropProgram","Pool2DProgram","assertNotComplex","maxPoolGrad","args","inputs","backend","attrs","dy","input","output","x","filterSize","strides","pad","dimRoundingMode","convInfo","computePool2DInfo","shape","maxPoolPositionsProgram","uniformData","type","data","strideHeight","strideWidth","padInfo","top","left","dilationHeight","dilationWidth","inHeight","inWidth","effectiveFilterHeight","effectiveFilterWidth","maxPoolPositions","runWebGPUProgram","maxPoolBackpropProgram","outHeight","outWidth","result","dtype","disposeData","dataId","maxPoolGradConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/MaxPoolGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {MaxPool2DBackpropProgram} from '../max_pool_backprop_webgpu';\nimport {Pool2DProgram} from '../pool_webgpu';\nimport {assertNotComplex} from '../webgpu_util';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: WebGPUBackend,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n\n  const maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', true);\n  let uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]},\n    {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]}, {\n      type: 'int32',\n      data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n    }\n  ];\n  const maxPoolPositions = backend.runWebGPUProgram(\n      maxPoolPositionsProgram, [x], 'int32', uniformData);\n\n  const maxPoolBackpropProgram = new MaxPool2DBackpropProgram(convInfo);\n  uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top,\n        convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]}, {\n      type: 'int32',\n      data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n    },\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]}\n  ];\n  const result = backend.runWebGPUProgram(\n      maxPoolBackpropProgram, [dy, maxPoolPositions], x.dtype, uniformData);\n  backend.disposeData(maxPoolPositions.dataId);\n\n  return result;\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgpu',\n  kernelFunc: maxPoolGrad as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}