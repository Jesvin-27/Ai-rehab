{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch } from './webgpu_util';\nexport class TransposeSharedProgram {\n  constructor(aShape, newDim) {\n    this.variableNames = ['A'];\n    // Note that the maximum number of workgroup invocations by webgpu is 256.\n    this.workgroupSize = [16, 16, 1];\n    const outputShape = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = {\n      x: [0],\n      y: [1]\n    };\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, [1, 1, 1]);\n    this.shaderKey = 'transposeShared';\n  }\n  getUserCode() {\n    util.assert(this.workgroupSize[0] === this.workgroupSize[1], () => `Must be a square tile, current tile shape is ${this.workgroupSize[0]} x ${this.workgroupSize[1]}`);\n    const tileSize = this.workgroupSize[0];\n    const userCode = `\n      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0] + 1}>, ${this.workgroupSize[0]}>;\n      ${main()} {\n        var x = i32(workgroupId.x) * ${tileSize} + i32(localId.x);\n        var y = i32(workgroupId.y) * ${tileSize} + i32(localId.y);\n        let width = uniforms.outShape[0];\n        let height = uniforms.outShape[1];\n        if (x < width && y < height) {\n          tile[localId.y][localId.x] = f32(A[y * width + x]);\n        }\n        workgroupBarrier();\n\n        x = i32(workgroupId.y) * ${tileSize} + i32(localId.x);\n        y = i32(workgroupId.x) * ${tileSize} + i32(localId.y);\n        if (x < height && y < width) {\n          setOutputAtIndex((y * height + x), tile[localId.x]\n            [localId.y]);\n        }\n      }\n    `;\n    return userCode;\n  }\n}","map":{"version":3,"names":["util","getMainHeaderString","main","computeDispatch","TransposeSharedProgram","constructor","aShape","newDim","variableNames","workgroupSize","outputShape","Array","length","i","dispatchLayout","x","y","dispatch","shaderKey","getUserCode","assert","tileSize","userCode"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/transpose_shared_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport class TransposeSharedProgram implements WebGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[]};\n  dispatch: [number, number, number];\n  // Note that the maximum number of workgroup invocations by webgpu is 256.\n  workgroupSize: [number, number, number] = [16, 16, 1];\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [0], y: [1]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize, [1, 1, 1]);\n\n    this.shaderKey = 'transposeShared';\n  }\n\n  getUserCode(): string {\n    util.assert(\n        this.workgroupSize[0] === this.workgroupSize[1],\n        () => `Must be a square tile, current tile shape is ${\n            this.workgroupSize[0]} x ${this.workgroupSize[1]}`);\n    const tileSize = this.workgroupSize[0];\n    const userCode = `\n      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0] + 1}>, ${\n        this.workgroupSize[0]}>;\n      ${main()} {\n        var x = i32(workgroupId.x) * ${tileSize} + i32(localId.x);\n        var y = i32(workgroupId.y) * ${tileSize} + i32(localId.y);\n        let width = uniforms.outShape[0];\n        let height = uniforms.outShape[1];\n        if (x < width && y < height) {\n          tile[localId.y][localId.x] = f32(A[y * width + x]);\n        }\n        workgroupBarrier();\n\n        x = i32(workgroupId.y) * ${tileSize} + i32(localId.x);\n        y = i32(workgroupId.x) * ${tileSize} + i32(localId.y);\n        if (x < height && y < width) {\n          setOutputAtIndex((y * height + x), tile[localId.x]\n            [localId.y]);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,IAAI,QAAO,uBAAuB;AAC1C,SAAQC,mBAAmB,IAAIC,IAAI,QAAsB,kBAAkB;AAC3E,SAAQC,eAAe,QAAO,eAAe;AAE7C,OAAM,MAAOC,sBAAsB;EASjCC,YAAYC,MAAgB,EAAEC,MAAgB;IAR9C,KAAAC,aAAa,GAAG,CAAC,GAAG,CAAC;IAKrB;IACA,KAAAC,aAAa,GAA6B,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAGnD,MAAMC,WAAW,GAAa,IAAIC,KAAK,CAACL,MAAM,CAACM,MAAM,CAAC;IACtD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC3CH,WAAW,CAACG,CAAC,CAAC,GAAGP,MAAM,CAACC,MAAM,CAACM,CAAC,CAAC,CAAC;;IAEpC,IAAI,CAACH,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACI,cAAc,GAAG;MAACC,CAAC,EAAE,CAAC,CAAC,CAAC;MAAEC,CAAC,EAAE,CAAC,CAAC;IAAC,CAAC;IACtC,IAAI,CAACC,QAAQ,GAAGd,eAAe,CAC3B,IAAI,CAACW,cAAc,EAAE,IAAI,CAACJ,WAAW,EAAE,IAAI,CAACD,aAAa,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAEzE,IAAI,CAACS,SAAS,GAAG,iBAAiB;EACpC;EAEAC,WAAWA,CAAA;IACTnB,IAAI,CAACoB,MAAM,CACP,IAAI,CAACX,aAAa,CAAC,CAAC,CAAC,KAAK,IAAI,CAACA,aAAa,CAAC,CAAC,CAAC,EAC/C,MAAM,gDACF,IAAI,CAACA,aAAa,CAAC,CAAC,CAAC,MAAM,IAAI,CAACA,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3D,MAAMY,QAAQ,GAAG,IAAI,CAACZ,aAAa,CAAC,CAAC,CAAC;IACtC,MAAMa,QAAQ,GAAG;+CAC0B,IAAI,CAACb,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,MAChE,IAAI,CAACA,aAAa,CAAC,CAAC,CAAC;QACrBP,IAAI,EAAE;uCACyBmB,QAAQ;uCACRA,QAAQ;;;;;;;;mCAQZA,QAAQ;mCACRA,QAAQ;;;;;;KAMtC;IACD,OAAOC,QAAQ;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}