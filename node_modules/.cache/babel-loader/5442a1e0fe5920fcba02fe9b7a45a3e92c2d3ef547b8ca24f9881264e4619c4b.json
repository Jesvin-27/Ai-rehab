{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropInput, env } from '@tensorflow/tfjs-core';\nimport { Conv2DDerInputMMProgram } from '../conv_backprop_mm_webgpu';\nimport { Conv2DDerInputProgram } from '../conv_backprop_webgpu';\nexport function conv2DBackpropInput(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    filter\n  } = inputs;\n  const {\n    inputShape,\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n  const dimensions = [{\n    type: 'int32',\n    data: [convInfo.filterHeight, convInfo.filterWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.filterHeight - 1 - convInfo.padInfo.top, convInfo.filterWidth - 1 - convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.batchSize, convInfo.outHeight, convInfo.outWidth, convInfo.outChannels]\n  }];\n  let program;\n  // TODO: Experiment when to use Conv2DDerInputMMProgram algorithm.\n  if (env().getBool('WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE') || convInfo.dataFormat !== 'channelsLast') {\n    program = new Conv2DDerInputProgram(convInfo);\n  } else {\n    program = new Conv2DDerInputMMProgram(convInfo);\n    const dimAOuter = convInfo.inHeight * convInfo.inWidth;\n    const dimBOuter = convInfo.inChannels;\n    const dimInner = convInfo.filterHeight * convInfo.filterWidth * convInfo.outChannels;\n    dimensions.push({\n      type: 'uint32',\n      data: [dimAOuter]\n    }, {\n      type: 'uint32',\n      data: [dimBOuter]\n    }, {\n      type: 'uint32',\n      data: [dimInner]\n    });\n  }\n  return backend.runWebGPUProgram(program, [dy, filter], 'float32', dimensions);\n}\nexport const conv2DBackpropInputConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgpu',\n  kernelFunc: conv2DBackpropInput\n};","map":{"version":3,"names":["backend_util","Conv2DBackpropInput","env","Conv2DDerInputMMProgram","Conv2DDerInputProgram","conv2DBackpropInput","args","inputs","backend","attrs","dy","filter","inputShape","strides","pad","dataFormat","dimRoundingMode","$dataFormat","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","dimensions","type","data","filterHeight","filterWidth","padInfo","top","left","strideHeight","strideWidth","batchSize","outHeight","outWidth","outChannels","program","getBool","dimAOuter","inHeight","inWidth","dimBOuter","inChannels","dimInner","push","runWebGPUProgram","conv2DBackpropInputConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/Conv2DBackpropInput.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, env, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv2DDerInputMMProgram} from '../conv_backprop_mm_webgpu';\nimport {Conv2DDerInputProgram} from '../conv_backprop_webgpu';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dimensions = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {\n      type: 'int32',\n      data: [\n        convInfo.filterHeight - 1 - convInfo.padInfo.top,\n        convInfo.filterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {\n      type: 'int32',\n      data: [\n        convInfo.batchSize, convInfo.outHeight, convInfo.outWidth,\n        convInfo.outChannels\n      ]\n    },\n  ];\n  let program: Conv2DDerInputProgram|Conv2DDerInputMMProgram;\n  // TODO: Experiment when to use Conv2DDerInputMMProgram algorithm.\n  if (env().getBool('WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE') ||\n      convInfo.dataFormat !== 'channelsLast') {\n    program = new Conv2DDerInputProgram(convInfo);\n  } else {\n    program = new Conv2DDerInputMMProgram(convInfo);\n    const dimAOuter = convInfo.inHeight * convInfo.inWidth;\n    const dimBOuter = convInfo.inChannels;\n    const dimInner =\n        convInfo.filterHeight * convInfo.filterWidth * convInfo.outChannels;\n    dimensions.push(\n        {type: 'uint32', data: [dimAOuter]},\n        {type: 'uint32', data: [dimBOuter]},\n        {type: 'uint32', data: [dimInner]});\n  }\n  return backend.runWebGPUProgram(program, [dy, filter], 'float32', dimensions);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgpu',\n  kernelFunc: conv2DBackpropInput as unknown as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAEC,mBAAmB,EAAuDC,GAAG,QAAiC,uBAAuB;AAG3J,SAAQC,uBAAuB,QAAO,4BAA4B;AAClE,SAAQC,qBAAqB,QAAO,yBAAyB;AAE7D,OAAM,SAAUC,mBAAmBA,CAACC,IAInC;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,EAAE;IAAEC;EAAM,CAAC,GAAGJ,MAAM;EAC3B,MAAM;IAACK,UAAU;IAAEC,OAAO;IAAEC,GAAG;IAAEC,UAAU;IAAEC;EAAe,CAAC,GAAGP,KAAK;EAErE,MAAMQ,WAAW,GAAGjB,YAAY,CAACkB,uBAAuB,CAACH,UAAU,CAAC;EACpE,MAAMI,QAAQ,GAAGnB,YAAY,CAACoB,iBAAiB,CAC3CR,UAAU,EAAED,MAAM,CAACU,KAAyC,EAAER,OAAO,EACrE,CAAC,CAAC,iBAAiBC,GAAG,EAAEE,eAAe,EAAE,KAAK,EAAEC,WAAW,CAAC;EAEhE,MAAMK,UAAU,GAAG,CACjB;IAACC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACL,QAAQ,CAACM,YAAY,EAAEN,QAAQ,CAACO,WAAW;EAAC,CAAC,EACpE;IACEH,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,CACJL,QAAQ,CAACM,YAAY,GAAG,CAAC,GAAGN,QAAQ,CAACQ,OAAO,CAACC,GAAG,EAChDT,QAAQ,CAACO,WAAW,GAAG,CAAC,GAAGP,QAAQ,CAACQ,OAAO,CAACE,IAAI;GAEnD,EACD;IAACN,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACL,QAAQ,CAACW,YAAY,EAAEX,QAAQ,CAACY,WAAW;EAAC,CAAC,EACpE;IACER,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,CACJL,QAAQ,CAACa,SAAS,EAAEb,QAAQ,CAACc,SAAS,EAAEd,QAAQ,CAACe,QAAQ,EACzDf,QAAQ,CAACgB,WAAW;GAEvB,CACF;EACD,IAAIC,OAAsD;EAC1D;EACA,IAAIlC,GAAG,EAAE,CAACmC,OAAO,CAAC,mCAAmC,CAAC,IAClDlB,QAAQ,CAACJ,UAAU,KAAK,cAAc,EAAE;IAC1CqB,OAAO,GAAG,IAAIhC,qBAAqB,CAACe,QAAQ,CAAC;GAC9C,MAAM;IACLiB,OAAO,GAAG,IAAIjC,uBAAuB,CAACgB,QAAQ,CAAC;IAC/C,MAAMmB,SAAS,GAAGnB,QAAQ,CAACoB,QAAQ,GAAGpB,QAAQ,CAACqB,OAAO;IACtD,MAAMC,SAAS,GAAGtB,QAAQ,CAACuB,UAAU;IACrC,MAAMC,QAAQ,GACVxB,QAAQ,CAACM,YAAY,GAAGN,QAAQ,CAACO,WAAW,GAAGP,QAAQ,CAACgB,WAAW;IACvEb,UAAU,CAACsB,IAAI,CACX;MAACrB,IAAI,EAAE,QAAQ;MAAEC,IAAI,EAAE,CAACc,SAAS;IAAC,CAAC,EACnC;MAACf,IAAI,EAAE,QAAQ;MAAEC,IAAI,EAAE,CAACiB,SAAS;IAAC,CAAC,EACnC;MAAClB,IAAI,EAAE,QAAQ;MAAEC,IAAI,EAAE,CAACmB,QAAQ;IAAC,CAAC,CAAC;;EAEzC,OAAOnC,OAAO,CAACqC,gBAAgB,CAACT,OAAO,EAAE,CAAC1B,EAAE,EAAEC,MAAM,CAAC,EAAE,SAAS,EAAEW,UAAU,CAAC;AAC/E;AAEA,OAAO,MAAMwB,yBAAyB,GAAiB;EACrDC,UAAU,EAAE9C,mBAAmB;EAC/B+C,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAE5C;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}