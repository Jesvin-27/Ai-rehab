{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Neg } from '@tensorflow/tfjs-core';\nimport { negImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpType } from '../unary_op_util';\nimport { UnaryOpProgram } from '../unary_op_webgpu';\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.tensorMap.get(x.dataId);\n    const [outValues, newShape] = negImplCPU(xData.values, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n  const program = new UnaryOpProgram(x.shape, UnaryOpType.NEG);\n  return backend.runWebGPUProgram(program, [x], x.dtype);\n}\nexport const negConfig = {\n  kernelName: Neg,\n  backendName: 'webgpu',\n  kernelFunc: neg\n};","map":{"version":3,"names":["Neg","negImplCPU","UnaryOpType","UnaryOpProgram","neg","args","inputs","backend","x","shouldExecuteOnCPU","xData","tensorMap","get","dataId","outValues","newShape","values","shape","dtype","makeTensorInfo","program","NEG","runWebGPUProgram","negConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/Neg.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {negImplCPU} from '../kernel_utils/shared';\n\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.tensorMap.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  const program = new UnaryOpProgram(x.shape, UnaryOpType.NEG);\n\n  return backend.runWebGPUProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgpu',\n  kernelFunc: neg as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,GAAG,QAA0C,uBAAuB;AAGtG,SAAQC,UAAU,QAAO,wBAAwB;AAEjD,SAAQC,WAAW,QAAO,kBAAkB;AAC5C,SAAQC,cAAc,QAAO,oBAAoB;AAEjD;AACA;AACA,OAAM,SAAUC,GAAGA,CAACC,IAAiD;EAEnE,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAC9B,MAAM;IAACG;EAAC,CAAC,GAAGF,MAAM;EAElB,IAAIC,OAAO,CAACE,kBAAkB,CAAC,CAACD,CAAC,CAAC,CAAC,EAAE;IACnC,MAAME,KAAK,GAAGH,OAAO,CAACI,SAAS,CAACC,GAAG,CAACJ,CAAC,CAACK,MAAM,CAAC;IAC7C,MAAM,CAACC,SAAS,EAAEC,QAAQ,CAAC,GACvBd,UAAU,CAACS,KAAK,CAACM,MAAoB,EAAER,CAAC,CAACS,KAAK,EAAET,CAAC,CAACU,KAAK,CAAC;IAC5D,OAAOX,OAAO,CAACY,cAAc,CAACJ,QAAQ,EAAEP,CAAC,CAACU,KAAK,EAAEJ,SAAS,CAAC;;EAG7D,MAAMM,OAAO,GAAG,IAAIjB,cAAc,CAACK,CAAC,CAACS,KAAK,EAAEf,WAAW,CAACmB,GAAG,CAAC;EAE5D,OAAOd,OAAO,CAACe,gBAAgB,CAACF,OAAO,EAAE,CAACZ,CAAC,CAAC,EAAEA,CAAC,CAACU,KAAK,CAAC;AACxD;AAEA,OAAO,MAAMK,SAAS,GAAiB;EACrCC,UAAU,EAAExB,GAAG;EACfyB,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAEtB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}