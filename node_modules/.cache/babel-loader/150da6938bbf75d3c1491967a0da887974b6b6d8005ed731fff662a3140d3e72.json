{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DNCHWSharedProgram } from '../depthwise_conv2d_nchw_shared_webgpu';\nimport { DepthwiseConv2DVec4Program } from '../depthwise_conv2d_vec4_webgpu';\nimport { DepthwiseConv2DProgram } from '../depthwise_conv2d_webgpu';\nexport function depthwiseConv2dNative(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */, $dataFormat);\n  const dimensions = [{\n    type: 'int32',\n    data: [convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.inHeight, convInfo.inWidth]\n  }];\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  let program;\n  if (!isChannelsLast && convInfo.inHeight > 16 && convInfo.inWidth > 16 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && convInfo.dilationWidth === 1 && convInfo.dilationHeight === 1 && convInfo.inChannels === convInfo.outChannels) {\n    program = new DepthwiseConv2DNCHWSharedProgram(convInfo.outShape, convInfo.filterHeight, convInfo.filterWidth);\n  } else if (isChannelsLast && convInfo.outHeight > 4 && convInfo.outWidth > 4 && convInfo.strideWidth <= 2 && convInfo.inChannels === convInfo.outChannels && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.inChannels % 4 === 0) {\n    program = new DepthwiseConv2DVec4Program(convInfo);\n    dimensions.push({\n      type: 'int32',\n      data: [program.virtualWidth]\n    });\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n    dimensions.push({\n      type: 'int32',\n      data: [convInfo.filterHeight]\n    }, {\n      type: 'int32',\n      data: [convInfo.filterWidth]\n    }, {\n      type: 'int32',\n      data: [convInfo.strideHeight, convInfo.strideWidth]\n    }, {\n      type: 'int32',\n      data: [convInfo.dilationHeight, convInfo.dilationWidth]\n    });\n  }\n  return backend.runWebGPUProgram(program, [x, filter], x.dtype, dimensions);\n}\nexport const depthwiseConv2dNativeConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgpu',\n  kernelFunc: depthwiseConv2dNative\n};","map":{"version":3,"names":["backend_util","DepthwiseConv2dNative","DepthwiseConv2DNCHWSharedProgram","DepthwiseConv2DVec4Program","DepthwiseConv2DProgram","depthwiseConv2dNative","args","inputs","backend","attrs","x","filter","strides","pad","dataFormat","dilations","dimRoundingMode","$dataFormat","convertConv2DDataFormat","$dilations","convInfo","computeConv2DInfo","shape","dimensions","type","data","padInfo","top","left","inHeight","inWidth","isChannelsLast","program","strideHeight","strideWidth","dilationWidth","dilationHeight","inChannels","outChannels","outShape","filterHeight","filterWidth","outHeight","outWidth","push","virtualWidth","runWebGPUProgram","dtype","depthwiseConv2dNativeConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/DepthwiseConv2dNative.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthwiseConv2DNCHWSharedProgram} from '../depthwise_conv2d_nchw_shared_webgpu';\nimport {DepthwiseConv2DVec4Program} from '../depthwise_conv2d_vec4_webgpu';\nimport {DepthwiseConv2DProgram} from '../depthwise_conv2d_webgpu';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */, $dataFormat);\n  const dimensions = [\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]},\n  ];\n\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  let program: DepthwiseConv2DProgram|DepthwiseConv2DVec4Program|\n      DepthwiseConv2DNCHWSharedProgram;\n  if (!isChannelsLast && convInfo.inHeight > 16 && convInfo.inWidth > 16 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      convInfo.dilationWidth === 1 && convInfo.dilationHeight === 1 &&\n      convInfo.inChannels === convInfo.outChannels) {\n    program = new DepthwiseConv2DNCHWSharedProgram(\n        convInfo.outShape, convInfo.filterHeight, convInfo.filterWidth);\n  } else if (\n      isChannelsLast && convInfo.outHeight > 4 && convInfo.outWidth > 4 &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.inChannels === convInfo.outChannels &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.inChannels % 4 === 0) {\n    program = new DepthwiseConv2DVec4Program(convInfo);\n    dimensions.push({type: 'int32', data: [program.virtualWidth]});\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n    dimensions.push(\n        {type: 'int32', data: [convInfo.filterHeight]},\n        {type: 'int32', data: [convInfo.filterWidth]},\n        {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n          type: 'int32',\n          data: [convInfo.dilationHeight, convInfo.dilationWidth]\n        });\n  }\n\n  return backend.runWebGPUProgram(program, [x, filter], x.dtype, dimensions);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgpu',\n  kernelFunc: depthwiseConv2dNative as unknown as KernelFunc,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}