{"ast":null,"code":"var _jsxFileName = \"/Users/jesvinblazegmail.com/PycharmProjects/Ai-rehab/src/pages/ExercisePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as tf from '@tensorflow/tfjs';\nimport * as posedetection from '@tensorflow-models/pose-detection';\nimport '@tensorflow/tfjs-backend-webgl';\nimport Chart from 'chart.js/auto';\nimport './ExercisePage.css';\nimport { processChairSquat, resetChairSquat } from '../exercises/ChairSquats';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exerciseData = {\n  cardiac: ['Chair Marching', 'Leg Extensions', 'Step-Ups'],\n  neuro: ['Balance Training', 'Gait Training', 'Coordination'],\n  ortho: ['Chair Squats'],\n  physio: ['Arm Circles', 'Shoulder Rolls']\n};\nconst ExercisePage = () => {\n  _s();\n  const {\n    type\n  } = useParams();\n  const exercises = exerciseData[type] || [];\n  const [selectedExercise, setSelectedExercise] = useState('');\n  const [isScanning, setIsScanning] = useState(false);\n  const [reps, setReps] = useState(0);\n  const [showGraph, setShowGraph] = useState(false);\n  const [chartInstance, setChartInstance] = useState(null);\n  const [scanStartTime, setScanStartTime] = useState(null);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const detectorRef = useRef(null);\n  const requestRef = useRef(null);\n  const graphRef = useRef(null);\n  useEffect(() => {\n    return () => {\n      stopScan();\n    };\n  }, []);\n  const startScan = async () => {\n    if (!selectedExercise) return alert('Please select an exercise!');\n    setIsScanning(true);\n    setReps(0);\n    resetChairSquat();\n    setScanStartTime(Date.now());\n    await tf.setBackend('webgl');\n    const detector = await posedetection.createDetector(posedetection.SupportedModels.MoveNet, {\n      modelType: posedetection.movenet.modelType.SINGLEPOSE_LIGHTNING\n    });\n    detectorRef.current = detector;\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: true\n    });\n    videoRef.current.srcObject = stream;\n    await new Promise(resolve => {\n      videoRef.current.onloadedmetadata = () => {\n        resolve();\n      };\n    });\n    detectPose();\n  };\n  const stopScan = () => {\n    var _videoRef$current;\n    setIsScanning(false);\n    if ((_videoRef$current = videoRef.current) !== null && _videoRef$current !== void 0 && _videoRef$current.srcObject) {\n      videoRef.current.srcObject.getTracks().forEach(track => track.stop());\n    }\n    cancelAnimationFrame(requestRef.current);\n    resetChairSquat();\n    window.speechSynthesis.cancel();\n  };\n  const detectPose = async () => {\n    if (!videoRef.current || !canvasRef.current || !detectorRef.current) return;\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    const detect = async () => {\n      if (!isScanning) return;\n      const poses = await detectorRef.current.estimatePoses(video);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      poses.forEach(pose => {\n        pose.keypoints.forEach(kp => {\n          if (kp.score > 0.5) {\n            ctx.beginPath();\n            ctx.arc(kp.x, kp.y, 5, 0, 2 * Math.PI);\n            ctx.fillStyle = 'lime';\n            ctx.fill();\n          }\n        });\n        if (selectedExercise === 'Chair Squats') {\n          const result = processChairSquat(pose.keypoints);\n          setReps(result.reps);\n          updateChart(result.reps);\n        }\n      });\n      requestRef.current = requestAnimationFrame(detect);\n    };\n    detect();\n  };\n  const updateChart = repCount => {\n    const elapsedSeconds = Math.floor((Date.now() - scanStartTime) / 1000);\n    if (chartInstance) {\n      chartInstance.data.labels.push(`${elapsedSeconds}s`);\n      chartInstance.data.datasets[0].data.push(repCount);\n      chartInstance.update();\n    }\n  };\n  const initChart = () => {\n    const ctx = graphRef.current.getContext('2d');\n    const newChart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: [],\n        datasets: [{\n          label: 'Repetitions',\n          data: [],\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.4\n        }]\n      }\n    });\n    setChartInstance(newChart);\n  };\n  useEffect(() => {\n    if (showGraph && !chartInstance) {\n      initChart();\n    }\n  }, [showGraph]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exercise-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"top-bar\",\n      children: [\"AI-Rehab \\u2013 \", selectedExercise || 'Select Exercise']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n        className: \"left-panel\",\n        children: [exercises.map(ex => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `exercise-button ${selectedExercise === ex ? 'active' : ''}`,\n          onClick: () => {\n            setSelectedExercise(ex);\n            setShowGraph(false);\n          },\n          children: ex\n        }, ex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"exercise-button graph-button\",\n          onClick: () => setShowGraph(true),\n          children: \"View Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"content-panel\",\n        children: [showGraph ? /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: graphRef,\n          width: 640,\n          height: 480\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-canvas-wrap\",\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: videoRef,\n            autoPlay: true,\n            muted: true,\n            className: \"video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: canvasRef,\n            className: \"canvas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), !showGraph && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: startScan,\n            className: \"control-btn start\",\n            children: \"Start Scan\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: stopScan,\n            className: \"control-btn stop\",\n            children: \"Stop Scan\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"control-btn save\",\n            onClick: () => alert('Saved!'),\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rep-counter\",\n            children: [\"Reps: \", reps]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(ExercisePage, \"0GaVQyfUXzAPjjlZcGmpidenQzo=\", false, function () {\n  return [useParams];\n});\n_c = ExercisePage;\nexport default ExercisePage;\nvar _c;\n$RefreshReg$(_c, \"ExercisePage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","tf","posedetection","Chart","processChairSquat","resetChairSquat","jsxDEV","_jsxDEV","exerciseData","cardiac","neuro","ortho","physio","ExercisePage","_s","type","exercises","selectedExercise","setSelectedExercise","isScanning","setIsScanning","reps","setReps","showGraph","setShowGraph","chartInstance","setChartInstance","scanStartTime","setScanStartTime","videoRef","canvasRef","detectorRef","requestRef","graphRef","stopScan","startScan","alert","Date","now","setBackend","detector","createDetector","SupportedModels","MoveNet","modelType","movenet","SINGLEPOSE_LIGHTNING","current","stream","navigator","mediaDevices","getUserMedia","video","srcObject","Promise","resolve","onloadedmetadata","detectPose","_videoRef$current","getTracks","forEach","track","stop","cancelAnimationFrame","window","speechSynthesis","cancel","canvas","ctx","getContext","width","videoWidth","height","videoHeight","detect","poses","estimatePoses","clearRect","pose","keypoints","kp","score","beginPath","arc","x","y","Math","PI","fillStyle","fill","result","updateChart","requestAnimationFrame","repCount","elapsedSeconds","floor","data","labels","push","datasets","update","initChart","newChart","label","borderColor","tension","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","ex","onClick","ref","autoPlay","muted","_c","$RefreshReg$"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/Ai-rehab/src/pages/ExercisePage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as tf from '@tensorflow/tfjs';\nimport * as posedetection from '@tensorflow-models/pose-detection';\nimport '@tensorflow/tfjs-backend-webgl';\nimport Chart from 'chart.js/auto';\nimport './ExercisePage.css';\n\nimport { processChairSquat, resetChairSquat } from '../exercises/ChairSquats';\n\nconst exerciseData = {\n  cardiac: ['Chair Marching', 'Leg Extensions', 'Step-Ups'],\n  neuro: ['Balance Training', 'Gait Training', 'Coordination'],\n  ortho: ['Chair Squats'],\n  physio: ['Arm Circles', 'Shoulder Rolls'],\n};\n\nconst ExercisePage = () => {\n  const { type } = useParams();\n  const exercises = exerciseData[type] || [];\n\n  const [selectedExercise, setSelectedExercise] = useState('');\n  const [isScanning, setIsScanning] = useState(false);\n  const [reps, setReps] = useState(0);\n  const [showGraph, setShowGraph] = useState(false);\n  const [chartInstance, setChartInstance] = useState(null);\n  const [scanStartTime, setScanStartTime] = useState(null);\n\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const detectorRef = useRef(null);\n  const requestRef = useRef(null);\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    return () => {\n      stopScan();\n    };\n  }, []);\n\n  const startScan = async () => {\n    if (!selectedExercise) return alert('Please select an exercise!');\n    setIsScanning(true);\n    setReps(0);\n    resetChairSquat();\n    setScanStartTime(Date.now());\n\n    await tf.setBackend('webgl');\n    const detector = await posedetection.createDetector(posedetection.SupportedModels.MoveNet, {\n      modelType: posedetection.movenet.modelType.SINGLEPOSE_LIGHTNING,\n    });\n    detectorRef.current = detector;\n\n    const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n    videoRef.current.srcObject = stream;\n\n    await new Promise(resolve => {\n      videoRef.current.onloadedmetadata = () => {\n        resolve();\n      };\n    });\n\n    detectPose();\n  };\n\n  const stopScan = () => {\n    setIsScanning(false);\n    if (videoRef.current?.srcObject) {\n      videoRef.current.srcObject.getTracks().forEach(track => track.stop());\n    }\n    cancelAnimationFrame(requestRef.current);\n    resetChairSquat();\n    window.speechSynthesis.cancel();\n  };\n\n  const detectPose = async () => {\n    if (!videoRef.current || !canvasRef.current || !detectorRef.current) return;\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    const detect = async () => {\n      if (!isScanning) return;\n\n      const poses = await detectorRef.current.estimatePoses(video);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      poses.forEach(pose => {\n        pose.keypoints.forEach(kp => {\n          if (kp.score > 0.5) {\n            ctx.beginPath();\n            ctx.arc(kp.x, kp.y, 5, 0, 2 * Math.PI);\n            ctx.fillStyle = 'lime';\n            ctx.fill();\n          }\n        });\n\n        if (selectedExercise === 'Chair Squats') {\n          const result = processChairSquat(pose.keypoints);\n          setReps(result.reps);\n          updateChart(result.reps);\n        }\n      });\n\n      requestRef.current = requestAnimationFrame(detect);\n    };\n\n    detect();\n  };\n\n  const updateChart = (repCount) => {\n    const elapsedSeconds = Math.floor((Date.now() - scanStartTime) / 1000);\n\n    if (chartInstance) {\n      chartInstance.data.labels.push(`${elapsedSeconds}s`);\n      chartInstance.data.datasets[0].data.push(repCount);\n      chartInstance.update();\n    }\n  };\n\n  const initChart = () => {\n    const ctx = graphRef.current.getContext('2d');\n    const newChart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: [],\n        datasets: [{\n          label: 'Repetitions',\n          data: [],\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.4,\n        }],\n      },\n    });\n    setChartInstance(newChart);\n  };\n\n  useEffect(() => {\n    if (showGraph && !chartInstance) {\n      initChart();\n    }\n  }, [showGraph]);\n\n  return (\n    <div className=\"exercise-container\">\n      <header className=\"top-bar\">AI-Rehab – {selectedExercise || 'Select Exercise'}</header>\n\n      <div className=\"main-layout\">\n        <aside className=\"left-panel\">\n          {exercises.map(ex => (\n            <button\n              key={ex}\n              className={`exercise-button ${selectedExercise === ex ? 'active' : ''}`}\n              onClick={() => {\n                setSelectedExercise(ex);\n                setShowGraph(false);\n              }}\n            >\n              {ex}\n            </button>\n          ))}\n          <button className=\"exercise-button graph-button\" onClick={() => setShowGraph(true)}>\n            View Graph\n          </button>\n        </aside>\n\n        <main className=\"content-panel\">\n          {showGraph ? (\n            <canvas ref={graphRef} width={640} height={480} />\n          ) : (\n            <div className=\"video-canvas-wrap\">\n              <video ref={videoRef} autoPlay muted className=\"video\" />\n              <canvas ref={canvasRef} className=\"canvas\" />\n            </div>\n          )}\n\n          {!showGraph && (\n            <div className=\"controls\">\n              <button onClick={startScan} className=\"control-btn start\">Start Scan</button>\n              <button onClick={stopScan} className=\"control-btn stop\">Stop Scan</button>\n              <button className=\"control-btn save\" onClick={() => alert('Saved!')}>Save</button>\n              <div className=\"rep-counter\">Reps: {reps}</div>\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default ExercisePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}