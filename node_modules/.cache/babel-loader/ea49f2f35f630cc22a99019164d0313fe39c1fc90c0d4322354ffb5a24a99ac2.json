{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, FusedDepthwiseConv2D, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DVec4Program } from '../depthwise_conv2d_vec4_webgpu';\nimport { DepthwiseConv2DProgram } from '../depthwise_conv2d_webgpu';\nexport function fusedDepthwiseConv2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' + `1. Got strides ${strides} and dilations '${$dilations}'`);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n  const programInputs = [x, filter];\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  const dimensions = [{\n    type: 'int32',\n    data: [convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.inHeight, convInfo.inWidth]\n  }];\n  let program;\n  if (convInfo.outHeight > 4 && convInfo.outWidth > 4 && convInfo.strideWidth <= 2 && convInfo.inChannels === convInfo.outChannels && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.inChannels % 4 === 0) {\n    program = new DepthwiseConv2DVec4Program(convInfo, hasBias, activation, hasPreluActivationWeights);\n    dimensions.push({\n      type: 'int32',\n      data: [program.virtualWidth]\n    });\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo, hasBias, activation, hasPreluActivationWeights);\n    dimensions.push({\n      type: 'int32',\n      data: [convInfo.filterHeight]\n    }, {\n      type: 'int32',\n      data: [convInfo.filterWidth]\n    }, {\n      type: 'int32',\n      data: [convInfo.strideHeight, convInfo.strideWidth]\n    }, {\n      type: 'int32',\n      data: [convInfo.dilationHeight, convInfo.dilationWidth]\n    });\n  }\n  if (activation === 'leakyrelu') {\n    dimensions.push({\n      type: 'float32',\n      data: [leakyreluAlpha]\n    });\n    program.uniforms += ' alpha : f32,';\n  }\n  const result = backend.runWebGPUProgram(program, programInputs, 'float32', dimensions);\n  return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgpu',\n  kernelFunc: fusedDepthwiseConv2D\n};","map":{"version":3,"names":["backend_util","FusedDepthwiseConv2D","util","DepthwiseConv2DVec4Program","DepthwiseConv2DProgram","fusedDepthwiseConv2D","args","inputs","backend","attrs","x","filter","bias","preluActivationWeights","strides","pad","dilations","dimRoundingMode","activation","leakyreluAlpha","$dilations","assert","eitherStridesOrDilationsAreOne","convInfo","computeConv2DInfo","shape","programInputs","hasBias","hasPreluActivationWeights","push","dimensions","type","data","padInfo","top","left","inHeight","inWidth","program","outHeight","outWidth","strideWidth","inChannels","outChannels","dilationHeight","dilationWidth","virtualWidth","filterHeight","filterWidth","strideHeight","uniforms","result","runWebGPUProgram","fusedDepthwiseConv2DConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/FusedDepthwiseConv2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthwiseConv2DVec4Program} from '../depthwise_conv2d_vec4_webgpu';\nimport {DepthwiseConv2DProgram} from '../depthwise_conv2d_webgpu';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n\n  const dimensions = [\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]},\n  ];\n\n  let program: DepthwiseConv2DProgram|DepthwiseConv2DVec4Program;\n  if (convInfo.outHeight > 4 && convInfo.outWidth > 4 &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.inChannels === convInfo.outChannels &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.inChannels % 4 === 0) {\n    program = new DepthwiseConv2DVec4Program(\n        convInfo, hasBias, activation, hasPreluActivationWeights);\n    dimensions.push({type: 'int32', data: [program.virtualWidth]});\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, activation, hasPreluActivationWeights);\n    dimensions.push(\n        {type: 'int32', data: [convInfo.filterHeight]},\n        {type: 'int32', data: [convInfo.filterWidth]},\n        {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n          type: 'int32',\n          data: [convInfo.dilationHeight, convInfo.dilationWidth]\n        });\n  }\n  if (activation === 'leakyrelu') {\n    dimensions.push({type: 'float32', data: [leakyreluAlpha]});\n    program.uniforms += ' alpha : f32,';\n  }\n  const result =\n      backend.runWebGPUProgram(program, programInputs, 'float32', dimensions);\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgpu',\n  kernelFunc: fusedDepthwiseConv2D as unknown as KernelFunc,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}