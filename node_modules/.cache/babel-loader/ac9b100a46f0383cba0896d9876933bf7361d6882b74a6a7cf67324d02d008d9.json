{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherNd, util } from '@tensorflow/tfjs-core';\nimport { GatherNDProgram } from '../gather_nd_webgpu';\nimport { gatherNdImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherNd(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    params,\n    indices\n  } = inputs;\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n  const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(params, indices);\n  const flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [numSlices, sliceRank]\n    }\n  });\n  const flattenX = reshape({\n    inputs: {\n      x: params\n    },\n    backend,\n    attrs: {\n      shape: [util.sizeFromShape(params.shape) / sliceSize, sliceSize]\n    }\n  });\n  if (backend.shouldExecuteOnCPU([params, indices]) || params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId);\n    const paramsBuf = backend.bufferSync(params);\n    const outValue = gatherNdImplCPU(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program = new GatherNDProgram(sliceRank, [numSlices, sliceSize]);\n  const uniformData = [{\n    type: 'int32',\n    data: [sliceRank]\n  }, {\n    type: 'int32',\n    data: strides\n  }];\n  const res = backend.runWebGPUProgram(program, [flattenX, flattenIndices], flattenX.dtype, uniformData);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: resultShape\n    }\n  });\n  backend.disposeData(flattenIndices.dataId);\n  backend.disposeData(flattenX.dataId);\n  backend.disposeData(res.dataId);\n  return reshaped;\n}\nexport const gatherNdConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgpu',\n  kernelFunc: gatherNd\n};","map":{"version":3,"names":["backend_util","GatherNd","util","GatherNDProgram","gatherNdImplCPU","reshape","gatherNd","args","inputs","backend","params","indices","indicesShape","shape","sliceRank","length","paramsSize","sizeFromShape","resultShape","numSlices","sliceSize","strides","prepareAndValidate","flattenIndices","x","attrs","flattenX","shouldExecuteOnCPU","dtype","indicesData","readSync","dataId","paramsBuf","bufferSync","outValue","makeTensorInfo","values","program","uniformData","type","data","res","runWebGPUProgram","reshaped","disposeData","gatherNdConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/GatherNd.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {GatherNDProgram} from '../gather_nd_webgpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program = new GatherNDProgram(sliceRank, [numSlices, sliceSize]);\n  const uniformData =\n      [{type: 'int32', data: [sliceRank]}, {type: 'int32', data: strides}];\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype, uniformData);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeData(flattenIndices.dataId);\n  backend.disposeData(flattenX.dataId);\n  backend.disposeData(res.dataId);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgpu',\n  kernelFunc: gatherNd as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}