{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transform } from '@tensorflow/tfjs-core';\nimport { TransformProgram } from '../transform_webgpu';\nexport function transform(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    image,\n    transforms\n  } = inputs;\n  const {\n    interpolation,\n    fillMode,\n    fillValue,\n    outputShape\n  } = attrs;\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] = outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n  const program = new TransformProgram(outShape);\n  const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n  let fillModeId;\n  switch (fillMode) {\n    case 'constant':\n      fillModeId = 1;\n      break;\n    case 'reflect':\n      fillModeId = 2;\n      break;\n    case 'wrap':\n      fillModeId = 3;\n      break;\n    case 'nearest':\n      fillModeId = 4;\n      break;\n    default:\n      fillModeId = 1;\n      break;\n  }\n  const uniformData = [{\n    type: 'int32',\n    data: [interpolationModeId]\n  }, {\n    type: 'int32',\n    data: [fillModeId]\n  }, {\n    type: 'float32',\n    data: [fillValue]\n  }];\n  return backend.runWebGPUProgram(program, [image, transforms], 'float32', uniformData);\n}\nexport const transformConfig = {\n  kernelName: Transform,\n  backendName: 'webgpu',\n  kernelFunc: transform\n};","map":{"version":3,"names":["Transform","TransformProgram","transform","args","inputs","backend","attrs","image","transforms","interpolation","fillMode","fillValue","outputShape","batch","imageHeight","imageWidth","numChannels","shape","outHeight","outWidth","outShape","program","interpolationModeId","fillModeId","uniformData","type","data","runWebGPUProgram","transformConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/Transform.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {TransformProgram} from '../transform_webgpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: WebGPUBackend,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(outShape);\n  const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n  let fillModeId: number;\n  switch (fillMode) {\n    case 'constant':\n      fillModeId = 1;\n      break;\n    case 'reflect':\n      fillModeId = 2;\n      break;\n    case 'wrap':\n      fillModeId = 3;\n      break;\n    case 'nearest':\n      fillModeId = 4;\n      break;\n    default:\n      fillModeId = 1;\n      break;\n  }\n  const uniformData = [\n    {type: 'int32', data: [interpolationModeId]},\n    {type: 'int32', data: [fillModeId]}, {type: 'float32', data: [fillValue]}\n  ];\n  return backend.runWebGPUProgram(\n      program, [image, transforms], 'float32', uniformData);\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgpu',\n  kernelFunc: transform as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAA8CA,SAAS,QAAwC,uBAAuB;AAGtH,SAAQC,gBAAgB,QAAO,qBAAqB;AAEpD,OAAM,SAAUC,SAASA,CAACC,IAIzB;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,KAAK;IAAEC;EAAU,CAAC,GAAGJ,MAAM;EAClC,MAAM;IAACK,aAAa;IAAEC,QAAQ;IAAEC,SAAS;IAAEC;EAAW,CAAC,GAAGN,KAAK;EAE/D,MAAM,CAACO,KAAK,EAAEC,WAAW,EAAEC,UAAU,EAAEC,WAAW,CAAC,GAAGT,KAAK,CAACU,KAAK;EACjE,MAAM,CAACC,SAAS,EAAEC,QAAQ,CAAC,GACvBP,WAAW,IAAI,IAAI,GAAGA,WAAW,GAAG,CAACE,WAAW,EAAEC,UAAU,CAAC;EACjE,MAAMK,QAAQ,GACV,CAACP,KAAK,EAAEK,SAAS,EAAEC,QAAQ,EAC1BH,WAAW,CAAqC;EAErD,MAAMK,OAAO,GAAG,IAAIpB,gBAAgB,CAACmB,QAAQ,CAAC;EAC9C,MAAME,mBAAmB,GAAGb,aAAa,KAAK,SAAS,GAAG,CAAC,GAAG,CAAC;EAC/D,IAAIc,UAAkB;EACtB,QAAQb,QAAQ;IACd,KAAK,UAAU;MACba,UAAU,GAAG,CAAC;MACd;IACF,KAAK,SAAS;MACZA,UAAU,GAAG,CAAC;MACd;IACF,KAAK,MAAM;MACTA,UAAU,GAAG,CAAC;MACd;IACF,KAAK,SAAS;MACZA,UAAU,GAAG,CAAC;MACd;IACF;MACEA,UAAU,GAAG,CAAC;MACd;;EAEJ,MAAMC,WAAW,GAAG,CAClB;IAACC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACJ,mBAAmB;EAAC,CAAC,EAC5C;IAACG,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACH,UAAU;EAAC,CAAC,EAAE;IAACE,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE,CAACf,SAAS;EAAC,CAAC,CAC1E;EACD,OAAON,OAAO,CAACsB,gBAAgB,CAC3BN,OAAO,EAAE,CAACd,KAAK,EAAEC,UAAU,CAAC,EAAE,SAAS,EAAEgB,WAAW,CAAC;AAC3D;AAEA,OAAO,MAAMI,eAAe,GAAiB;EAC3CC,UAAU,EAAE7B,SAAS;EACrB8B,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAE7B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}