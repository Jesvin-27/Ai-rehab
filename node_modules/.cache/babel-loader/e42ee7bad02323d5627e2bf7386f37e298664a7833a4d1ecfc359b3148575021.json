{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType, getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class GatherNDProgram {\n  constructor(sliceDim, shape) {\n    this.variableNames = ['A', 'indices'];\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `gathernd_${sliceDim}`;\n    this.sliceDim = sliceDim;\n    this.uniforms = `sliceDim : i32, strides : ${getCoordsDataType(sliceDim)},`;\n  }\n  getUserCode() {\n    let strideString;\n    if (this.sliceDim > 1) {\n      strideString = 'uniforms.strides[j]';\n    } else {\n      strideString = 'uniforms.strides';\n    }\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          var flattenIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexTemp = i32(round(getIndices(coords[0], j)));\n            let strideNum = ${strideString};\n            flattenIndex = flattenIndex + indexTemp * strideNum;\n          }\n\n          setOutputAtIndex(index, getA(flattenIndex, coords[1]));\n        }\n      }\n      `;\n    return userCode;\n  }\n}","map":{"version":3,"names":["getCoordsDataType","getMainHeaderString","main","computeDispatch","flatDispatchLayout","GatherNDProgram","constructor","sliceDim","shape","variableNames","workgroupSize","size","outputShape","dispatchLayout","dispatch","shaderKey","uniforms","getUserCode","strideString","userCode"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/gather_nd_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class GatherNDProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[] = ['A', 'indices'];\n  uniforms: string;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  sliceDim: number;\n  constructor(sliceDim: number, shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `gathernd_${sliceDim}`;\n    this.sliceDim = sliceDim;\n    this.uniforms = `sliceDim : i32, strides : ${getCoordsDataType(sliceDim)},`;\n  }\n\n  getUserCode(): string {\n    let strideString;\n    if (this.sliceDim > 1) {\n      strideString = 'uniforms.strides[j]';\n    } else {\n      strideString = 'uniforms.strides';\n    }\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          var flattenIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexTemp = i32(round(getIndices(coords[0], j)));\n            let strideNum = ${strideString};\n            flattenIndex = flattenIndex + indexTemp * strideNum;\n          }\n\n          setOutputAtIndex(index, getA(flattenIndex, coords[1]));\n        }\n      }\n      `;\n    return userCode;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,iBAAiB,EAAEC,mBAAmB,IAAIC,IAAI,QAAsB,kBAAkB;AAC9F,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAEjE,OAAM,MAAOC,eAAe;EAU1BC,YAAYC,QAAgB,EAAEC,KAAe;IAL7C,KAAAC,aAAa,GAAa,CAAC,GAAG,EAAE,SAAS,CAAC;IAE1C,KAAAC,aAAa,GAA6B,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IACpD,KAAAC,IAAI,GAAG,IAAI;IAGT,IAAI,CAACC,WAAW,GAAGJ,KAAK;IACxB,IAAI,CAACK,cAAc,GAAGT,kBAAkB,CAAC,IAAI,CAACQ,WAAW,CAAC;IAC1D,IAAI,CAACE,QAAQ,GAAGX,eAAe,CAC3B,IAAI,CAACU,cAAc,EAAE,IAAI,CAACD,WAAW,EAAE,IAAI,CAACF,aAAa,CAAC;IAC9D,IAAI,CAACK,SAAS,GAAG,YAAYR,QAAQ,EAAE;IACvC,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACS,QAAQ,GAAG,6BAA6BhB,iBAAiB,CAACO,QAAQ,CAAC,GAAG;EAC7E;EAEAU,WAAWA,CAAA;IACT,IAAIC,YAAY;IAChB,IAAI,IAAI,CAACX,QAAQ,GAAG,CAAC,EAAE;MACrBW,YAAY,GAAG,qBAAqB;KACrC,MAAM;MACLA,YAAY,GAAG,kBAAkB;;IAEnC,MAAMC,QAAQ,GAAG;QACbjB,IAAI,CAAC,OAAO,CAAC;;;;;;8BAMSgB,YAAY;;;;;;;OAOnC;IACH,OAAOC,QAAQ;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}