{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class DepthToSpaceProgram {\n  constructor(outputShape, dataFormat) {\n    this.variableNames = ['x'];\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.uniforms = 'blockSize : i32,';\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `depthToSpace_${dataFormat}`;\n    this.dataFormat = dataFormat;\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let h = ${this.getHeightCoordString()};\n          let w = ${this.getWidthCoordString()};\n          let d = ${this.getDepthCoordString()};\n\n          let in_h = h / uniforms.blockSize;\n          let offset_h = h % uniforms.blockSize;\n          let in_w = w / uniforms.blockSize;\n          let offset_w = w % uniforms.blockSize;\n          let offset_d = (offset_h * uniforms.blockSize + offset_w) *\n            ${this.getOutputDepthSize()};\n          let in_d = d + offset_d;\n\n          let rlt = ${this.getInputSamplingString()};\n          setOutputAtIndex(index, rlt);\n        }\n      }`;\n    return userCode;\n  }\n  getHeightCoordString() {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n  getWidthCoordString() {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n  getDepthCoordString() {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n  getOutputDepthSize() {\n    if (this.dataFormat === 'NHWC') {\n      return `uniforms.outShape[3]`;\n    } else {\n      return `uniforms.outShape[1]`;\n    }\n  }\n  getInputSamplingString() {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}","map":{"version":3,"names":["getMainHeaderString","main","computeDispatch","flatDispatchLayout","DepthToSpaceProgram","constructor","outputShape","dataFormat","variableNames","workgroupSize","size","uniforms","dispatchLayout","dispatch","shaderKey","getUserCode","userCode","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/depth_to_space_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DepthToSpaceProgram implements WebGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  dataFormat: string;\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  uniforms = 'blockSize : i32,';\n\n  constructor(outputShape: number[], dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `depthToSpace_${dataFormat}`;\n    this.dataFormat = dataFormat;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let h = ${this.getHeightCoordString()};\n          let w = ${this.getWidthCoordString()};\n          let d = ${this.getDepthCoordString()};\n\n          let in_h = h / uniforms.blockSize;\n          let offset_h = h % uniforms.blockSize;\n          let in_w = w / uniforms.blockSize;\n          let offset_w = w % uniforms.blockSize;\n          let offset_d = (offset_h * uniforms.blockSize + offset_w) *\n            ${this.getOutputDepthSize()};\n          let in_d = d + offset_d;\n\n          let rlt = ${this.getInputSamplingString()};\n          setOutputAtIndex(index, rlt);\n        }\n      }`;\n    return userCode;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `uniforms.outShape[3]`;\n    } else {\n      return `uniforms.outShape[1]`;\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,mBAAmB,IAAIC,IAAI,QAAsB,kBAAkB;AAC3E,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAEjE,OAAM,MAAOC,mBAAmB;EAW9BC,YAAYC,WAAqB,EAAEC,UAAyB;IAV5D,KAAAC,aAAa,GAAG,CAAC,GAAG,CAAC;IAMrB,KAAAC,aAAa,GAA6B,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IACpD,KAAAC,IAAI,GAAG,IAAI;IACX,KAAAC,QAAQ,GAAG,kBAAkB;IAG3B,IAAI,CAACL,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACM,cAAc,GAAGT,kBAAkB,CAAC,IAAI,CAACG,WAAW,CAAC;IAC1D,IAAI,CAACO,QAAQ,GAAGX,eAAe,CAC3B,IAAI,CAACU,cAAc,EAAE,IAAI,CAACN,WAAW,EAAE,IAAI,CAACG,aAAa,CAAC;IAC9D,IAAI,CAACK,SAAS,GAAG,gBAAgBP,UAAU,EAAE;IAC7C,IAAI,CAACA,UAAU,GAAGA,UAAU;EAC9B;EAEAQ,WAAWA,CAAA;IACT,MAAMC,QAAQ,GAAG;QACbf,IAAI,CAAC,OAAO,CAAC;;;;oBAID,IAAI,CAACgB,oBAAoB,EAAE;oBAC3B,IAAI,CAACC,mBAAmB,EAAE;oBAC1B,IAAI,CAACC,mBAAmB,EAAE;;;;;;;cAOhC,IAAI,CAACC,kBAAkB,EAAE;;;sBAGjB,IAAI,CAACC,sBAAsB,EAAE;;;QAG3C;IACJ,OAAOL,QAAQ;EACjB;EAEQC,oBAAoBA,CAAA;IAC1B,IAAI,IAAI,CAACV,UAAU,KAAK,MAAM,EAAE;MAC9B,OAAO,WAAW;KACnB,MAAM;MACL,OAAO,WAAW;;EAEtB;EAEQW,mBAAmBA,CAAA;IACzB,IAAI,IAAI,CAACX,UAAU,KAAK,MAAM,EAAE;MAC9B,OAAO,WAAW;KACnB,MAAM;MACL,OAAO,WAAW;;EAEtB;EAEQY,mBAAmBA,CAAA;IACzB,IAAI,IAAI,CAACZ,UAAU,KAAK,MAAM,EAAE;MAC9B,OAAO,WAAW;KACnB,MAAM;MACL,OAAO,WAAW;;EAEtB;EAEQa,kBAAkBA,CAAA;IACxB,IAAI,IAAI,CAACb,UAAU,KAAK,MAAM,EAAE;MAC9B,OAAO,sBAAsB;KAC9B,MAAM;MACL,OAAO,sBAAsB;;EAEjC;EAEQc,sBAAsBA,CAAA;IAC5B,IAAI,IAAI,CAACd,UAAU,KAAK,MAAM,EAAE;MAC9B,OAAO,2BAA2B;KACnC,MAAM;MACL,OAAO,2BAA2B;;EAEtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}