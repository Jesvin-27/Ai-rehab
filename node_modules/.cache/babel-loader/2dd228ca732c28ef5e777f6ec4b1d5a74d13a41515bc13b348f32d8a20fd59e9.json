{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { RotateWithOffset } from '@tensorflow/tfjs-core';\nimport { RotateProgram } from '../rotate_webgpu';\nexport const rotateWithOffsetConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'webgpu',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      image\n    } = inputs;\n    const {\n      radians,\n      fillValue,\n      center\n    } = attrs;\n    const webgpuBackend = backend;\n    const program = new RotateProgram(image.shape, fillValue);\n    const [centerX, centerY] = backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n    const uniformData = [{\n      type: 'float32',\n      data: [centerX]\n    }, {\n      type: 'float32',\n      data: [centerY]\n    }, {\n      type: 'float32',\n      data: [Math.sin(radians)]\n    }, {\n      type: 'float32',\n      data: [Math.cos(radians)]\n    }];\n    if (typeof fillValue === 'number') {\n      uniformData.push({\n        type: 'float32',\n        data: [Number.parseFloat(fillValue.toFixed(2))]\n      });\n    } else {\n      uniformData.push({\n        type: 'float32',\n        data: fillValue\n      });\n    }\n    const output = webgpuBackend.runWebGPUProgram(program, [image], image.dtype, uniformData);\n    return output;\n  }\n};","map":{"version":3,"names":["backend_util","RotateWithOffset","RotateProgram","rotateWithOffsetConfig","kernelName","backendName","kernelFunc","inputs","attrs","backend","image","radians","fillValue","center","webgpuBackend","program","shape","centerX","centerY","getImageCenter","uniformData","type","data","Math","sin","cos","push","Number","parseFloat","toFixed","output","runWebGPUProgram","dtype"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/RotateWithOffset.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {RotateProgram} from '../rotate_webgpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n    kernelName: RotateWithOffset,\n    backendName: 'webgpu',\n    kernelFunc: ({inputs, attrs, backend}) => {\n      const {image} = inputs as RotateWithOffsetInputs;\n      const {radians, fillValue, center} =\n          attrs as unknown as RotateWithOffsetAttrs;\n      const webgpuBackend = backend as WebGPUBackend;\n\n      const program = new RotateProgram((image as Tensor4D).shape, fillValue);\n      const [centerX, centerY] =\n          backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n      const uniformData = [\n            {type: 'float32', data: [centerX]},\n            {type: 'float32', data: [centerY]},\n            {type: 'float32', data: [Math.sin(radians)]},\n            {type: 'float32', data: [Math.cos(radians)]}\n          ];\n\n      if (typeof fillValue === 'number') {\n        uniformData.push(\n            {type: 'float32', data: [Number.parseFloat(fillValue.toFixed(2))]});\n      } else {\n        uniformData.push({type: 'float32', data: fillValue});\n      }\n\n      const output = webgpuBackend.runWebGPUProgram(\n          program, [image], image.dtype, uniformData);\n      return output;\n   }\n };\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,QAA+B,uBAAuB;AAC1E,SAAQC,gBAAgB,QAAsD,uBAAuB;AAGrG,SAAQC,aAAa,QAAO,kBAAkB;AAE9C,OAAO,MAAMC,sBAAsB,GAAiB;EAChDC,UAAU,EAAEH,gBAAgB;EAC5BI,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAEA,CAAC;IAACC,MAAM;IAAEC,KAAK;IAAEC;EAAO,CAAC,KAAI;IACvC,MAAM;MAACC;IAAK,CAAC,GAAGH,MAAgC;IAChD,MAAM;MAACI,OAAO;MAAEC,SAAS;MAAEC;IAAM,CAAC,GAC9BL,KAAyC;IAC7C,MAAMM,aAAa,GAAGL,OAAwB;IAE9C,MAAMM,OAAO,GAAG,IAAIb,aAAa,CAAEQ,KAAkB,CAACM,KAAK,EAAEJ,SAAS,CAAC;IACvE,MAAM,CAACK,OAAO,EAAEC,OAAO,CAAC,GACpBlB,YAAY,CAACmB,cAAc,CAACN,MAAM,EAAEH,KAAK,CAACM,KAAK,CAAC,CAAC,CAAC,EAAEN,KAAK,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;IACvE,MAAMI,WAAW,GAAG,CACd;MAACC,IAAI,EAAE,SAAS;MAAEC,IAAI,EAAE,CAACL,OAAO;IAAC,CAAC,EAClC;MAACI,IAAI,EAAE,SAAS;MAAEC,IAAI,EAAE,CAACJ,OAAO;IAAC,CAAC,EAClC;MAACG,IAAI,EAAE,SAAS;MAAEC,IAAI,EAAE,CAACC,IAAI,CAACC,GAAG,CAACb,OAAO,CAAC;IAAC,CAAC,EAC5C;MAACU,IAAI,EAAE,SAAS;MAAEC,IAAI,EAAE,CAACC,IAAI,CAACE,GAAG,CAACd,OAAO,CAAC;IAAC,CAAC,CAC7C;IAEL,IAAI,OAAOC,SAAS,KAAK,QAAQ,EAAE;MACjCQ,WAAW,CAACM,IAAI,CACZ;QAACL,IAAI,EAAE,SAAS;QAAEC,IAAI,EAAE,CAACK,MAAM,CAACC,UAAU,CAAChB,SAAS,CAACiB,OAAO,CAAC,CAAC,CAAC,CAAC;MAAC,CAAC,CAAC;KACxE,MAAM;MACLT,WAAW,CAACM,IAAI,CAAC;QAACL,IAAI,EAAE,SAAS;QAAEC,IAAI,EAAEV;MAAS,CAAC,CAAC;;IAGtD,MAAMkB,MAAM,GAAGhB,aAAa,CAACiB,gBAAgB,CACzChB,OAAO,EAAE,CAACL,KAAK,CAAC,EAAEA,KAAK,CAACsB,KAAK,EAAEZ,WAAW,CAAC;IAC/C,OAAOU,MAAM;EAChB;CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}