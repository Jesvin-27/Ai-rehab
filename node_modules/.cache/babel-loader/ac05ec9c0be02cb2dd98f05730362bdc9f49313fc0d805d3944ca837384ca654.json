{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D } from '@tensorflow/tfjs-core';\nimport { Dilation2DProgram } from '../dilation_webgpu';\nexport function dilation2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations\n  } = attrs;\n  const convInfo = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n  const padInfo = [convInfo.padInfo.top, convInfo.padInfo.left];\n  const uniformData = [{\n    type: 'int32',\n    data: [convInfo.filterHeight, convInfo.filterWidth]\n  }, {\n    type: 'int32',\n    data: [...padInfo]\n  }, {\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.dilationHeight, convInfo.dilationWidth]\n  }];\n  const program = new Dilation2DProgram(convInfo);\n  const out = backend.runWebGPUProgram(program, [x, filter], x.dtype, uniformData);\n  return out;\n}\nexport const dilation2DConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgpu',\n  kernelFunc: dilation2D\n};","map":{"version":3,"names":["backend_util","Dilation2D","Dilation2DProgram","dilation2D","args","inputs","backend","attrs","x","filter","strides","pad","dilations","convInfo","computeDilation2DInfo","shape","padInfo","top","left","uniformData","type","data","filterHeight","filterWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","program","out","runWebGPUProgram","dtype","dilation2DConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/Dilation2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Dilation2DProgram} from '../dilation_webgpu';\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: WebGPUBackend\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n  const padInfo = [convInfo.padInfo.top, convInfo.padInfo.left];\n  const uniformData = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [...padInfo]},\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]}\n  ];\n\n  const program = new Dilation2DProgram(convInfo);\n  const out =\n      backend.runWebGPUProgram(program, [x, filter], x.dtype, uniformData);\n\n  return out;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgpu',\n  kernelFunc: dilation2D as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAEC,UAAU,QAAgF,uBAAuB;AAGvI,SAAQC,iBAAiB,QAAO,oBAAoB;AAEpD,OAAM,SAAUC,UAAUA,CAACC,IAI1B;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,CAAC;IAAEC;EAAM,CAAC,GAAGJ,MAAM;EAC1B,MAAM;IAACK,OAAO;IAAEC,GAAG;IAAEC;EAAS,CAAC,GAAGL,KAAK;EAEvC,MAAMM,QAAQ,GAAGb,YAAY,CAACc,qBAAqB,CAC/CN,CAAC,CAACO,KAAyC,EAC3CN,MAAM,CAACM,KAAiC,EAAEL,OAAO,EAAEC,GAAG,EACtD,MAAM,CAAC,kBAAkBC,SAAS,CAAC;EACvC,MAAMI,OAAO,GAAG,CAACH,QAAQ,CAACG,OAAO,CAACC,GAAG,EAAEJ,QAAQ,CAACG,OAAO,CAACE,IAAI,CAAC;EAC7D,MAAMC,WAAW,GAAG,CAClB;IAACC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACR,QAAQ,CAACS,YAAY,EAAET,QAAQ,CAACU,WAAW;EAAC,CAAC,EACpE;IAACH,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAAC,GAAGL,OAAO;EAAC,CAAC,EACnC;IAACI,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACR,QAAQ,CAACW,YAAY,EAAEX,QAAQ,CAACY,WAAW;EAAC,CAAC,EACpE;IAACL,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACR,QAAQ,CAACa,cAAc,EAAEb,QAAQ,CAACc,aAAa;EAAC,CAAC,CACzE;EAED,MAAMC,OAAO,GAAG,IAAI1B,iBAAiB,CAACW,QAAQ,CAAC;EAC/C,MAAMgB,GAAG,GACLvB,OAAO,CAACwB,gBAAgB,CAACF,OAAO,EAAE,CAACpB,CAAC,EAAEC,MAAM,CAAC,EAAED,CAAC,CAACuB,KAAK,EAAEZ,WAAW,CAAC;EAExE,OAAOU,GAAG;AACZ;AAEA,OAAO,MAAMG,gBAAgB,GAAiB;EAC5CC,UAAU,EAAEhC,UAAU;EACtBiC,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAEhC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}