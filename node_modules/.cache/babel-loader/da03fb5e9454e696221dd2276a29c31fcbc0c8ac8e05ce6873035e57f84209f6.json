{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './flags_webgpu';\nimport { env, registerBackend } from '@tensorflow/tfjs-core';\nimport { WebGPUBackend } from './backend_webgpu';\nimport { isWebGPUSupported } from './webgpu_util';\nif (isWebGPUSupported()) {\n  registerBackend('webgpu', async () => {\n    const gpuDescriptor = {\n      powerPreference: env().get('WEBGPU_USE_LOW_POWER_GPU') ? 'low-power' : 'high-performance'\n    };\n    const adapter = await navigator.gpu.requestAdapter(gpuDescriptor);\n    const deviceDescriptor = {};\n    const requiredFeatures = [];\n    if (adapter.features.has('timestamp-query')) {\n      requiredFeatures.push('timestamp-query');\n    }\n    if (adapter.features.has('bgra8unorm-storage')) {\n      requiredFeatures.push(['bgra8unorm-storage']);\n    }\n    deviceDescriptor.requiredFeatures = requiredFeatures;\n    const adapterLimits = adapter.limits;\n    deviceDescriptor.requiredLimits = {\n      'maxComputeWorkgroupStorageSize': adapterLimits.maxComputeWorkgroupStorageSize,\n      'maxComputeWorkgroupsPerDimension': adapterLimits.maxComputeWorkgroupsPerDimension,\n      'maxStorageBufferBindingSize': adapterLimits.maxStorageBufferBindingSize,\n      'maxBufferSize': adapterLimits.maxBufferSize,\n      'maxComputeWorkgroupSizeX': adapterLimits.maxComputeWorkgroupSizeX,\n      'maxComputeInvocationsPerWorkgroup': adapterLimits.maxComputeInvocationsPerWorkgroup\n    };\n    const device = await adapter.requestDevice(deviceDescriptor);\n    const adapterInfo = 'info' in adapter ? adapter.info : 'requestAdapterInfo' in adapter\n    // tslint:disable-next-line:no-any\n    ? await adapter.requestAdapterInfo() : undefined;\n    return new WebGPUBackend(device, adapterInfo);\n  }, 3 /*priority*/);\n}\n// Export webgpu utilities\nexport * from './webgpu';","map":{"version":3,"names":["env","registerBackend","WebGPUBackend","isWebGPUSupported","gpuDescriptor","powerPreference","get","adapter","navigator","gpu","requestAdapter","deviceDescriptor","requiredFeatures","features","has","push","adapterLimits","limits","requiredLimits","maxComputeWorkgroupStorageSize","maxComputeWorkgroupsPerDimension","maxStorageBufferBindingSize","maxBufferSize","maxComputeWorkgroupSizeX","maxComputeInvocationsPerWorkgroup","device","requestDevice","adapterInfo","info","requestAdapterInfo","undefined"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/base.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport './flags_webgpu';\n\nimport {env, registerBackend} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from './backend_webgpu';\nimport {isWebGPUSupported} from './webgpu_util';\n\nif (isWebGPUSupported()) {\n  registerBackend('webgpu', async () => {\n    const gpuDescriptor: GPURequestAdapterOptions = {\n      powerPreference: env().get('WEBGPU_USE_LOW_POWER_GPU') ?\n          'low-power' :\n          'high-performance'\n    };\n\n    const adapter = await navigator.gpu.requestAdapter(gpuDescriptor);\n    const deviceDescriptor: GPUDeviceDescriptor = {};\n\n    const requiredFeatures = [];\n    if (adapter.features.has('timestamp-query')) {\n      requiredFeatures.push('timestamp-query');\n    }\n    if (adapter.features.has('bgra8unorm-storage')) {\n      requiredFeatures.push(['bgra8unorm-storage']);\n    }\n    deviceDescriptor.requiredFeatures =\n        requiredFeatures as Iterable<GPUFeatureName>;\n\n    const adapterLimits = adapter.limits;\n    deviceDescriptor.requiredLimits = {\n      'maxComputeWorkgroupStorageSize':\n          adapterLimits.maxComputeWorkgroupStorageSize,\n      'maxComputeWorkgroupsPerDimension':\n          adapterLimits.maxComputeWorkgroupsPerDimension,\n      'maxStorageBufferBindingSize': adapterLimits.maxStorageBufferBindingSize,\n      'maxBufferSize': adapterLimits.maxBufferSize,\n      'maxComputeWorkgroupSizeX': adapterLimits.maxComputeWorkgroupSizeX,\n      'maxComputeInvocationsPerWorkgroup':\n          adapterLimits.maxComputeInvocationsPerWorkgroup,\n    };\n\n    const device: GPUDevice = await adapter.requestDevice(deviceDescriptor);\n    const adapterInfo =\n      'info' in adapter\n        ? adapter.info\n        : 'requestAdapterInfo' in adapter\n          // tslint:disable-next-line:no-any\n          ? await (adapter as any).requestAdapterInfo()\n          : undefined;\n    return new WebGPUBackend(device, adapterInfo);\n  }, 3 /*priority*/);\n}\n\n// Export webgpu utilities\nexport * from './webgpu';\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,OAAO,gBAAgB;AAEvB,SAAQA,GAAG,EAAEC,eAAe,QAAO,uBAAuB;AAE1D,SAAQC,aAAa,QAAO,kBAAkB;AAC9C,SAAQC,iBAAiB,QAAO,eAAe;AAE/C,IAAIA,iBAAiB,EAAE,EAAE;EACvBF,eAAe,CAAC,QAAQ,EAAE,YAAW;IACnC,MAAMG,aAAa,GAA6B;MAC9CC,eAAe,EAAEL,GAAG,EAAE,CAACM,GAAG,CAAC,0BAA0B,CAAC,GAClD,WAAW,GACX;KACL;IAED,MAAMC,OAAO,GAAG,MAAMC,SAAS,CAACC,GAAG,CAACC,cAAc,CAACN,aAAa,CAAC;IACjE,MAAMO,gBAAgB,GAAwB,EAAE;IAEhD,MAAMC,gBAAgB,GAAG,EAAE;IAC3B,IAAIL,OAAO,CAACM,QAAQ,CAACC,GAAG,CAAC,iBAAiB,CAAC,EAAE;MAC3CF,gBAAgB,CAACG,IAAI,CAAC,iBAAiB,CAAC;;IAE1C,IAAIR,OAAO,CAACM,QAAQ,CAACC,GAAG,CAAC,oBAAoB,CAAC,EAAE;MAC9CF,gBAAgB,CAACG,IAAI,CAAC,CAAC,oBAAoB,CAAC,CAAC;;IAE/CJ,gBAAgB,CAACC,gBAAgB,GAC7BA,gBAA4C;IAEhD,MAAMI,aAAa,GAAGT,OAAO,CAACU,MAAM;IACpCN,gBAAgB,CAACO,cAAc,GAAG;MAChC,gCAAgC,EAC5BF,aAAa,CAACG,8BAA8B;MAChD,kCAAkC,EAC9BH,aAAa,CAACI,gCAAgC;MAClD,6BAA6B,EAAEJ,aAAa,CAACK,2BAA2B;MACxE,eAAe,EAAEL,aAAa,CAACM,aAAa;MAC5C,0BAA0B,EAAEN,aAAa,CAACO,wBAAwB;MAClE,mCAAmC,EAC/BP,aAAa,CAACQ;KACnB;IAED,MAAMC,MAAM,GAAc,MAAMlB,OAAO,CAACmB,aAAa,CAACf,gBAAgB,CAAC;IACvE,MAAMgB,WAAW,GACf,MAAM,IAAIpB,OAAO,GACbA,OAAO,CAACqB,IAAI,GACZ,oBAAoB,IAAIrB;IACxB;IAAA,EACE,MAAOA,OAAe,CAACsB,kBAAkB,EAAE,GAC3CC,SAAS;IACjB,OAAO,IAAI5B,aAAa,CAACuB,MAAM,EAAEE,WAAW,CAAC;EAC/C,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC;;AAGpB;AACA,cAAc,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}