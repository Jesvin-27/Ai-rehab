{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType, getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class MirrorPadProgram {\n  constructor(xShape, paddings, mode) {\n    this.uniforms = '';\n    this.variableNames = ['x'];\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.xShape = xShape;\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.offset = mode === 'reflect' ? 0 : 1;\n    this.shaderKey = `mirrorPad_${mode}`;\n  }\n  getUserCode() {\n    const rank = this.xShape.length;\n    // The length of paddings are same with the rank of the input tensor.\n    const start = this.xShape.map((_, i) => `uniforms.pad${i}[0]`).join(',');\n    const end = this.xShape.map((_, i) => `uniforms.pad${i}[0] + uniforms.xShape${rank > 1 ? `[${i}]` : ''}`).join(',');\n    const shaderStart = rank === 1 ? 'start' : 'start[i]';\n    const shaderEnd = rank === 1 ? 'end' : 'end[i]';\n    const shaderOutC = rank === 1 ? 'outC' : 'outC[i]';\n    const dtype = getCoordsDataType(rank);\n    const unpackedCoords = rank > 1 ? ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank) : 'coords';\n    return `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let start = ${dtype}(${start});\n          let end = ${dtype}(${end});\n          var outC = getCoordsFromIndex(index);\n          for (var i = 0; i < ${rank}; i = i + 1) {\n            if (${shaderOutC} < ${shaderStart}) {\n              ${shaderOutC} = ${shaderStart} * 2 - ${shaderOutC} - ${this.offset};\n            } else if(${shaderOutC} >= ${shaderEnd}) {\n              ${shaderOutC} = (${shaderEnd} - 1) * 2 - ${shaderOutC} + ${this.offset};\n            }\n          }\n          let coords = outC - start;\n          setOutputAtIndex(index, getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}","map":{"version":3,"names":["getCoordsDataType","getMainHeaderString","main","computeDispatch","flatDispatchLayout","MirrorPadProgram","constructor","xShape","paddings","mode","uniforms","variableNames","workgroupSize","size","outputShape","map","p","i","dispatchLayout","dispatch","_","offset","shaderKey","getUserCode","rank","length","start","join","end","shaderStart","shaderEnd","shaderOutC","dtype","unpackedCoords","slice"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/mirror_pad_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class MirrorPadProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  uniforms = '';\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  xShape: number[];\n  offset: number;\n  size = true;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.xShape = xShape;\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.offset = mode === 'reflect' ? 0 : 1;\n    this.shaderKey = `mirrorPad_${mode}`;\n  }\n\n  getUserCode(): string {\n    const rank = this.xShape.length;\n    // The length of paddings are same with the rank of the input tensor.\n    const start = this.xShape.map((_, i) => `uniforms.pad${i}[0]`).join(',');\n    const end = this.xShape\n                    .map(\n                        (_, i) => `uniforms.pad${i}[0] + uniforms.xShape${\n                            rank > 1 ? `[${i}]` : ''}`)\n                    .join(',');\n\n    const shaderStart = rank === 1 ? 'start' : 'start[i]';\n    const shaderEnd = rank === 1 ? 'end' : 'end[i]';\n    const shaderOutC = rank === 1 ? 'outC' : 'outC[i]';\n    const dtype = getCoordsDataType(rank);\n    const unpackedCoords = rank > 1 ?\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank) :\n        'coords';\n\n    return `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let start = ${dtype}(${start});\n          let end = ${dtype}(${end});\n          var outC = getCoordsFromIndex(index);\n          for (var i = 0; i < ${rank}; i = i + 1) {\n            if (${shaderOutC} < ${shaderStart}) {\n              ${shaderOutC} = ${shaderStart} * 2 - ${shaderOutC} - ${\n        this.offset};\n            } else if(${shaderOutC} >= ${shaderEnd}) {\n              ${shaderOutC} = (${shaderEnd} - 1) * 2 - ${shaderOutC} + ${\n        this.offset};\n            }\n          }\n          let coords = outC - start;\n          setOutputAtIndex(index, getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,iBAAiB,EAAEC,mBAAmB,IAAIC,IAAI,QAAsB,kBAAkB;AAC9F,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAEjE,OAAM,MAAOC,gBAAgB;EAY3BC,YACIC,MAAgB,EAAEC,QAAiC,EACnDC,IAA2B;IAX/B,KAAAC,QAAQ,GAAG,EAAE;IAGb,KAAAC,aAAa,GAAG,CAAC,GAAG,CAAC;IACrB,KAAAC,aAAa,GAA6B,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IAGpD,KAAAC,IAAI,GAAG,IAAI;IAKT,IAAI,CAACC,WAAW,GAAGN,QAAQ,CAACO,GAAG,CAC3B,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkBT,MAAM,CAACU,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC;IACrE,IAAI,CAACE,cAAc,GAAGd,kBAAkB,CAAC,IAAI,CAACU,WAAW,CAAC;IAC1D,IAAI,CAACK,QAAQ,GAAGhB,eAAe,CAC3B,IAAI,CAACe,cAAc,EAAE,IAAI,CAACJ,WAAW,EAAE,IAAI,CAACF,aAAa,CAAC;IAE9D,IAAI,CAACL,MAAM,GAAGA,MAAM;IACpBC,QAAQ,CAACO,GAAG,CAAC,CAACK,CAAC,EAAEH,CAAC,KAAI;MACpB,IAAI,CAACP,QAAQ,IAAI,OAAOO,CAAC,eAAe;IAC1C,CAAC,CAAC;IACF,IAAI,CAACI,MAAM,GAAGZ,IAAI,KAAK,SAAS,GAAG,CAAC,GAAG,CAAC;IACxC,IAAI,CAACa,SAAS,GAAG,aAAab,IAAI,EAAE;EACtC;EAEAc,WAAWA,CAAA;IACT,MAAMC,IAAI,GAAG,IAAI,CAACjB,MAAM,CAACkB,MAAM;IAC/B;IACA,MAAMC,KAAK,GAAG,IAAI,CAACnB,MAAM,CAACQ,GAAG,CAAC,CAACK,CAAC,EAAEH,CAAC,KAAK,eAAeA,CAAC,KAAK,CAAC,CAACU,IAAI,CAAC,GAAG,CAAC;IACxE,MAAMC,GAAG,GAAG,IAAI,CAACrB,MAAM,CACNQ,GAAG,CACA,CAACK,CAAC,EAAEH,CAAC,KAAK,eAAeA,CAAC,wBACtBO,IAAI,GAAG,CAAC,GAAG,IAAIP,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,CAClCU,IAAI,CAAC,GAAG,CAAC;IAE1B,MAAME,WAAW,GAAGL,IAAI,KAAK,CAAC,GAAG,OAAO,GAAG,UAAU;IACrD,MAAMM,SAAS,GAAGN,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,QAAQ;IAC/C,MAAMO,UAAU,GAAGP,IAAI,KAAK,CAAC,GAAG,MAAM,GAAG,SAAS;IAClD,MAAMQ,KAAK,GAAGhC,iBAAiB,CAACwB,IAAI,CAAC;IACrC,MAAMS,cAAc,GAAGT,IAAI,GAAG,CAAC,GAC3B,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,CAACU,KAAK,CAAC,CAAC,EAAEV,IAAI,CAAC,GACnE,QAAQ;IAEZ,OAAO;QACHtB,IAAI,CAAC,OAAO,CAAC;;wBAEG8B,KAAK,IAAIN,KAAK;sBAChBM,KAAK,IAAIJ,GAAG;;gCAEFJ,IAAI;kBAClBO,UAAU,MAAMF,WAAW;gBAC7BE,UAAU,MAAMF,WAAW,UAAUE,UAAU,MACvD,IAAI,CAACV,MAAM;wBACKU,UAAU,OAAOD,SAAS;gBAClCC,UAAU,OAAOD,SAAS,eAAeC,UAAU,MAC3D,IAAI,CAACV,MAAM;;;;yCAIsBY,cAAc;;;KAGlD;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}