{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool3DBackpropProgram } from '../max_pool_backprop_webgpu';\nimport { Pool3DProgram } from '../pool_webgpu';\nexport function maxPool3DGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const x = input;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const dilations = [1, 1, 1];\n  const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  const maxPool3dPositionsProgram = new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  let uniformData = [{\n    type: 'int32',\n    data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.inDepth, convInfo.inHeight, convInfo.inWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n  }];\n  const maxPool3dPositions = backend.runWebGPUProgram(maxPool3dPositionsProgram, [x], 'int32', uniformData);\n  const maxPool3dBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  uniformData = [{\n    type: 'int32',\n    data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterDepth - 1 - convInfo.padInfo.front, convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top, convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outDepth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.outWidth]\n  }];\n  const result = backend.runWebGPUProgram(maxPool3dBackpropProgram, [dy, maxPool3dPositions], x.dtype, uniformData);\n  backend.disposeData(maxPool3dPositions.dataId);\n  return result;\n}\nexport const maxPool3DGradConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgpu',\n  kernelFunc: maxPool3DGrad\n};","map":{"version":3,"names":["backend_util","MaxPool3DGrad","MaxPool3DBackpropProgram","Pool3DProgram","maxPool3DGrad","args","inputs","backend","attrs","dy","input","x","filterSize","strides","pad","dimRoundingMode","dilations","convInfo","computePool3DInfo","shape","maxPool3dPositionsProgram","uniformData","type","data","strideDepth","strideHeight","strideWidth","padInfo","front","top","left","inDepth","inHeight","inWidth","effectiveFilterDepth","effectiveFilterHeight","effectiveFilterWidth","maxPool3dPositions","runWebGPUProgram","maxPool3dBackpropProgram","outDepth","outHeight","outWidth","result","dtype","disposeData","dataId","maxPool3DGradConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/MaxPool3DGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {MaxPool3DBackpropProgram} from '../max_pool_backprop_webgpu';\nimport {Pool3DProgram} from '../pool_webgpu';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: WebGPUBackend,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  const maxPool3dPositionsProgram =\n      new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  let uniformData = [\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {\n      type: 'int32',\n      data:\n          [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left]\n    },\n    {\n      type: 'int32',\n      data: [convInfo.inDepth, convInfo.inHeight, convInfo.inWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight,\n        convInfo.effectiveFilterWidth\n      ]\n    }\n  ];\n  const maxPool3dPositions = backend.runWebGPUProgram(\n      maxPool3dPositionsProgram, [x], 'int32', uniformData);\n\n  const maxPool3dBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  uniformData = [\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth - 1 - convInfo.padInfo.front,\n        convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top,\n        convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight,\n        convInfo.effectiveFilterWidth\n      ]\n    },\n    {type: 'int32', data: [convInfo.outDepth]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]}\n  ];\n  const result = backend.runWebGPUProgram(\n      maxPool3dBackpropProgram, [dy, maxPool3dPositions], x.dtype, uniformData);\n  backend.disposeData(maxPool3dPositions.dataId);\n\n  return result;\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgpu',\n  kernelFunc: maxPool3DGrad as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}