{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class FFTProgram {\n  constructor(component, shape) {\n    this.variableNames = ['real', 'imag'];\n    this.outputShape = [];\n    this.uniforms = 'exponentMultiplier : f32, denominator: f32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.component = component;\n    this.shaderKey = `fft_${component}`;\n  }\n  getUserCode() {\n    const opString = this.component === 'real' ? 'return real * expR - imag * expI;' : 'return real * expI + imag * expR;';\n    const userCode = `\n    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {\n      ${opString}\n    }\n\n    fn mulMatDFT(batch: i32, index: i32) -> f32 {\n      let indexRatio = f32(index) / f32(uniforms.realShape[1]);\n      let exponentMultiplierTimesIndexRatio =\n          uniforms.exponentMultiplier * indexRatio;\n\n      var result = 0.0;\n\n      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {\n        // x = (-2|2 * PI / N) * index * i;\n        let x = exponentMultiplierTimesIndexRatio * f32(i);\n        let expR = cos(x);\n        let expI = sin(x);\n        let real = getReal(batch, i);\n        let imag = getImag(batch, i);\n\n        result = result +\n            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;\n      }\n\n      return result;\n    }\n\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));\n      }\n    }\n  `;\n    return userCode;\n  }\n}","map":{"version":3,"names":["getMainHeaderString","main","computeDispatch","flatDispatchLayout","FFTProgram","constructor","component","shape","variableNames","outputShape","uniforms","workgroupSize","size","dispatchLayout","dispatch","shaderKey","getUserCode","opString","userCode"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/fft_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class FFTProgram implements WebGPUProgram {\n  variableNames: string[] = ['real', 'imag'];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = 'exponentMultiplier : f32, denominator: f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  component: string;\n\n  constructor(component: 'real'|'imag', shape: [number, number]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.component = component;\n    this.shaderKey = `fft_${component}`;\n  }\n\n  getUserCode(): string {\n    const opString = this.component === 'real' ?\n        'return real * expR - imag * expI;' :\n        'return real * expI + imag * expR;';\n    const userCode = `\n    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {\n      ${opString}\n    }\n\n    fn mulMatDFT(batch: i32, index: i32) -> f32 {\n      let indexRatio = f32(index) / f32(uniforms.realShape[1]);\n      let exponentMultiplierTimesIndexRatio =\n          uniforms.exponentMultiplier * indexRatio;\n\n      var result = 0.0;\n\n      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {\n        // x = (-2|2 * PI / N) * index * i;\n        let x = exponentMultiplierTimesIndexRatio * f32(i);\n        let expR = cos(x);\n        let expI = sin(x);\n        let real = getReal(batch, i);\n        let imag = getImag(batch, i);\n\n        result = result +\n            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;\n      }\n\n      return result;\n    }\n\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,mBAAmB,IAAIC,IAAI,QAAsB,kBAAkB;AAC3E,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAEjE,OAAM,MAAOC,UAAU;EAWrBC,YAAYC,SAAwB,EAAEC,KAAuB;IAV7D,KAAAC,aAAa,GAAa,CAAC,MAAM,EAAE,MAAM,CAAC;IAC1C,KAAAC,WAAW,GAAa,EAAE;IAI1B,KAAAC,QAAQ,GAAG,6CAA6C;IACxD,KAAAC,aAAa,GAA6B,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IACpD,KAAAC,IAAI,GAAG,IAAI;IAIT,IAAI,CAACH,WAAW,GAAGF,KAAK;IACxB,IAAI,CAACM,cAAc,GAAGV,kBAAkB,CAAC,IAAI,CAACM,WAAW,CAAC;IAC1D,IAAI,CAACK,QAAQ,GAAGZ,eAAe,CAC3B,IAAI,CAACW,cAAc,EAAE,IAAI,CAACJ,WAAW,EAAE,IAAI,CAACE,aAAa,CAAC;IAE9D,IAAI,CAACL,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACS,SAAS,GAAG,OAAOT,SAAS,EAAE;EACrC;EAEAU,WAAWA,CAAA;IACT,MAAMC,QAAQ,GAAG,IAAI,CAACX,SAAS,KAAK,MAAM,GACtC,mCAAmC,GACnC,mCAAmC;IACvC,MAAMY,QAAQ,GAAG;;QAEbD,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;MAyBVhB,IAAI,CAAC,OAAO,CAAC;;;;;;GAMhB;IACC,OAAOiB,QAAQ;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}