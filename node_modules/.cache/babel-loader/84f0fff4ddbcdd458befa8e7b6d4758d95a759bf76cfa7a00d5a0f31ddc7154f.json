{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2DBackpropFilter, util } from '@tensorflow/tfjs-core';\nimport { Dilation2DBackpropFilterProgram } from '../dilation_backprop_webgpu';\nimport { fill } from './Fill';\nexport function dilation2DBackpropFilter(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    dy\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations\n  } = attrs;\n  const convInfo = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n  const dtype = filter.dtype;\n  const program = new Dilation2DBackpropFilterProgram(convInfo, filter.shape, dtype);\n  const uniformData = [{\n    type: 'int32',\n    data: [convInfo.filterHeight, convInfo.filterWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.dilationHeight, convInfo.dilationWidth]\n  }, {\n    type: 'int32',\n    data: [util.sizeFromShape(convInfo.outShape)]\n  }];\n  const output = fill({\n    backend,\n    attrs: {\n      shape: filter.shape,\n      value: 0,\n      dtype\n    }\n  });\n  return backend.runWebGPUProgram(program, [x, filter, dy], dtype, uniformData, output);\n}\nexport const dilation2DBackpropFilterConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'webgpu',\n  kernelFunc: dilation2DBackpropFilter\n};","map":{"version":3,"names":["backend_util","Dilation2DBackpropFilter","util","Dilation2DBackpropFilterProgram","fill","dilation2DBackpropFilter","args","inputs","backend","attrs","x","filter","dy","strides","pad","dilations","convInfo","computeDilation2DInfo","shape","dtype","program","uniformData","type","data","filterHeight","filterWidth","padInfo","top","left","strideHeight","strideWidth","dilationHeight","dilationWidth","sizeFromShape","outShape","output","value","runWebGPUProgram","dilation2DBackpropFilterConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/Dilation2DBackpropFilter.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Dilation2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Dilation2DBackpropFilterProgram} from '../dilation_backprop_webgpu';\nimport {fill} from './Fill';\n\nexport function dilation2DBackpropFilter(args: {\n  inputs: Dilation2DBackpropFilterInputs,\n  attrs: Dilation2DAttrs,\n  backend: WebGPUBackend\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, dy} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n\n  const dtype = filter.dtype;\n  const program =\n      new Dilation2DBackpropFilterProgram(convInfo, filter.shape, dtype);\n  const uniformData = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]},\n    {type: 'int32', data: [util.sizeFromShape(convInfo.outShape)]}\n  ];\n  const output = fill({backend, attrs: {shape: filter.shape, value: 0, dtype}});\n  return backend.runWebGPUProgram(\n      program, [x, filter, dy], dtype, uniformData, output);\n}\n\nexport const dilation2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'webgpu',\n  kernelFunc: dilation2DBackpropFilter as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAmBC,wBAAwB,EAAwEC,IAAI,QAAO,uBAAuB;AAGzK,SAAQC,+BAA+B,QAAO,6BAA6B;AAC3E,SAAQC,IAAI,QAAO,QAAQ;AAE3B,OAAM,SAAUC,wBAAwBA,CAACC,IAIxC;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,CAAC;IAAEC,MAAM;IAAEC;EAAE,CAAC,GAAGL,MAAM;EAC9B,MAAM;IAACM,OAAO;IAAEC,GAAG;IAAEC;EAAS,CAAC,GAAGN,KAAK;EAEvC,MAAMO,QAAQ,GAAGhB,YAAY,CAACiB,qBAAqB,CAC/CP,CAAC,CAACQ,KAAyC,EAC3CP,MAAM,CAACO,KAAiC,EAAEL,OAAO,EAAEC,GAAG,EACtD,MAAM,CAAC,kBAAkBC,SAAS,CAAC;EAEvC,MAAMI,KAAK,GAAGR,MAAM,CAACQ,KAAK;EAC1B,MAAMC,OAAO,GACT,IAAIjB,+BAA+B,CAACa,QAAQ,EAAEL,MAAM,CAACO,KAAK,EAAEC,KAAK,CAAC;EACtE,MAAME,WAAW,GAAG,CAClB;IAACC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACP,QAAQ,CAACQ,YAAY,EAAER,QAAQ,CAACS,WAAW;EAAC,CAAC,EACpE;IAACH,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACP,QAAQ,CAACU,OAAO,CAACC,GAAG,EAAEX,QAAQ,CAACU,OAAO,CAACE,IAAI;EAAC,CAAC,EACpE;IAACN,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACP,QAAQ,CAACa,YAAY,EAAEb,QAAQ,CAACc,WAAW;EAAC,CAAC,EACpE;IAACR,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACP,QAAQ,CAACe,cAAc,EAAEf,QAAQ,CAACgB,aAAa;EAAC,CAAC,EACxE;IAACV,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACrB,IAAI,CAAC+B,aAAa,CAACjB,QAAQ,CAACkB,QAAQ,CAAC;EAAC,CAAC,CAC/D;EACD,MAAMC,MAAM,GAAG/B,IAAI,CAAC;IAACI,OAAO;IAAEC,KAAK,EAAE;MAACS,KAAK,EAAEP,MAAM,CAACO,KAAK;MAAEkB,KAAK,EAAE,CAAC;MAAEjB;IAAK;EAAC,CAAC,CAAC;EAC7E,OAAOX,OAAO,CAAC6B,gBAAgB,CAC3BjB,OAAO,EAAE,CAACV,CAAC,EAAEC,MAAM,EAAEC,EAAE,CAAC,EAAEO,KAAK,EAAEE,WAAW,EAAEc,MAAM,CAAC;AAC3D;AAEA,OAAO,MAAMG,8BAA8B,GAAiB;EAC1DC,UAAU,EAAEtC,wBAAwB;EACpCuC,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAEpC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}