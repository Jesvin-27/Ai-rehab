{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class BufferManager {\n  constructor(device) {\n    this.device = device;\n    this.numUsedBuffers = 0;\n    this.numFreeBuffers = 0;\n    this.freeBuffers = new Map();\n    this.usedBuffers = new Map();\n    this.numBytesUsed = 0;\n    this.numBytesAllocated = 0;\n  }\n  acquireBuffer(size, usage, mappedAtCreation = false, reuse = true) {\n    let buffer;\n    const key = getBufferKey(size, usage);\n    if (reuse) {\n      if (!this.freeBuffers.has(key)) {\n        this.freeBuffers.set(key, []);\n      }\n      if (this.freeBuffers.get(key).length > 0) {\n        buffer = this.freeBuffers.get(key).pop();\n        this.numFreeBuffers--;\n      } else {\n        buffer = this.device.createBuffer({\n          size,\n          usage,\n          mappedAtCreation\n        });\n        this.numBytesAllocated += size;\n      }\n    } else {\n      buffer = this.device.createBuffer({\n        size,\n        usage,\n        mappedAtCreation\n      });\n      this.numBytesAllocated += size;\n    }\n    if (!this.usedBuffers.has(key)) {\n      this.usedBuffers.set(key, []);\n    }\n    this.usedBuffers.get(key).push(buffer);\n    this.numUsedBuffers++;\n    this.numBytesUsed += size;\n    return buffer;\n  }\n  releaseBuffer(buffer, reuse = true) {\n    if (this.freeBuffers.size === 0) {\n      return;\n    }\n    const size = buffer.size;\n    const usage = buffer.usage;\n    const key = getBufferKey(size, usage);\n    const bufferArray = this.usedBuffers.get(key);\n    const index = bufferArray.indexOf(buffer);\n    if (index < 0) {\n      throw new Error('Cannot find the buffer in buffer manager');\n    }\n    bufferArray[index] = bufferArray[bufferArray.length - 1];\n    bufferArray.pop();\n    this.numUsedBuffers--;\n    this.numBytesUsed -= size;\n    if (reuse) {\n      this.freeBuffers.get(key).push(buffer);\n      this.numFreeBuffers++;\n    } else {\n      buffer.destroy();\n      this.numBytesAllocated -= size;\n    }\n  }\n  getNumUsedBuffers() {\n    return this.numUsedBuffers;\n  }\n  getNumFreeBuffers() {\n    return this.numFreeBuffers;\n  }\n  dispose() {\n    this.freeBuffers.forEach((buffers, key) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n    this.usedBuffers.forEach((buffers, key) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n    this.freeBuffers = new Map();\n    this.usedBuffers = new Map();\n    this.numUsedBuffers = 0;\n    this.numFreeBuffers = 0;\n    this.numBytesUsed = 0;\n    this.numBytesAllocated = 0;\n  }\n}\nfunction getBufferKey(size, usage) {\n  return `${size}_${usage}`;\n}","map":{"version":3,"names":["BufferManager","constructor","device","numUsedBuffers","numFreeBuffers","freeBuffers","Map","usedBuffers","numBytesUsed","numBytesAllocated","acquireBuffer","size","usage","mappedAtCreation","reuse","buffer","key","getBufferKey","has","set","get","length","pop","createBuffer","push","releaseBuffer","bufferArray","index","indexOf","Error","destroy","getNumUsedBuffers","getNumFreeBuffers","dispose","forEach","buffers"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/buffer_manager.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport class BufferManager {\n  private numUsedBuffers = 0;\n  private numFreeBuffers = 0;\n  private freeBuffers: Map<string, GPUBuffer[]> = new Map();\n  private usedBuffers: Map<string, GPUBuffer[]> = new Map();\n\n  public numBytesUsed = 0;\n  public numBytesAllocated = 0;\n\n  constructor(private device: GPUDevice) {}\n\n  acquireBuffer(\n      size: number, usage: GPUBufferUsageFlags, mappedAtCreation = false,\n      reuse = true) {\n    let buffer;\n    const key = getBufferKey(size, usage);\n\n    if (reuse) {\n      if (!this.freeBuffers.has(key)) {\n        this.freeBuffers.set(key, []);\n      }\n\n      if (this.freeBuffers.get(key).length > 0) {\n        buffer = this.freeBuffers.get(key).pop();\n        this.numFreeBuffers--;\n      } else {\n        buffer = this.device.createBuffer({size, usage, mappedAtCreation});\n        this.numBytesAllocated += size;\n      }\n    } else {\n      buffer = this.device.createBuffer({size, usage, mappedAtCreation});\n      this.numBytesAllocated += size;\n    }\n\n    if (!this.usedBuffers.has(key)) {\n      this.usedBuffers.set(key, []);\n    }\n    this.usedBuffers.get(key).push(buffer);\n    this.numUsedBuffers++;\n    this.numBytesUsed += size;\n\n    return buffer;\n  }\n\n  releaseBuffer(buffer: GPUBuffer, reuse = true) {\n    if (this.freeBuffers.size === 0) {\n      return;\n    }\n\n    const size = buffer.size;\n    const usage = buffer.usage;\n\n    const key = getBufferKey(size, usage);\n    const bufferArray = this.usedBuffers.get(key);\n    const index = bufferArray.indexOf(buffer);\n    if (index < 0) {\n      throw new Error('Cannot find the buffer in buffer manager');\n    }\n    bufferArray[index] = bufferArray[bufferArray.length - 1];\n    bufferArray.pop();\n    this.numUsedBuffers--;\n    this.numBytesUsed -= size;\n\n    if (reuse) {\n      this.freeBuffers.get(key).push(buffer);\n      this.numFreeBuffers++;\n    } else {\n      buffer.destroy();\n      this.numBytesAllocated -= size;\n    }\n  }\n\n  getNumUsedBuffers(): number {\n    return this.numUsedBuffers;\n  }\n\n  getNumFreeBuffers(): number {\n    return this.numFreeBuffers;\n  }\n\n  dispose() {\n    this.freeBuffers.forEach((buffers, key) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n\n    this.usedBuffers.forEach((buffers, key) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n\n    this.freeBuffers = new Map();\n    this.usedBuffers = new Map();\n    this.numUsedBuffers = 0;\n    this.numFreeBuffers = 0;\n    this.numBytesUsed = 0;\n    this.numBytesAllocated = 0;\n  }\n}\n\nfunction getBufferKey(size: number, usage: GPUBufferUsageFlags) {\n  return `${size}_${usage}`;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}