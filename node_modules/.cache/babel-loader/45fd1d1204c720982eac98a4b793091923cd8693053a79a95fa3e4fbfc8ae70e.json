{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd, util } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_webgpu';\nimport { fill } from './Fill';\nimport { reshape } from './Reshape';\nexport function scatterNd(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    indices,\n    updates\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(updates, indices, shape);\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n  const flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceRank]\n    }\n  });\n  const flattenX = reshape({\n    inputs: {\n      x: updates\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceSize]\n    }\n  });\n  const type = flattenX.dtype;\n  const output = fill({\n    backend,\n    attrs: {\n      shape: flattenShape,\n      value: 0,\n      dtype: type\n    }\n  });\n  const size = util.sizeFromShape(flattenX.shape);\n  const uniformData = [{\n    type: 'int32',\n    data: [sliceRank]\n  }, {\n    type: 'int32',\n    data: strides\n  }, {\n    type: 'int32',\n    data: [size]\n  }];\n  const program = new ScatterProgram(flattenX.shape, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape, type);\n  const res = backend.runWebGPUProgram(program, [flattenX, flattenIndices], type, uniformData, output);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape\n    }\n  });\n  backend.disposeData(flattenIndices.dataId);\n  backend.disposeData(flattenX.dataId);\n  backend.disposeData(res.dataId);\n  return reshaped;\n}\nexport const scatterNdConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgpu',\n  kernelFunc: scatterNd\n};","map":{"version":3,"names":["backend_util","ScatterNd","util","ScatterProgram","fill","reshape","scatterNd","args","inputs","backend","attrs","indices","updates","shape","sliceRank","numUpdates","sliceSize","strides","outputSize","calculateShapes","flattenShape","makeTensorInfo","dtype","flattenIndices","x","flattenX","type","output","value","size","sizeFromShape","uniformData","data","program","length","res","runWebGPUProgram","reshaped","disposeData","dataId","scatterNdConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/ScatterNd.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ScatterProgram} from '../scatter_webgpu';\n\nimport {fill} from './Fill';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: WebGPUBackend,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const type = flattenX.dtype;\n  const output =\n      fill({backend, attrs: {shape: flattenShape, value: 0, dtype: type}});\n  const size = util.sizeFromShape(flattenX.shape);\n  const uniformData = [\n    {type: 'int32', data: [sliceRank]}, {type: 'int32', data: strides},\n    {type: 'int32', data: [size]}\n  ];\n  const program = new ScatterProgram(\n      flattenX.shape, sliceRank, flattenIndices.shape.length,\n      flattenX.shape.length, strides, flattenShape, type);\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndices], type, uniformData, output);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeData(flattenIndices.dataId);\n  backend.disposeData(flattenX.dataId);\n  backend.disposeData(res.dataId);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgpu',\n  kernelFunc: scatterNd as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAA4BC,SAAS,EAA+CC,IAAI,QAAO,uBAAuB;AAG1I,SAAQC,cAAc,QAAO,mBAAmB;AAEhD,SAAQC,IAAI,QAAO,QAAQ;AAC3B,SAAQC,OAAO,QAAO,WAAW;AAEjC,OAAM,SAAUC,SAASA,CAACC,IAIzB;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,OAAO;IAAEC;EAAO,CAAC,GAAGJ,MAAM;EACjC,MAAM;IAACK;EAAK,CAAC,GAAGH,KAAK;EAErB,MAAM;IAACI,SAAS;IAAEC,UAAU;IAAEC,SAAS;IAAEC,OAAO;IAAEC;EAAU,CAAC,GACzDlB,YAAY,CAACmB,eAAe,CAACP,OAAO,EAAED,OAAO,EAAEE,KAAK,CAAC;EAEzD,MAAMO,YAAY,GAAG,CAACF,UAAU,GAAGF,SAAS,EAAEA,SAAS,CAAC;EAExD,IAAIE,UAAU,KAAK,CAAC,EAAE;IACpB,OAAOT,OAAO,CAACY,cAAc,CAACR,KAAK,EAAEF,OAAO,CAACW,KAAK,CAAC;;EAGrD,MAAMC,cAAc,GAAGlB,OAAO,CAC1B;IAACG,MAAM,EAAE;MAACgB,CAAC,EAAEb;IAAO,CAAC;IAAEF,OAAO;IAAEC,KAAK,EAAE;MAACG,KAAK,EAAE,CAACE,UAAU,EAAED,SAAS;IAAC;EAAC,CAAC,CAAC;EAC7E,MAAMW,QAAQ,GAAGpB,OAAO,CACpB;IAACG,MAAM,EAAE;MAACgB,CAAC,EAAEZ;IAAO,CAAC;IAAEH,OAAO;IAAEC,KAAK,EAAE;MAACG,KAAK,EAAE,CAACE,UAAU,EAAEC,SAAS;IAAC;EAAC,CAAC,CAAC;EAE7E,MAAMU,IAAI,GAAGD,QAAQ,CAACH,KAAK;EAC3B,MAAMK,MAAM,GACRvB,IAAI,CAAC;IAACK,OAAO;IAAEC,KAAK,EAAE;MAACG,KAAK,EAAEO,YAAY;MAAEQ,KAAK,EAAE,CAAC;MAAEN,KAAK,EAAEI;IAAI;EAAC,CAAC,CAAC;EACxE,MAAMG,IAAI,GAAG3B,IAAI,CAAC4B,aAAa,CAACL,QAAQ,CAACZ,KAAK,CAAC;EAC/C,MAAMkB,WAAW,GAAG,CAClB;IAACL,IAAI,EAAE,OAAO;IAAEM,IAAI,EAAE,CAAClB,SAAS;EAAC,CAAC,EAAE;IAACY,IAAI,EAAE,OAAO;IAAEM,IAAI,EAAEf;EAAO,CAAC,EAClE;IAACS,IAAI,EAAE,OAAO;IAAEM,IAAI,EAAE,CAACH,IAAI;EAAC,CAAC,CAC9B;EACD,MAAMI,OAAO,GAAG,IAAI9B,cAAc,CAC9BsB,QAAQ,CAACZ,KAAK,EAAEC,SAAS,EAAES,cAAc,CAACV,KAAK,CAACqB,MAAM,EACtDT,QAAQ,CAACZ,KAAK,CAACqB,MAAM,EAAEjB,OAAO,EAAEG,YAAY,EAAEM,IAAI,CAAC;EACvD,MAAMS,GAAG,GAAG1B,OAAO,CAAC2B,gBAAgB,CAChCH,OAAO,EAAE,CAACR,QAAQ,EAAEF,cAAc,CAAC,EAAEG,IAAI,EAAEK,WAAW,EAAEJ,MAAM,CAAC;EAEnE,MAAMU,QAAQ,GAAGhC,OAAO,CAAC;IAACG,MAAM,EAAE;MAACgB,CAAC,EAAEW;IAAG,CAAC;IAAE1B,OAAO;IAAEC,KAAK,EAAE;MAACG;IAAK;EAAC,CAAC,CAAC;EAErEJ,OAAO,CAAC6B,WAAW,CAACf,cAAc,CAACgB,MAAM,CAAC;EAC1C9B,OAAO,CAAC6B,WAAW,CAACb,QAAQ,CAACc,MAAM,CAAC;EACpC9B,OAAO,CAAC6B,WAAW,CAACH,GAAG,CAACI,MAAM,CAAC;EAE/B,OAAOF,QAAQ;AACjB;AAEA,OAAO,MAAMG,eAAe,GAAiB;EAC3CC,UAAU,EAAExC,SAAS;EACrByC,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAErC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}