{"ast":null,"code":"var _jsxFileName = \"/Users/jesvinblazegmail.com/PycharmProjects/Ai-rehab/src/pages/StatsPage.js\",\n  _s = $RefreshSig$();\n// src/pages/StatsPage.js\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { collection, query, where, orderBy, getDocs } from 'firebase/firestore';\nimport { db, auth } from '../firebase';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StatsPage = () => {\n  _s();\n  const {\n    exerciseName\n  } = useParams();\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const user = auth.currentUser;\n      if (!user) return;\n      try {\n        const q = query(collection(db, 'exercise_logs'), where('uid', '==', user.uid), where('exercise', '==', exerciseName), orderBy('timestamp'));\n        const snapshot = await getDocs(q);\n        const data = snapshot.docs.map(doc => ({\n          reps: doc.data().reps,\n          date: doc.data().timestamp.toDate().toLocaleDateString()\n        }));\n        const labels = data.map(entry => entry.date);\n        const reps = data.map(entry => entry.reps);\n        setChartData({\n          labels,\n          datasets: [{\n            label: `${exerciseName} Progress`,\n            data: reps,\n            fill: false,\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }]\n        });\n      } catch (err) {\n        console.error(\"Failed to fetch stats:\", err);\n      }\n    };\n    fetchData();\n  }, [exerciseName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold mb-4\",\n      children: [\"Your Progress: \", exerciseName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), chartData ? /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(StatsPage, \"9WYwy1nfqcb8+Di5g1aCpK2gDNc=\", false, function () {\n  return [useParams];\n});\n_c = StatsPage;\nexport default StatsPage;\nvar _c;\n$RefreshReg$(_c, \"StatsPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","collection","query","where","orderBy","getDocs","db","auth","Line","jsxDEV","_jsxDEV","StatsPage","_s","exerciseName","chartData","setChartData","fetchData","user","currentUser","q","uid","snapshot","data","docs","map","doc","reps","date","timestamp","toDate","toLocaleDateString","labels","entry","datasets","label","fill","borderColor","tension","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/Ai-rehab/src/pages/StatsPage.js"],"sourcesContent":["// src/pages/StatsPage.js\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { collection, query, where, orderBy, getDocs } from 'firebase/firestore';\nimport { db, auth } from '../firebase';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\n\nconst StatsPage = () => {\n  const { exerciseName } = useParams();\n  const [chartData, setChartData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const user = auth.currentUser;\n      if (!user) return;\n\n      try {\n        const q = query(\n          collection(db, 'exercise_logs'),\n          where('uid', '==', user.uid),\n          where('exercise', '==', exerciseName),\n          orderBy('timestamp')\n        );\n\n        const snapshot = await getDocs(q);\n        const data = snapshot.docs.map(doc => ({\n          reps: doc.data().reps,\n          date: doc.data().timestamp.toDate().toLocaleDateString()\n        }));\n\n        const labels = data.map(entry => entry.date);\n        const reps = data.map(entry => entry.reps);\n\n        setChartData({\n          labels,\n          datasets: [\n            {\n              label: `${exerciseName} Progress`,\n              data: reps,\n              fill: false,\n              borderColor: 'rgb(75, 192, 192)',\n              tension: 0.1\n            }\n          ]\n        });\n      } catch (err) {\n        console.error(\"Failed to fetch stats:\", err);\n      }\n    };\n\n    fetchData();\n  }, [exerciseName]);\n\n  return (\n    <div className=\"p-6\">\n      <h2 className=\"text-xl font-semibold mb-4\">Your Progress: {exerciseName}</h2>\n      {chartData ? (\n        <Line data={chartData} />\n      ) : (\n        <p>Loading data...</p>\n      )}\n    </div>\n  );\n};\n\nexport default StatsPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}