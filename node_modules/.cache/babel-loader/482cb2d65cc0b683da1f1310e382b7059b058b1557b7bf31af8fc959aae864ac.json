{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, UnsortedSegmentSum, util } from '@tensorflow/tfjs-core';\nimport { UnsortedSegmentSumProgram } from '../unsorted_segment_sum_webgpu';\nimport { fill } from './Fill';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function unsortedSegmentSum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    segmentIds\n  } = inputs;\n  const {\n    numSegments\n  } = attrs;\n  const xRank = x.shape.length;\n  const toDispose = [];\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n  const outShape = backend_util.segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D = reshape({\n    inputs: {\n      x: permutedX\n    },\n    backend,\n    attrs: {\n      shape: [-1, inSize]\n    }\n  });\n  toDispose.push(a2D);\n  const dtype = x.dtype;\n  const shape = [a2D.shape[0], numSegments];\n  const output = fill({\n    backend,\n    attrs: {\n      shape,\n      value: 0,\n      dtype\n    }\n  });\n  const program = new UnsortedSegmentSumProgram(a2D.shape, shape, dtype);\n  const uniformData = [{\n    type: 'int32',\n    data: [numSegments]\n  }, {\n    type: 'int32',\n    data: [util.sizeFromShape(a2D.shape)]\n  }];\n  const segResult = backend.runWebGPUProgram(program, [a2D, segmentIds], dtype, uniformData, output);\n  const reshaped = reshape({\n    inputs: {\n      x: segResult\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  toDispose.push(segResult);\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        perm\n      }\n    });\n  }\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return result;\n}\nexport const unsortedSegmentSumConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgpu',\n  kernelFunc: unsortedSegmentSum\n};","map":{"version":3,"names":["backend_util","UnsortedSegmentSum","util","UnsortedSegmentSumProgram","fill","reshape","transpose","unsortedSegmentSum","args","inputs","backend","attrs","x","segmentIds","numSegments","xRank","shape","length","toDispose","axis","permutation","getAxesPermutation","permutedX","perm","push","getInnerMostAxes","outShape","segment_util","computeOutShape","inSize","sizeFromShape","a2D","dtype","output","value","program","uniformData","type","data","segResult","runWebGPUProgram","reshaped","result","getUndoAxesPermutation","forEach","t","disposeData","dataId","unsortedSegmentSumConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/UnsortedSegmentSum.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnsortedSegmentSumProgram} from '../unsorted_segment_sum_webgpu';\n\nimport {fill} from './Fill';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: WebGPUBackend,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  const xRank = x.shape.length;\n\n  const toDispose = [];\n\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  const outShape = backend_util.segment_util.computeOutShape(\n      permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  toDispose.push(a2D);\n\n  const dtype = x.dtype;\n  const shape = [a2D.shape[0], numSegments];\n  const output = fill({backend, attrs: {shape, value: 0, dtype}});\n  const program = new UnsortedSegmentSumProgram(a2D.shape, shape, dtype);\n  const uniformData = [\n    {type: 'int32', data: [numSegments]},\n    {type: 'int32', data: [util.sizeFromShape(a2D.shape)]}\n  ];\n  const segResult = backend.runWebGPUProgram(\n      program, [a2D, segmentIds], dtype, uniformData, output);\n\n  const reshaped =\n      reshape({inputs: {x: segResult}, backend, attrs: {shape: outShape}});\n  toDispose.push(segResult);\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({inputs: {x: result}, backend, attrs: {perm}});\n  }\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgpu',\n  kernelFunc: unsortedSegmentSum as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}