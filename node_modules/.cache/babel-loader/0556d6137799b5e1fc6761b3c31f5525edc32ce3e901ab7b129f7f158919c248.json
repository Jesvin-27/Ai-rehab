{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { getBinaryOpString } from './binary_op_util';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class BinaryOpProgram {\n  constructor(op, aShape, bShape) {\n    this.size = true;\n    this.variableNames = ['A', 'B'];\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.op = op;\n    this.useSharedMemoryWithA = aShape.length <= 1 && bShape.length > 1 && aShape[0] < 128;\n    this.useSharedMemoryWithB = bShape.length <= 1 && aShape.length > 1 && bShape[0] < 128;\n    if (this.useSharedMemoryWithA || this.useSharedMemoryWithB) {\n      this.outputComponent = 1;\n      this.variableComponents = [1, 1];\n      // lastDimensionSize is used as sharedBuf array size, so can not be\n      // used as uniform.\n      this.lastDimensionSize = this.useSharedMemoryWithB ? bShape[0] : aShape[0];\n      this.shaderKey = `binary_${op}_${this.lastDimensionSize}`;\n      this.type = 'shared';\n      // This is an experimental value when using shared memory.\n      // Note that the maximum of workgroup X dimension is 256.\n      this.workgroupSize = [256, 1, 1];\n    } else {\n      const aDivisibleBy4 = aShape.length > 0 && aShape[aShape.length - 1] % 4 === 0;\n      const bDivisibleBy4 = bShape.length > 0 && bShape[bShape.length - 1] % 4 === 0;\n      if (aDivisibleBy4 && bDivisibleBy4) {\n        this.outputComponent = 4;\n        this.variableComponents = [4, 4];\n      } else if (aDivisibleBy4 && (util.isScalarShape(bShape) || bShape[bShape.length - 1] === 1) || bDivisibleBy4 && (util.isScalarShape(aShape) || aShape[aShape.length - 1] === 1)) {\n        this.outputComponent = 4;\n        this.variableComponents = aDivisibleBy4 ? [4, 1] : [1, 4];\n      } else {\n        this.outputComponent = 1;\n        this.variableComponents = [1, 1];\n      }\n      this.type = 'nonshared';\n      this.shaderKey = `binary_${op}_${this.variableComponents}`;\n      // TODO(jiajia.qin@intel.com): Heuristically select a good work group\n      // size.\n      this.workgroupSize = [128, 1, 1];\n    }\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.outputComponent, 1, 1]);\n  }\n  getUserCode() {\n    let userCode;\n    const dType = this.outputComponent === 4 ? 'vec4<f32>' : 'f32';\n    const opFnStr = `\n    fn binaryOperation(a : ${dType}, b : ${dType}) -> ${dType} {\n      ${getBinaryOpString(this.op, this.outputComponent === 4)}\n    };\n    `;\n    if (this.type === 'shared') {\n      const sharedIndexSnippet = this.lastDimensionSize > 1 ? `coords[${this.outputShape.length - 1}]` : '0';\n      const accessDataSnippet = this.useSharedMemoryWithB ? `let a = getAByOutputIndex(index);\n          let b = sharedBuf[${sharedIndexSnippet}];` : `let a = sharedBuf[${sharedIndexSnippet}];\n          let b = getBByOutputIndex(index);`;\n      userCode = `\n        ${opFnStr}\n        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;\n        ${main('index')} {\n          // Fill in the shared memory buffer.\n          let localIndex = i32(localId.x);\n          if(localIndex < ${this.lastDimensionSize}) {\n            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB ? 'B' : 'A'}[localIndex]);\n          }\n          workgroupBarrier();\n\n          if(index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            ${accessDataSnippet}\n            setOutputAtIndex(index, binaryOperation(a, b));\n          }\n        }\n        `;\n    } else {\n      userCode = `\n       ${opFnStr}\n       ${main('index')} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index * ${this.outputComponent});\n           let a = ${dType}(getAByOutputCoords(coords));\n           let b = ${dType}(getBByOutputCoords(coords));\n           setOutputAtIndex(index, binaryOperation(a, b));\n         }\n       }\n       `;\n    }\n    return userCode;\n  }\n}","map":{"version":3,"names":["backend_util","util","getBinaryOpString","getMainHeaderString","main","computeDispatch","flatDispatchLayout","BinaryOpProgram","constructor","op","aShape","bShape","size","variableNames","outputShape","assertAndGetBroadcastShape","dispatchLayout","useSharedMemoryWithA","length","useSharedMemoryWithB","outputComponent","variableComponents","lastDimensionSize","shaderKey","type","workgroupSize","aDivisibleBy4","bDivisibleBy4","isScalarShape","dispatch","getUserCode","userCode","dType","opFnStr","sharedIndexSnippet","accessDataSnippet"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/binary_op_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType, getBinaryOpString} from './binary_op_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class BinaryOpProgram implements WebGPUProgram {\n  dispatch: [number, number, number];\n  dispatchLayout: {x: number[]};\n  outputComponent: number;\n  op: BinaryOpType;\n  outputShape: number[];\n  shaderKey: string;\n  size = true;\n  variableNames = ['A', 'B'];\n  workgroupSize: [number, number, number];\n  variableComponents: number[];\n\n  private lastDimensionSize: number;\n  private useSharedMemoryWithA: boolean;\n  private useSharedMemoryWithB: boolean;\n  private type: string;\n\n  constructor(op: BinaryOpType, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.op = op;\n\n    this.useSharedMemoryWithA =\n        aShape.length <= 1 && bShape.length > 1 && aShape[0] < 128;\n    this.useSharedMemoryWithB =\n        bShape.length <= 1 && aShape.length > 1 && bShape[0] < 128;\n\n    if (this.useSharedMemoryWithA || this.useSharedMemoryWithB) {\n      this.outputComponent = 1;\n      this.variableComponents = [1, 1];\n      // lastDimensionSize is used as sharedBuf array size, so can not be\n      // used as uniform.\n      this.lastDimensionSize =\n          this.useSharedMemoryWithB ? bShape[0] : aShape[0];\n      this.shaderKey = `binary_${op}_${this.lastDimensionSize}`;\n      this.type = 'shared';\n      // This is an experimental value when using shared memory.\n      // Note that the maximum of workgroup X dimension is 256.\n      this.workgroupSize = [256, 1, 1];\n    } else {\n      const aDivisibleBy4 =\n          aShape.length > 0 && aShape[aShape.length - 1] % 4 === 0;\n      const bDivisibleBy4 =\n          bShape.length > 0 && bShape[bShape.length - 1] % 4 === 0;\n      if (aDivisibleBy4 && bDivisibleBy4) {\n        this.outputComponent = 4;\n        this.variableComponents = [4, 4];\n      } else if (\n          (aDivisibleBy4 &&\n           (util.isScalarShape(bShape) || bShape[bShape.length - 1] === 1)) ||\n          (bDivisibleBy4 &&\n           (util.isScalarShape(aShape) || aShape[aShape.length - 1] === 1))) {\n        this.outputComponent = 4;\n        this.variableComponents = aDivisibleBy4 ? [4, 1] : [1, 4];\n      } else {\n        this.outputComponent = 1;\n        this.variableComponents = [1, 1];\n      }\n      this.type = 'nonshared';\n      this.shaderKey = `binary_${op}_${this.variableComponents}`;\n      // TODO(jiajia.qin@intel.com): Heuristically select a good work group\n      // size.\n      this.workgroupSize = [128, 1, 1];\n    }\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.outputComponent, 1, 1]);\n  }\n\n  getUserCode(): string {\n    let userCode;\n    const dType = this.outputComponent === 4 ? 'vec4<f32>' : 'f32';\n    const opFnStr = `\n    fn binaryOperation(a : ${dType}, b : ${dType}) -> ${dType} {\n      ${getBinaryOpString(this.op, this.outputComponent === 4)}\n    };\n    `;\n\n    if (this.type === 'shared') {\n      const sharedIndexSnippet = this.lastDimensionSize > 1 ?\n          `coords[${this.outputShape.length - 1}]` :\n          '0';\n      const accessDataSnippet = this.useSharedMemoryWithB ?\n          `let a = getAByOutputIndex(index);\n          let b = sharedBuf[${sharedIndexSnippet}];` :\n          `let a = sharedBuf[${sharedIndexSnippet}];\n          let b = getBByOutputIndex(index);`;\n      userCode = `\n        ${opFnStr}\n        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;\n        ${main('index')} {\n          // Fill in the shared memory buffer.\n          let localIndex = i32(localId.x);\n          if(localIndex < ${this.lastDimensionSize}) {\n            sharedBuf[localIndex] = f32(${\n          this.useSharedMemoryWithB ? 'B' : 'A'}[localIndex]);\n          }\n          workgroupBarrier();\n\n          if(index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            ${accessDataSnippet}\n            setOutputAtIndex(index, binaryOperation(a, b));\n          }\n        }\n        `;\n    } else {\n      userCode = `\n       ${opFnStr}\n       ${main('index')} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index * ${this.outputComponent});\n           let a = ${dType}(getAByOutputCoords(coords));\n           let b = ${dType}(getBByOutputCoords(coords));\n           setOutputAtIndex(index, binaryOperation(a, b));\n         }\n       }\n       `;\n    }\n\n    return userCode;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAEC,IAAI,QAAO,uBAAuB;AAExD,SAAsBC,iBAAiB,QAAO,kBAAkB;AAChE,SAAQC,mBAAmB,IAAIC,IAAI,QAAsB,kBAAkB;AAC3E,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAEjE,OAAM,MAAOC,eAAe;EAiB1BC,YAAYC,EAAgB,EAAEC,MAAgB,EAAEC,MAAgB;IAVhE,KAAAC,IAAI,GAAG,IAAI;IACX,KAAAC,aAAa,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;IAUxB,IAAI,CAACC,WAAW,GAAGd,YAAY,CAACe,0BAA0B,CAACL,MAAM,EAAEC,MAAM,CAAC;IAC1E,IAAI,CAACK,cAAc,GAAGV,kBAAkB,CAAC,IAAI,CAACQ,WAAW,CAAC;IAC1D,IAAI,CAACL,EAAE,GAAGA,EAAE;IAEZ,IAAI,CAACQ,oBAAoB,GACrBP,MAAM,CAACQ,MAAM,IAAI,CAAC,IAAIP,MAAM,CAACO,MAAM,GAAG,CAAC,IAAIR,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG;IAC9D,IAAI,CAACS,oBAAoB,GACrBR,MAAM,CAACO,MAAM,IAAI,CAAC,IAAIR,MAAM,CAACQ,MAAM,GAAG,CAAC,IAAIP,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG;IAE9D,IAAI,IAAI,CAACM,oBAAoB,IAAI,IAAI,CAACE,oBAAoB,EAAE;MAC1D,IAAI,CAACC,eAAe,GAAG,CAAC;MACxB,IAAI,CAACC,kBAAkB,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;MAChC;MACA;MACA,IAAI,CAACC,iBAAiB,GAClB,IAAI,CAACH,oBAAoB,GAAGR,MAAM,CAAC,CAAC,CAAC,GAAGD,MAAM,CAAC,CAAC,CAAC;MACrD,IAAI,CAACa,SAAS,GAAG,UAAUd,EAAE,IAAI,IAAI,CAACa,iBAAiB,EAAE;MACzD,IAAI,CAACE,IAAI,GAAG,QAAQ;MACpB;MACA;MACA,IAAI,CAACC,aAAa,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;KACjC,MAAM;MACL,MAAMC,aAAa,GACfhB,MAAM,CAACQ,MAAM,GAAG,CAAC,IAAIR,MAAM,CAACA,MAAM,CAACQ,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC;MAC5D,MAAMS,aAAa,GACfhB,MAAM,CAACO,MAAM,GAAG,CAAC,IAAIP,MAAM,CAACA,MAAM,CAACO,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC;MAC5D,IAAIQ,aAAa,IAAIC,aAAa,EAAE;QAClC,IAAI,CAACP,eAAe,GAAG,CAAC;QACxB,IAAI,CAACC,kBAAkB,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;OACjC,MAAM,IACFK,aAAa,KACZzB,IAAI,CAAC2B,aAAa,CAACjB,MAAM,CAAC,IAAIA,MAAM,CAACA,MAAM,CAACO,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,IAC/DS,aAAa,KACZ1B,IAAI,CAAC2B,aAAa,CAAClB,MAAM,CAAC,IAAIA,MAAM,CAACA,MAAM,CAACQ,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,CAAE,EAAE;QACrE,IAAI,CAACE,eAAe,GAAG,CAAC;QACxB,IAAI,CAACC,kBAAkB,GAAGK,aAAa,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;OAC1D,MAAM;QACL,IAAI,CAACN,eAAe,GAAG,CAAC;QACxB,IAAI,CAACC,kBAAkB,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;;MAElC,IAAI,CAACG,IAAI,GAAG,WAAW;MACvB,IAAI,CAACD,SAAS,GAAG,UAAUd,EAAE,IAAI,IAAI,CAACY,kBAAkB,EAAE;MAC1D;MACA;MACA,IAAI,CAACI,aAAa,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;;IAElC,IAAI,CAACI,QAAQ,GAAGxB,eAAe,CAC3B,IAAI,CAACW,cAAc,EAAE,IAAI,CAACF,WAAW,EAAE,IAAI,CAACW,aAAa,EACzD,CAAC,IAAI,CAACL,eAAe,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACnC;EAEAU,WAAWA,CAAA;IACT,IAAIC,QAAQ;IACZ,MAAMC,KAAK,GAAG,IAAI,CAACZ,eAAe,KAAK,CAAC,GAAG,WAAW,GAAG,KAAK;IAC9D,MAAMa,OAAO,GAAG;6BACSD,KAAK,SAASA,KAAK,QAAQA,KAAK;QACrD9B,iBAAiB,CAAC,IAAI,CAACO,EAAE,EAAE,IAAI,CAACW,eAAe,KAAK,CAAC,CAAC;;KAEzD;IAED,IAAI,IAAI,CAACI,IAAI,KAAK,QAAQ,EAAE;MAC1B,MAAMU,kBAAkB,GAAG,IAAI,CAACZ,iBAAiB,GAAG,CAAC,GACjD,UAAU,IAAI,CAACR,WAAW,CAACI,MAAM,GAAG,CAAC,GAAG,GACxC,GAAG;MACP,MAAMiB,iBAAiB,GAAG,IAAI,CAAChB,oBAAoB,GAC/C;8BACoBe,kBAAkB,IAAI,GAC1C,qBAAqBA,kBAAkB;4CACL;MACtCH,QAAQ,GAAG;UACPE,OAAO;gDAC+B,IAAI,CAACX,iBAAiB;UAC5DlB,IAAI,CAAC,OAAO,CAAC;;;4BAGK,IAAI,CAACkB,iBAAiB;0CAExC,IAAI,CAACH,oBAAoB,GAAG,GAAG,GAAG,GAAG;;;;;;cAMjCgB,iBAAiB;;;;SAItB;KACJ,MAAM;MACLJ,QAAQ,GAAG;SACRE,OAAO;SACP7B,IAAI,CAAC,OAAO,CAAC;;qDAE+B,IAAI,CAACgB,eAAe;qBACpDY,KAAK;qBACLA,KAAK;;;;QAIlB;;IAGJ,OAAOD,QAAQ;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}