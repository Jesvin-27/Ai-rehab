{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3DGrad, backend_util } from '@tensorflow/tfjs-core';\nimport { AvgPool3DBackpropProgram } from '../avg_pool_backprop_webgpu';\nexport function avgPool3DGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const x = input;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n  const program = new AvgPool3DBackpropProgram(convInfo);\n  const avgMultiplier = 1 / (convInfo.filterDepth * convInfo.filterHeight * convInfo.filterWidth);\n  const uniformData = [{\n    type: 'int32',\n    data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterDepth - 1 - convInfo.padInfo.front, convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top, convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outDepth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.outWidth]\n  }, {\n    type: 'float32',\n    data: [avgMultiplier]\n  }];\n  return backend.runWebGPUProgram(program, [dy], x.dtype, uniformData);\n}\nexport const avgPool3DGradConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgpu',\n  kernelFunc: avgPool3DGrad\n};","map":{"version":3,"names":["AvgPool3DGrad","backend_util","AvgPool3DBackpropProgram","avgPool3DGrad","args","inputs","backend","attrs","dy","input","x","filterSize","strides","pad","dimRoundingMode","convInfo","computePool3DInfo","shape","program","avgMultiplier","filterDepth","filterHeight","filterWidth","uniformData","type","data","strideDepth","strideHeight","strideWidth","effectiveFilterDepth","padInfo","front","effectiveFilterHeight","top","effectiveFilterWidth","left","outDepth","outHeight","outWidth","runWebGPUProgram","dtype","avgPool3DGradConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/AvgPool3DGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool3DBackpropProgram} from '../avg_pool_backprop_webgpu';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: WebGPUBackend,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const program = new AvgPool3DBackpropProgram(convInfo);\n  const avgMultiplier =\n      1 / (convInfo.filterDepth * convInfo.filterHeight * convInfo.filterWidth);\n  const uniformData = [\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth - 1 - convInfo.padInfo.front,\n        convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top,\n        convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight,\n        convInfo.effectiveFilterWidth\n      ]\n    },\n    {type: 'int32', data: [convInfo.outDepth]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'float32', data: [avgMultiplier]}\n  ];\n  return backend.runWebGPUProgram(program, [dy], x.dtype, uniformData);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgpu',\n  kernelFunc: avgPool3DGrad as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,aAAa,EAA2CC,YAAY,QAA6C,uBAAuB;AAEhJ,SAAQC,wBAAwB,QAAO,6BAA6B;AAGpE,OAAM,SAAUC,aAAaA,CAACC,IAI7B;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,EAAE;IAAEC;EAAK,CAAC,GAAGJ,MAAM;EAC1B,MAAMK,CAAC,GAAGD,KAAK;EACf,MAAM;IAACE,UAAU;IAAEC,OAAO;IAAEC,GAAG;IAAEC;EAAe,CAAC,GAAGP,KAAK;EAEzD,MAAMQ,QAAQ,GAAGd,YAAY,CAACe,iBAAiB,CAC3CN,CAAC,CAACO,KAAiD,EAAEN,UAAU,EAAEC,OAAO,EACxE,CAAC,CAAC,iBAAiBC,GAAG,EAAEC,eAAe,CAAC;EAC5C,MAAMI,OAAO,GAAG,IAAIhB,wBAAwB,CAACa,QAAQ,CAAC;EACtD,MAAMI,aAAa,GACf,CAAC,IAAIJ,QAAQ,CAACK,WAAW,GAAGL,QAAQ,CAACM,YAAY,GAAGN,QAAQ,CAACO,WAAW,CAAC;EAC7E,MAAMC,WAAW,GAAG,CAClB;IACEC,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,CAACV,QAAQ,CAACW,WAAW,EAAEX,QAAQ,CAACY,YAAY,EAAEZ,QAAQ,CAACa,WAAW;GACzE,EACD;IACEJ,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,CACJV,QAAQ,CAACc,oBAAoB,GAAG,CAAC,GAAGd,QAAQ,CAACe,OAAO,CAACC,KAAK,EAC1DhB,QAAQ,CAACiB,qBAAqB,GAAG,CAAC,GAAGjB,QAAQ,CAACe,OAAO,CAACG,GAAG,EACzDlB,QAAQ,CAACmB,oBAAoB,GAAG,CAAC,GAAGnB,QAAQ,CAACe,OAAO,CAACK,IAAI;GAE5D,EACD;IACEX,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,CACJV,QAAQ,CAACc,oBAAoB,EAAEd,QAAQ,CAACiB,qBAAqB,EAC7DjB,QAAQ,CAACmB,oBAAoB;GAEhC,EACD;IAACV,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACV,QAAQ,CAACqB,QAAQ;EAAC,CAAC,EAC1C;IAACZ,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACV,QAAQ,CAACsB,SAAS;EAAC,CAAC,EAC3C;IAACb,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACV,QAAQ,CAACuB,QAAQ;EAAC,CAAC,EAC1C;IAACd,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE,CAACN,aAAa;EAAC,CAAC,CACzC;EACD,OAAOb,OAAO,CAACiC,gBAAgB,CAACrB,OAAO,EAAE,CAACV,EAAE,CAAC,EAAEE,CAAC,CAAC8B,KAAK,EAAEjB,WAAW,CAAC;AACtE;AAEA,OAAO,MAAMkB,mBAAmB,GAAiB;EAC/CC,UAAU,EAAE1C,aAAa;EACzB2C,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAEzC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}