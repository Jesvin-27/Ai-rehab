{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { activationFnSnippet, biasActivationSnippet } from './activation_util';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class DepthwiseConv2DVec4Program {\n  constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false) {\n    this.variableNames = ['x', 'W'];\n    this.uniforms = 'pads : vec2<i32>, inDims : vec2<i32>, virtualWidth : i32,';\n    this.workgroupSize = [64, 1, 1];\n    this.workPerThread = 4;\n    this.outputComponent = 4;\n    this.outputShape = convInfo.outShape;\n    this.virtualWidth = Math.ceil(this.outputShape[2] / this.workPerThread) * this.workPerThread;\n    const virtualOutputShape = [this.outputShape[0], this.outputShape[1], this.virtualWidth, this.outputShape[3]];\n    this.dispatchLayout = flatDispatchLayout(virtualOutputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, virtualOutputShape, this.workgroupSize, [this.outputComponent * this.workPerThread, 1, 1]);\n    util.assert(convInfo.dataFormat === 'channelsLast', () => 'TODO: NCHW is unimplemented');\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    this.convInfo = convInfo;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n    this.shaderKey = `depthwiseVec4_${activation}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${this.convInfo.strideWidth}_${this.workPerThread}`;\n  }\n  getUserCode() {\n    const xNumber = (this.workPerThread - 1) * this.convInfo.strideWidth + this.convInfo.filterWidth;\n    const strideHeight = this.convInfo.strideHeight;\n    const strideWidth = this.convInfo.strideWidth;\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivation, true, 4)}\n      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {\n        var value = vec4<f32>(0.0);\n        if (col >=0 && col < uniforms.inDims[1]) {\n          value = getX(batch, row, col, channel);\n        }\n        return value;\n      }\n\n      ${main('index')} {\n        let width0 = uniforms.outShape[3] / ${this.outputComponent};\n        let d1 = (index % width0) * ${this.outputComponent};\n        var index1 = index / width0;\n        let width1 = uniforms.virtualWidth / ${this.workPerThread};\n        let c = (index1 % width1) * ${this.workPerThread};\n        index1 = index1 / width1;\n        let r = index1 % uniforms.outShape[1];\n        let batch = index1 / uniforms.outShape[1];\n\n        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${strideHeight}, ${strideWidth}) - uniforms.pads;\n\n        let xRCorner = xRCCorner.x;\n        let xCCorner = xRCCorner.y;\n        var xVals : array<vec4<f32>, ${xNumber}>;\n        var dotProd : array<vec4<f32>, ${this.workPerThread}>;\n        for (var i = 0; i < ${this.workPerThread}; i++) {\n          dotProd[i] = vec4<f32>(0.0);\n        }\n\n        // Use constant instead of uniform can give better performance.\n        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {\n          let xR = xRCorner + wR;\n          if (xR >=0 && xR < uniforms.inDims[0]) {\n            for (var i = 0; i < ${xNumber}; i++) {\n              xVals[i] = readX(batch, xR, xCCorner + i, d1);\n            }\n            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {\n              let wValue = getW(wR, wC, d1, 0);\n              for (var i = 0; i < ${this.workPerThread}; i++) {\n                dotProd[i] = fma(xVals[i * ${strideWidth} + wC], wValue, dotProd[i]);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let coords = vec4<i32>(batch, r, c + i, d1);\n          if (coordsInBounds4D(coords, uniforms.outShape)) {\n            var value = dotProd[i];\n            ${biasActivationSnippet(this.addBias, this.activation)}\n            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}","map":{"version":3,"names":["util","activationFnSnippet","biasActivationSnippet","getMainHeaderString","main","computeDispatch","flatDispatchLayout","DepthwiseConv2DVec4Program","constructor","convInfo","addBias","activation","hasPreluActivation","variableNames","uniforms","workgroupSize","workPerThread","outputComponent","outputShape","outShape","virtualWidth","Math","ceil","virtualOutputShape","dispatchLayout","dispatch","assert","dataFormat","push","shaderKey","filterHeight","filterWidth","strideHeight","strideWidth","getUserCode","xNumber","userCode"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/depthwise_conv2d_vec4_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DepthwiseConv2DVec4Program implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms = 'pads : vec2<i32>, inDims : vec2<i32>, virtualWidth : i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  workPerThread = 4;\n  convInfo: backend_util.Conv2DInfo;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivation: boolean;\n  outputComponent = 4;\n  virtualWidth: number;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: backend_util.Activation = null, hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n    this.virtualWidth = Math.ceil(this.outputShape[2] / this.workPerThread) *\n        this.workPerThread;\n    const virtualOutputShape = [\n      this.outputShape[0], this.outputShape[1], this.virtualWidth,\n      this.outputShape[3]\n    ];\n    this.dispatchLayout = flatDispatchLayout(virtualOutputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, virtualOutputShape, this.workgroupSize,\n        [this.outputComponent * this.workPerThread, 1, 1]);\n\n    util.assert(\n        convInfo.dataFormat === 'channelsLast',\n        () => 'TODO: NCHW is unimplemented');\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.convInfo = convInfo;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n\n    this.shaderKey =\n        `depthwiseVec4_${activation}_${this.convInfo.filterHeight}_${\n            this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${\n            this.convInfo.strideWidth}_${this.workPerThread}`;\n  }\n\n  getUserCode(): string {\n    const xNumber = (this.workPerThread - 1) * this.convInfo.strideWidth +\n        this.convInfo.filterWidth;\n    const strideHeight = this.convInfo.strideHeight;\n    const strideWidth = this.convInfo.strideWidth;\n\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivation, true, 4)}\n      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {\n        var value = vec4<f32>(0.0);\n        if (col >=0 && col < uniforms.inDims[1]) {\n          value = getX(batch, row, col, channel);\n        }\n        return value;\n      }\n\n      ${main('index')} {\n        let width0 = uniforms.outShape[3] / ${this.outputComponent};\n        let d1 = (index % width0) * ${this.outputComponent};\n        var index1 = index / width0;\n        let width1 = uniforms.virtualWidth / ${this.workPerThread};\n        let c = (index1 % width1) * ${this.workPerThread};\n        index1 = index1 / width1;\n        let r = index1 % uniforms.outShape[1];\n        let batch = index1 / uniforms.outShape[1];\n\n        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${strideHeight}, ${\n        strideWidth}) - uniforms.pads;\n\n        let xRCorner = xRCCorner.x;\n        let xCCorner = xRCCorner.y;\n        var xVals : array<vec4<f32>, ${xNumber}>;\n        var dotProd : array<vec4<f32>, ${this.workPerThread}>;\n        for (var i = 0; i < ${this.workPerThread}; i++) {\n          dotProd[i] = vec4<f32>(0.0);\n        }\n\n        // Use constant instead of uniform can give better performance.\n        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {\n          let xR = xRCorner + wR;\n          if (xR >=0 && xR < uniforms.inDims[0]) {\n            for (var i = 0; i < ${xNumber}; i++) {\n              xVals[i] = readX(batch, xR, xCCorner + i, d1);\n            }\n            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {\n              let wValue = getW(wR, wC, d1, 0);\n              for (var i = 0; i < ${this.workPerThread}; i++) {\n                dotProd[i] = fma(xVals[i * ${\n        strideWidth} + wC], wValue, dotProd[i]);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let coords = vec4<i32>(batch, r, c + i, d1);\n          if (coordsInBounds4D(coords, uniforms.outShape)) {\n            var value = dotProd[i];\n            ${biasActivationSnippet(this.addBias, this.activation)}\n            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}