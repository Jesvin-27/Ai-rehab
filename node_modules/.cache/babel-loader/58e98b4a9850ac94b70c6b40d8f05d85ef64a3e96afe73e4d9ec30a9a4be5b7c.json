{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OneHot, util } from '@tensorflow/tfjs-core';\nimport { OneHotProgram } from '../onehot_webgpu';\nimport { reshape } from './Reshape';\nexport function oneHot(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    indices\n  } = inputs;\n  const {\n    dtype,\n    depth,\n    onValue,\n    offValue\n  } = attrs;\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth);\n  const reshaped = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [indicesSize]\n    }\n  });\n  const uniformData = [{\n    type: 'float32',\n    data: [onValue]\n  }, {\n    type: 'float32',\n    data: [offValue]\n  }];\n  const result = backend.runWebGPUProgram(program, [reshaped], dtype, uniformData);\n  backend.disposeData(reshaped.dataId);\n  const outShape = [...indices.shape, depth];\n  const out = reshape({\n    inputs: {\n      x: result\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  backend.disposeData(result.dataId);\n  return out;\n}\nexport const oneHotConfig = {\n  kernelName: OneHot,\n  backendName: 'webgpu',\n  kernelFunc: oneHot\n};","map":{"version":3,"names":["OneHot","util","OneHotProgram","reshape","oneHot","args","inputs","backend","attrs","indices","dtype","depth","onValue","offValue","indicesSize","sizeFromShape","shape","program","reshaped","x","uniformData","type","data","result","runWebGPUProgram","disposeData","dataId","outShape","out","oneHotConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/OneHot.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {OneHotProgram} from '../onehot_webgpu';\nimport {reshape} from './Reshape';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: WebGPUBackend, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {dtype, depth, onValue, offValue} = attrs;\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth);\n  const reshaped =\n      reshape({inputs: {x: indices}, backend, attrs: {shape: [indicesSize]}});\n\n  const uniformData =\n      [{type: 'float32', data: [onValue]}, {type: 'float32', data: [offValue]}];\n  const result =\n      backend.runWebGPUProgram(program, [reshaped], dtype, uniformData);\n  backend.disposeData(reshaped.dataId);\n\n  const outShape = [...indices.shape, depth];\n  const out = reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n  backend.disposeData(result.dataId);\n\n  return out;\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'webgpu',\n  kernelFunc: oneHot as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,MAAM,EAAyCC,IAAI,QAAO,uBAAuB;AAGnH,SAAQC,aAAa,QAAO,kBAAkB;AAC9C,SAAQC,OAAO,QAAO,WAAW;AAEjC,OAAM,SAAUC,MAAMA,CAClBC,IAAwE;EAE1E,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAO,CAAC,GAAGH,MAAM;EACxB,MAAM;IAACI,KAAK;IAAEC,KAAK;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGL,KAAK;EAE/C,MAAMM,WAAW,GAAGb,IAAI,CAACc,aAAa,CAACN,OAAO,CAACO,KAAK,CAAC;EACrD,MAAMC,OAAO,GAAG,IAAIf,aAAa,CAACY,WAAW,EAAEH,KAAK,CAAC;EACrD,MAAMO,QAAQ,GACVf,OAAO,CAAC;IAACG,MAAM,EAAE;MAACa,CAAC,EAAEV;IAAO,CAAC;IAAEF,OAAO;IAAEC,KAAK,EAAE;MAACQ,KAAK,EAAE,CAACF,WAAW;IAAC;EAAC,CAAC,CAAC;EAE3E,MAAMM,WAAW,GACb,CAAC;IAACC,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE,CAACV,OAAO;EAAC,CAAC,EAAE;IAACS,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE,CAACT,QAAQ;EAAC,CAAC,CAAC;EAC7E,MAAMU,MAAM,GACRhB,OAAO,CAACiB,gBAAgB,CAACP,OAAO,EAAE,CAACC,QAAQ,CAAC,EAAER,KAAK,EAAEU,WAAW,CAAC;EACrEb,OAAO,CAACkB,WAAW,CAACP,QAAQ,CAACQ,MAAM,CAAC;EAEpC,MAAMC,QAAQ,GAAG,CAAC,GAAGlB,OAAO,CAACO,KAAK,EAAEL,KAAK,CAAC;EAC1C,MAAMiB,GAAG,GAAGzB,OAAO,CAAC;IAACG,MAAM,EAAE;MAACa,CAAC,EAAEI;IAAM,CAAC;IAAEhB,OAAO;IAAEC,KAAK,EAAE;MAACQ,KAAK,EAAEW;IAAQ;EAAC,CAAC,CAAC;EAC7EpB,OAAO,CAACkB,WAAW,CAACF,MAAM,CAACG,MAAM,CAAC;EAElC,OAAOE,GAAG;AACZ;AAEA,OAAO,MAAMC,YAAY,GAAiB;EACxCC,UAAU,EAAE9B,MAAM;EAClB+B,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAE5B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}