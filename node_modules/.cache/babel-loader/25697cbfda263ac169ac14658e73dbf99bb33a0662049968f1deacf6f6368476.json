{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeNearestNeighborGrad } from '@tensorflow/tfjs-core';\nimport { ResizeNearestNeigborBackpropProgram } from '../resize_nearest_neighbor_backprop_webgpu';\nexport function resizeNearestNeighborGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    images,\n    dy\n  } = inputs;\n  const {\n    alignCorners\n  } = attrs;\n  const [, xHeight, xWidth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n  const effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];\n  const effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = Math.ceil(invHeightScale) * 2 + 2;\n  const winWidth = Math.ceil(invWidthScale) * 2 + 2;\n  const program = new ResizeNearestNeigborBackpropProgram(images.shape, alignCorners);\n  const uniformData = [{\n    type: 'int32',\n    data: effectiveXSize\n  }, {\n    type: 'int32',\n    data: effectiveYSize\n  }, {\n    type: 'float32',\n    data: [invHeightScale]\n  }, {\n    type: 'float32',\n    data: [invWidthScale]\n  }, {\n    type: 'int32',\n    data: [winHeight]\n  }, {\n    type: 'int32',\n    data: [winWidth]\n  }];\n  return backend.runWebGPUProgram(program, [dy], dy.dtype, uniformData);\n}\nexport const resizeNearestNeighborGradConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgpu',\n  kernelFunc: resizeNearestNeighborGrad\n};","map":{"version":3,"names":["ResizeNearestNeighborGrad","ResizeNearestNeigborBackpropProgram","resizeNearestNeighborGrad","args","inputs","backend","attrs","images","dy","alignCorners","xHeight","xWidth","shape","yHeight","yWidth","effectiveXSize","effectiveYSize","heightScale","widthScale","invHeightScale","invWidthScale","winHeight","Math","ceil","winWidth","program","uniformData","type","data","runWebGPUProgram","dtype","resizeNearestNeighborGradConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/ResizeNearestNeighborGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ResizeNearestNeigborBackpropProgram} from '../resize_nearest_neighbor_backprop_webgpu';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: WebGPUBackend,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const [, xHeight, xWidth] = images.shape as [number, number, number, number];\n  const [, yHeight, yWidth] = dy.shape as [number, number, number, number];\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  const program = new ResizeNearestNeigborBackpropProgram(\n      images.shape as [number, number, number, number], alignCorners);\n  const uniformData = [\n    {type: 'int32', data: effectiveXSize},\n    {type: 'int32', data: effectiveYSize},\n    {type: 'float32', data: [invHeightScale]},\n    {type: 'float32', data: [invWidthScale]},\n    {type: 'int32', data: [winHeight]}, {type: 'int32', data: [winWidth]}\n  ];\n  return backend.runWebGPUProgram(program, [dy], dy.dtype, uniformData);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgpu',\n  kernelFunc: resizeNearestNeighborGrad as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,yBAAyB,QAAoF,uBAAuB;AAGtK,SAAQC,mCAAmC,QAAO,4CAA4C;AAE9F,OAAM,SAAUC,yBAAyBA,CAACC,IAIzC;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,MAAM;IAAEC;EAAE,CAAC,GAAGJ,MAAM;EAC3B,MAAM;IAACK;EAAY,CAAC,GAAGH,KAAK;EAE5B,MAAM,GAAGI,OAAO,EAAEC,MAAM,CAAC,GAAGJ,MAAM,CAACK,KAAyC;EAC5E,MAAM,GAAGC,OAAO,EAAEC,MAAM,CAAC,GAAGN,EAAE,CAACI,KAAyC;EAExE,MAAMG,cAAc,GAAqB,CACtCN,YAAY,IAAII,OAAO,GAAG,CAAC,GAAIH,OAAO,GAAG,CAAC,GAAGA,OAAO,EACpDD,YAAY,IAAIK,MAAM,GAAG,CAAC,GAAIH,MAAM,GAAG,CAAC,GAAGA,MAAM,CACnD;EAED,MAAMK,cAAc,GAAqB,CACtCP,YAAY,IAAII,OAAO,GAAG,CAAC,GAAIA,OAAO,GAAG,CAAC,GAAGA,OAAO,EACpDJ,YAAY,IAAIK,MAAM,GAAG,CAAC,GAAIA,MAAM,GAAG,CAAC,GAAGA,MAAM,CACnD;EAED,MAAMG,WAAW,GAAGF,cAAc,CAAC,CAAC,CAAC,GAAGC,cAAc,CAAC,CAAC,CAAC;EACzD,MAAME,UAAU,GAAGH,cAAc,CAAC,CAAC,CAAC,GAAGC,cAAc,CAAC,CAAC,CAAC;EAExD,MAAMG,cAAc,GAAG,CAAC,GAAGF,WAAW;EACtC,MAAMG,aAAa,GAAG,CAAC,GAAGF,UAAU;EAEpC;EACA;EACA,MAAMG,SAAS,GAAIC,IAAI,CAACC,IAAI,CAACJ,cAAc,CAAC,GAAG,CAAC,GAAI,CAAC;EACrD,MAAMK,QAAQ,GAAIF,IAAI,CAACC,IAAI,CAACH,aAAa,CAAC,GAAG,CAAC,GAAI,CAAC;EAEnD,MAAMK,OAAO,GAAG,IAAIxB,mCAAmC,CACnDM,MAAM,CAACK,KAAyC,EAAEH,YAAY,CAAC;EACnE,MAAMiB,WAAW,GAAG,CAClB;IAACC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAEb;EAAc,CAAC,EACrC;IAACY,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAEZ;EAAc,CAAC,EACrC;IAACW,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE,CAACT,cAAc;EAAC,CAAC,EACzC;IAACQ,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE,CAACR,aAAa;EAAC,CAAC,EACxC;IAACO,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACP,SAAS;EAAC,CAAC,EAAE;IAACM,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,CAACJ,QAAQ;EAAC,CAAC,CACtE;EACD,OAAOnB,OAAO,CAACwB,gBAAgB,CAACJ,OAAO,EAAE,CAACjB,EAAE,CAAC,EAAEA,EAAE,CAACsB,KAAK,EAAEJ,WAAW,CAAC;AACvE;AAEA,OAAO,MAAMK,+BAA+B,GAAiB;EAC3DC,UAAU,EAAEhC,yBAAyB;EACrCiC,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAEhC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}