{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType, getCoordsXYZ, getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class SliceProgram {\n  constructor(start, destSize) {\n    this.variableNames = ['source'];\n    this.workPerThread = 1;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]);\n    this.start = start;\n    this.uniforms = `start : ${getCoordsDataType(start.length)}, `;\n    this.shaderKey = 'slice';\n  }\n  getUserCode() {\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getCoords(this.rank);\n    let coordSum;\n    if (this.start.length === 1) {\n      coordSum = this.outputShape.map((_, i) => {\n        return `sourceLoc = uniforms.start + coords;`;\n      });\n    } else {\n      coordSum = this.outputShape.map((_, i) => {\n        return `sourceLoc.${coords[i]} = uniforms.start.${getCoordsXYZ(i)} + coords.${coords[i]};`;\n      });\n    }\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          var sourceLoc : ${dtype};\n          let coords = getCoordsFromIndex(index);\n          ${coordSum.join('\\n')}\n          setOutputAtIndex(index, getSource(${sourceCoords}));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\nfunction getCoords(rank) {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(coord => `sourceLoc.${coord}`).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}","map":{"version":3,"names":["getCoordsDataType","getCoordsXYZ","getMainHeaderString","main","computeDispatch","flatDispatchLayout","SliceProgram","constructor","start","destSize","variableNames","workPerThread","workgroupSize","size","outputShape","rank","length","dispatchLayout","dispatch","uniforms","shaderKey","getUserCode","dtype","sourceCoords","getCoords","coordSum","map","_","i","coords","userCode","join","slice","coord","Error"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/slice_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getCoordsXYZ, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SliceProgram implements WebGPUProgram {\n  variableNames = ['source'];\n  uniforms: string;\n  outputShape: number[];\n  shaderKey: string;\n  rank: number;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  start: number[];\n  size = true;\n\n  constructor(start: number[], destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n\n    this.start = start;\n    this.uniforms = `start : ${getCoordsDataType(start.length)}, `;\n    this.shaderKey = 'slice';\n  }\n\n  getUserCode(): string {\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getCoords(this.rank);\n    let coordSum;\n    if (this.start.length === 1) {\n      coordSum = this.outputShape.map((_, i) => {\n        return `sourceLoc = uniforms.start + coords;`;\n      });\n    } else {\n      coordSum = this.outputShape.map((_, i) => {\n        return `sourceLoc.${coords[i]} = uniforms.start.${\n            getCoordsXYZ(i)} + coords.${coords[i]};`;\n      });\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          var sourceLoc : ${dtype};\n          let coords = getCoordsFromIndex(index);\n          ${coordSum.join('\\n')}\n          setOutputAtIndex(index, getSource(${sourceCoords}));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(coord => `sourceLoc.${coord}`).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,iBAAiB,EAAEC,YAAY,EAAEC,mBAAmB,IAAIC,IAAI,QAAsB,kBAAkB;AAC5G,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAEjE,OAAM,MAAOC,YAAY;EAavBC,YAAYC,KAAe,EAAEC,QAAkB;IAZ/C,KAAAC,aAAa,GAAG,CAAC,QAAQ,CAAC;IAO1B,KAAAC,aAAa,GAAG,CAAC;IACjB,KAAAC,aAAa,GAA6B,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IAEpD,KAAAC,IAAI,GAAG,IAAI;IAGT,IAAI,CAACC,WAAW,GAAGL,QAAQ;IAC3B,IAAI,CAACM,IAAI,GAAGN,QAAQ,CAACO,MAAM;IAC3B,IAAI,CAACC,cAAc,GAAGZ,kBAAkB,CAAC,IAAI,CAACS,WAAW,CAAC;IAC1D,IAAI,CAACI,QAAQ,GAAGd,eAAe,CAC3B,IAAI,CAACa,cAAc,EAAE,IAAI,CAACH,WAAW,EAAE,IAAI,CAACF,aAAa,EACzD,CAAC,IAAI,CAACD,aAAa,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAE/B,IAAI,CAACH,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACW,QAAQ,GAAG,WAAWnB,iBAAiB,CAACQ,KAAK,CAACQ,MAAM,CAAC,IAAI;IAC9D,IAAI,CAACI,SAAS,GAAG,OAAO;EAC1B;EAEAC,WAAWA,CAAA;IACT,MAAMC,KAAK,GAAGtB,iBAAiB,CAAC,IAAI,CAACe,IAAI,CAAC;IAC1C,MAAMQ,YAAY,GAAGC,SAAS,CAAC,IAAI,CAACT,IAAI,CAAC;IACzC,IAAIU,QAAQ;IACZ,IAAI,IAAI,CAACjB,KAAK,CAACQ,MAAM,KAAK,CAAC,EAAE;MAC3BS,QAAQ,GAAG,IAAI,CAACX,WAAW,CAACY,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;QACvC,OAAO,sCAAsC;MAC/C,CAAC,CAAC;KACH,MAAM;MACLH,QAAQ,GAAG,IAAI,CAACX,WAAW,CAACY,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;QACvC,OAAO,aAAaC,MAAM,CAACD,CAAC,CAAC,qBACzB3B,YAAY,CAAC2B,CAAC,CAAC,aAAaC,MAAM,CAACD,CAAC,CAAC,GAAG;MAC9C,CAAC,CAAC;;IAGJ,MAAME,QAAQ,GAAG;QACb3B,IAAI,CAAC,OAAO,CAAC;;4BAEOmB,KAAK;;YAErBG,QAAQ,CAACM,IAAI,CAAC,IAAI,CAAC;8CACeR,YAAY;;;KAGrD;IACD,OAAOO,QAAQ;EACjB;;AAGF,MAAMD,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAE7C,SAASL,SAASA,CAACT,IAAY;EAC7B,IAAIA,IAAI,KAAK,CAAC,EAAE;IACd,OAAO,WAAW;GACnB,MAAM,IAAIA,IAAI,IAAI,CAAC,EAAE;IACpB,OAAOc,MAAM,CAACG,KAAK,CAAC,CAAC,EAAEjB,IAAI,CAAC,CAACW,GAAG,CAACO,KAAK,IAAI,aAAaA,KAAK,EAAE,CAAC,CAACF,IAAI,CAAC,GAAG,CAAC;GAC1E,MAAM;IACL,MAAMG,KAAK,CAAC,oBAAoBnB,IAAI,uBAAuB,CAAC;;AAEhE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}