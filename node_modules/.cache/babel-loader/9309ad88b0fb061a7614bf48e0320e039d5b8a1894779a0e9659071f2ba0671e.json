{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { SpaceToBatchNDProgram } from '../space_to_batchND_webgpu';\nimport { reshape } from './Reshape';\nexport const spaceToBatchND = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockShape,\n    paddings\n  } = attrs;\n  util.assert(x.shape.length <= 4, () => 'spaceToBatchND for rank > 4 with a WebGPU backend not ' + 'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n  const completePaddings = [[0, 0]];\n  completePaddings.push(...paddings);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n  const paddedXShape = completePaddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n  const reshapedPaddedShape = backend_util.getReshaped(paddedXShape, blockShape, prod, false);\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n  const flattenShape = backend_util.getReshapedPermuted(paddedXShape, blockShape, prod, false);\n  const paddedXShapeStrides = util.computeStrides(paddedXShape);\n  const program = new SpaceToBatchNDProgram(x.shape, paddedXShape, completePaddings, reshapedPaddedShape, permutedReshapedPaddedPermutation, paddedXShapeStrides.length);\n  const uniformData = [{\n    type: 'int32',\n    data: reshapedPaddedShape\n  }, {\n    type: 'int32',\n    data: paddedXShapeStrides\n  }];\n  completePaddings.map(p => uniformData.push({\n    type: 'int32',\n    data: [p[0], p[1]]\n  }));\n  const paddedXT = backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n  const result = reshape({\n    inputs: {\n      x: paddedXT\n    },\n    backend,\n    attrs: {\n      shape: flattenShape\n    }\n  });\n  backend.disposeData(paddedXT.dataId);\n  return result;\n};\nexport const spaceToBatchNDConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgpu',\n  kernelFunc: spaceToBatchND\n};","map":{"version":3,"names":["backend_util","SpaceToBatchND","util","SpaceToBatchNDProgram","reshape","spaceToBatchND","args","inputs","backend","attrs","x","blockShape","paddings","assert","shape","length","prod","reduce","a","b","completePaddings","push","i","paddedXShape","map","p","reshapedPaddedShape","getReshaped","permutedReshapedPaddedPermutation","getPermuted","flattenShape","getReshapedPermuted","paddedXShapeStrides","computeStrides","program","uniformData","type","data","paddedXT","runWebGPUProgram","dtype","result","disposeData","dataId","spaceToBatchNDConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jesvinblazegmail.com/PycharmProjects/tfjs-backend-webgpu/src/kernels/SpaceToBatchND.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {SpaceToBatchNDProgram} from '../space_to_batchND_webgpu';\n\nimport {reshape} from './Reshape';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: WebGPUBackend,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGPU backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedXShape = completePaddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedXShape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedXShape, blockShape, prod, false);\n\n  const paddedXShapeStrides = util.computeStrides(paddedXShape);\n  const program = new SpaceToBatchNDProgram(\n      x.shape, paddedXShape, completePaddings, reshapedPaddedShape,\n      permutedReshapedPaddedPermutation, paddedXShapeStrides.length);\n  const uniformData = [\n    {type: 'int32', data: reshapedPaddedShape},\n    {type: 'int32', data: paddedXShapeStrides}\n  ];\n  completePaddings.map(\n      p => uniformData.push({type: 'int32', data: [p[0], p[1]]}));\n  const paddedXT = backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n  backend.disposeData(paddedXT.dataId);\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgpu',\n  kernelFunc: spaceToBatchND as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}